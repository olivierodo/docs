{"config":{"lang":["en"],"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"This site provides documentation around general software engineering behaviors and processes at the UKHO.","title":"Home"},{"location":"open-source-governance-checklist/","text":"Open Source Governance Checklist Identifer (e.g. repo name) Technical owner The lead responsible for the repo Description of functionality Must contain enough detail to allow assessment of whether it contains intellectual property that we need to protect. Security How has security been considered? Has application code been scanned with security tooling and issues corrected? This must be done for code supported by our SAST tooling Has the application been threat modelled during development and the evidence captured within TFS (or similar)? Threat modelling must be carried out for all application code, this evidence needs to be reviewed by expert or lead engineer Has the code been double-checked for security credentials, keys etc.? Give details of who has double-checked the code Is a disclosure process in place and linked from the codebase? Use the standard disclose text Quality How has code quality been considered? Does the quality of the code reflect our ambitions for high quality code, in terms of being clean, well-tested etc. Correct answer = yes! Has all code been reviewed? Correct answer = yes! Has the open-sourced codebase had its history removed? If not, have all check-in comments been reviewed? Describe the steps taken to prevent inadvertent disclosed in comments / etc. Does the codebase contain all documentation and configuration elements required to build and verify the software? A user should be able to build / run tests etc. based on what is in the repo Contributions Has the handling of contributions considered? Are contributions explicitly encouraged in the codebase For example, have you enabled the use of issues and provided a CONTRIBUTING.md? Think very carefully before inviting change, as you will then have to answer 'yes' to the next two questions Is a process for responding to issues defined? Describe in detail the process by which you are going to ensure that issues are responded to in a timely manner How is this process resourced? Describe how you have made sure that time is available to carry out the process described above. For example, has the relevant manager agreed for time for time to spent on this?","title":"Open Source Governance Checklist"},{"location":"open-source-governance-checklist/#open-source-governance-checklist","text":"","title":"Open Source Governance Checklist"},{"location":"open-source-governance-checklist/#identifer","text":"(e.g. repo name)","title":"Identifer"},{"location":"open-source-governance-checklist/#technical-owner","text":"The lead responsible for the repo","title":"Technical owner"},{"location":"open-source-governance-checklist/#description-of-functionality","text":"Must contain enough detail to allow assessment of whether it contains intellectual property that we need to protect.","title":"Description of functionality"},{"location":"open-source-governance-checklist/#security","text":"How has security been considered? Has application code been scanned with security tooling and issues corrected? This must be done for code supported by our SAST tooling Has the application been threat modelled during development and the evidence captured within TFS (or similar)? Threat modelling must be carried out for all application code, this evidence needs to be reviewed by expert or lead engineer Has the code been double-checked for security credentials, keys etc.? Give details of who has double-checked the code Is a disclosure process in place and linked from the codebase? Use the standard disclose text","title":"Security"},{"location":"open-source-governance-checklist/#quality","text":"How has code quality been considered? Does the quality of the code reflect our ambitions for high quality code, in terms of being clean, well-tested etc. Correct answer = yes! Has all code been reviewed? Correct answer = yes! Has the open-sourced codebase had its history removed? If not, have all check-in comments been reviewed? Describe the steps taken to prevent inadvertent disclosed in comments / etc. Does the codebase contain all documentation and configuration elements required to build and verify the software? A user should be able to build / run tests etc. based on what is in the repo","title":"Quality"},{"location":"open-source-governance-checklist/#contributions","text":"Has the handling of contributions considered? Are contributions explicitly encouraged in the codebase For example, have you enabled the use of issues and provided a CONTRIBUTING.md? Think very carefully before inviting change, as you will then have to answer 'yes' to the next two questions Is a process for responding to issues defined? Describe in detail the process by which you are going to ensure that issues are responded to in a timely manner How is this process resourced? Describe how you have made sure that time is available to carry out the process described above. For example, has the relevant manager agreed for time for time to spent on this?","title":"Contributions"},{"location":"open-guidance/contributing-details/","text":"CONTRIBUTING.md Details Provides potential contributors the useful information on how to begin contributing to the project and increase the likelihood of their contribution being accepted. May contain links to the Code of Conduct, purpose/aim of the project, code standards, how to run/build/test etc. Overview The CONTRIBUTING.md is the file that users will normally read before contributing to a project and it must provide them with the information needed to contribute to the project in a style which the owner wants. The CONTRIBUTING.md allows the owner to specify the standards and processes they want contributors to use thus setting the rules for everyone, including the rules for how the owner treats contributors. The CONTRIBUTING.md is (obviously) written in Markdown and placed in the root directory of the repository. If a repo does not have a CONTRIBUTING.md then we do not class it as \"open\" and the owner may not want external contributions Must Have Repo owner (Can be team or individual) Contact details for owner (Email) A welcome/intro paragraph. May Have Link to documentation Link to issue tracker Instructions on how to run tests locally Instructions on how to develop code locally Pull Request process Style guide Where a user can find help Security issue reporting How to report bugs How to request a feature Code of Conduct The recognition model(how people are thanked) Philosophy of the project Versioning process Commit message guidance Definition of done Roadmap Branching conventions Anything else that seems relevant Resources Mozilla tutorial - Good guide on creating/thinking about writing a CONTRIBUTING.MD Template contributing.md - Example base template of a CONTRIBUTING.MD Understanding the InnerSource Checklist - pg. 25 - Creating good house rules for guests: Writing contributing agreements Examples Atom OpenGovernment Rails GitLab","title":"CONTRIBUTING.md Details"},{"location":"open-guidance/contributing-details/#contributingmd-details","text":"Provides potential contributors the useful information on how to begin contributing to the project and increase the likelihood of their contribution being accepted. May contain links to the Code of Conduct, purpose/aim of the project, code standards, how to run/build/test etc.","title":"CONTRIBUTING.md Details"},{"location":"open-guidance/contributing-details/#overview","text":"The CONTRIBUTING.md is the file that users will normally read before contributing to a project and it must provide them with the information needed to contribute to the project in a style which the owner wants. The CONTRIBUTING.md allows the owner to specify the standards and processes they want contributors to use thus setting the rules for everyone, including the rules for how the owner treats contributors. The CONTRIBUTING.md is (obviously) written in Markdown and placed in the root directory of the repository. If a repo does not have a CONTRIBUTING.md then we do not class it as \"open\" and the owner may not want external contributions","title":"Overview"},{"location":"open-guidance/contributing-details/#must-have","text":"Repo owner (Can be team or individual) Contact details for owner (Email) A welcome/intro paragraph.","title":"Must Have"},{"location":"open-guidance/contributing-details/#may-have","text":"Link to documentation Link to issue tracker Instructions on how to run tests locally Instructions on how to develop code locally Pull Request process Style guide Where a user can find help Security issue reporting How to report bugs How to request a feature Code of Conduct The recognition model(how people are thanked) Philosophy of the project Versioning process Commit message guidance Definition of done Roadmap Branching conventions Anything else that seems relevant","title":"May Have"},{"location":"open-guidance/contributing-details/#resources","text":"Mozilla tutorial - Good guide on creating/thinking about writing a CONTRIBUTING.MD Template contributing.md - Example base template of a CONTRIBUTING.MD Understanding the InnerSource Checklist - pg. 25 - Creating good house rules for guests: Writing contributing agreements","title":"Resources"},{"location":"open-guidance/contributing-details/#examples","text":"Atom OpenGovernment Rails GitLab","title":"Examples"},{"location":"open-guidance/migration/","text":"Migrating an existing project As part of the Open Source Governance Checklist , it is a requirement that sensitive data has been removed from the repository history. This can be acheived with Git's filter-branch command to walk over the history of a branch and apply changes throughout. Remove lines from commit messages Gerrit leaves a Commit-Id line in every commit message made. To remove these, the --msg-filter can be used as follows: git filter-branch -f --msg-filter 'sed \"/Change-Id/ d\"' -- --all Substitute Change-Id for any string to match an entire line and delete from all commit message in the branch. Remove directories/files from branch trees To remove directories from the entire history of a branch, use the --tree-filter as follows: git filter-branch --tree-filter \"rm -rf dev\" --prune-empty HEAD","title":"Migrating an existing project"},{"location":"open-guidance/migration/#migrating-an-existing-project","text":"As part of the Open Source Governance Checklist , it is a requirement that sensitive data has been removed from the repository history. This can be acheived with Git's filter-branch command to walk over the history of a branch and apply changes throughout.","title":"Migrating an existing project"},{"location":"open-guidance/migration/#remove-lines-from-commit-messages","text":"Gerrit leaves a Commit-Id line in every commit message made. To remove these, the --msg-filter can be used as follows: git filter-branch -f --msg-filter 'sed \"/Change-Id/ d\"' -- --all Substitute Change-Id for any string to match an entire line and delete from all commit message in the branch.","title":"Remove lines from commit messages"},{"location":"open-guidance/migration/#remove-directoriesfiles-from-branch-trees","text":"To remove directories from the entire history of a branch, use the --tree-filter as follows: git filter-branch --tree-filter \"rm -rf dev\" --prune-empty HEAD","title":"Remove directories/files from branch trees"},{"location":"open-guidance/open-guidance/","text":"Open-Guidance Guidance for what basic documents must be within a repo for open software, aimed to create a common and familiar style. Background This repository is to provide guidance on what must exist in open repos as a minimum with the aim of enabling people to feel familiar when browsing, find information and to become productive if contributing back. Overview All open repos must contain the following: A CONTRIBUTING.md within the root folder. The file is a marker to people that this repo will accept changes from outside of the team. It must contain the processes that the owner of the repository needs people to follow when contributing to the project. Guidance on how to write a CONTRIBUTING.md . A LICENSE within the root folder. This will be MIT in most cases. Having a license is critical as it states what others are allowed to do with the code. A README.md within the root folder. This must contain some basic useful information for the user allowing them to quickly understand the project and get started using it. It isn't the place for extensive documentation. Guidance on what should be in a README.md can be found . A continuous integration build process. Each time a pull request is submitted a build is triggered which will run all the tests to ensure the change does not break any features. This will also give the contributor feedback and confidence that there code will work! Above is the minimum for an what open repo must contain, other useful things a repo may contain: Code of Conduct Code of Conduct from contributor covenant . Changelog Keep a changelog . TDL (Technical decision log) Documenting Architecture Decisions . Architecture Decision Records In action presentation . Scripts script/bootstrap - Configure the machine ready to develop for this repo(pull down and configure dependencies etc.) script/dev - Start any background processes/servers needed during development script/test - Run all the tests for this repo. Code Contribution Process All open repos must be using git and code contributions should be made using the standard Fork and Pull Request approach(or equivalent). Rough guidance on how to make a pull request . Terminology Contributing - This is more than just adding code, this also include creating issues/bug reports, asking questions, improving documentation. Contributor - This refers to anyone who has added to this project, including filing issues. Repo - A git repository and the associated Github/lab with it. Pull Request - How a contributor asks the owner of a repository to accept their contribution. The owner \"pulls\" the contribution into the main repository. Inspiration Alpha Gov - Open Standards","title":"Open-Guidance"},{"location":"open-guidance/open-guidance/#open-guidance","text":"Guidance for what basic documents must be within a repo for open software, aimed to create a common and familiar style.","title":"Open-Guidance"},{"location":"open-guidance/open-guidance/#background","text":"This repository is to provide guidance on what must exist in open repos as a minimum with the aim of enabling people to feel familiar when browsing, find information and to become productive if contributing back.","title":"Background"},{"location":"open-guidance/open-guidance/#overview","text":"All open repos must contain the following: A CONTRIBUTING.md within the root folder. The file is a marker to people that this repo will accept changes from outside of the team. It must contain the processes that the owner of the repository needs people to follow when contributing to the project. Guidance on how to write a CONTRIBUTING.md . A LICENSE within the root folder. This will be MIT in most cases. Having a license is critical as it states what others are allowed to do with the code. A README.md within the root folder. This must contain some basic useful information for the user allowing them to quickly understand the project and get started using it. It isn't the place for extensive documentation. Guidance on what should be in a README.md can be found . A continuous integration build process. Each time a pull request is submitted a build is triggered which will run all the tests to ensure the change does not break any features. This will also give the contributor feedback and confidence that there code will work! Above is the minimum for an what open repo must contain, other useful things a repo may contain: Code of Conduct Code of Conduct from contributor covenant . Changelog Keep a changelog . TDL (Technical decision log) Documenting Architecture Decisions . Architecture Decision Records In action presentation . Scripts script/bootstrap - Configure the machine ready to develop for this repo(pull down and configure dependencies etc.) script/dev - Start any background processes/servers needed during development script/test - Run all the tests for this repo.","title":"Overview"},{"location":"open-guidance/open-guidance/#code-contribution-process","text":"All open repos must be using git and code contributions should be made using the standard Fork and Pull Request approach(or equivalent). Rough guidance on how to make a pull request .","title":"Code Contribution Process"},{"location":"open-guidance/open-guidance/#terminology","text":"Contributing - This is more than just adding code, this also include creating issues/bug reports, asking questions, improving documentation. Contributor - This refers to anyone who has added to this project, including filing issues. Repo - A git repository and the associated Github/lab with it. Pull Request - How a contributor asks the owner of a repository to accept their contribution. The owner \"pulls\" the contribution into the main repository.","title":"Terminology"},{"location":"open-guidance/open-guidance/#inspiration","text":"Alpha Gov - Open Standards","title":"Inspiration"},{"location":"open-guidance/pull-request-details/","text":"Making a Pull Request This is a suggested process, individual repositories will want pull requests to be constructed differently. Check a repos \"CONTRIBUTING.md\" for specific guidelines and ask if you are unsure! Suggested Pull Request Process Clone repository locally Create a new branch off the master branch Make changes with clear commits following good commit guidelines Pull down any changes that might have happened whilst you were making your changes and merge them in locally. Push the branch you made your changes on up to the server Create a pull request from the branch into master A build will be triggered and go green before a PR is accepted The changes will be reviewed by the owners of the repo and can suggest changes Make suggested changes and push them up to the branch again Owner of the repository will accept and merge your changes into master NOTE: If you are making a large feature/architectural changes, open an issue first and discuss it with the owner as they might have additional insights or don't think it is appropriate for the repo. Resources Standard Fork & Pull Request Workflow How To Write The Perfect Pull Request Making A Pull Request GitHub Flow - Really high level Atomic Commits","title":"Making a Pull Request"},{"location":"open-guidance/pull-request-details/#making-a-pull-request","text":"This is a suggested process, individual repositories will want pull requests to be constructed differently. Check a repos \"CONTRIBUTING.md\" for specific guidelines and ask if you are unsure!","title":"Making a Pull Request"},{"location":"open-guidance/pull-request-details/#suggested-pull-request-process","text":"Clone repository locally Create a new branch off the master branch Make changes with clear commits following good commit guidelines Pull down any changes that might have happened whilst you were making your changes and merge them in locally. Push the branch you made your changes on up to the server Create a pull request from the branch into master A build will be triggered and go green before a PR is accepted The changes will be reviewed by the owners of the repo and can suggest changes Make suggested changes and push them up to the branch again Owner of the repository will accept and merge your changes into master NOTE: If you are making a large feature/architectural changes, open an issue first and discuss it with the owner as they might have additional insights or don't think it is appropriate for the repo.","title":"Suggested Pull Request Process"},{"location":"open-guidance/pull-request-details/#resources","text":"Standard Fork & Pull Request Workflow How To Write The Perfect Pull Request Making A Pull Request GitHub Flow - Really high level Atomic Commits","title":"Resources"},{"location":"open-guidance/readme-details/","text":"README.md Details A README.md must provide a user/contributor with a brief summary of the repo and should contain installation steps, basic usage and it's features. The guidelines here are aimed to be applicable regardless of whether the repo is a runnable program, library or framework. Overview The README.md is the first file people look in when evaluating whether to use or contribute to a repo, so when writing them ensure the information is relevant to someone who doesn't know your repo and doesn't care about it. You need to provide just enough information for someone to understand the goals of the repo, download it and get started using it. The README.md is (obviously) written in Markdown and placed in the root directory of the repository. It is not the place for detailed documentation, keep that elsewhere and include links to it. The README.md should also feel familiar, you have probably looked at hundreds of README.md's over the year without realising, try to keep yours in the same style so it feels natural to the reader. Must Have Title of project Introductory paragraph Caveats/Limitations Should Have Demo/Usage (Only very basic) Installation Description of features (this can be rolled into the introductory paragraph) May Have Build badges Single sentence summary Pictures/GIFs How to run the tests How to run the application Link to the license Example HTTP requests/responses (if that kind of repo) Version/Changelog Table of Contents Link to documentation Background context, why have you written this Team members/contributors. Anything else that seems relevant Resources Awesome Readme - An \"awesome-list\" for readme Art Of Readme - Aimed at Node projects but lots of relevant information and philosophy of writing good readme's. GOV.UK Readme Guidance incl Template - A bit heavyweight compared to other advice but relevant and useful. Template Examples Electron-Markdownify HTTPie - Bit long, all documentation is in it. NSGIF Gaze","title":"README.md Details"},{"location":"open-guidance/readme-details/#readmemd-details","text":"A README.md must provide a user/contributor with a brief summary of the repo and should contain installation steps, basic usage and it's features. The guidelines here are aimed to be applicable regardless of whether the repo is a runnable program, library or framework.","title":"README.md Details"},{"location":"open-guidance/readme-details/#overview","text":"The README.md is the first file people look in when evaluating whether to use or contribute to a repo, so when writing them ensure the information is relevant to someone who doesn't know your repo and doesn't care about it. You need to provide just enough information for someone to understand the goals of the repo, download it and get started using it. The README.md is (obviously) written in Markdown and placed in the root directory of the repository. It is not the place for detailed documentation, keep that elsewhere and include links to it. The README.md should also feel familiar, you have probably looked at hundreds of README.md's over the year without realising, try to keep yours in the same style so it feels natural to the reader.","title":"Overview"},{"location":"open-guidance/readme-details/#must-have","text":"Title of project Introductory paragraph Caveats/Limitations","title":"Must Have"},{"location":"open-guidance/readme-details/#should-have","text":"Demo/Usage (Only very basic) Installation Description of features (this can be rolled into the introductory paragraph)","title":"Should Have"},{"location":"open-guidance/readme-details/#may-have","text":"Build badges Single sentence summary Pictures/GIFs How to run the tests How to run the application Link to the license Example HTTP requests/responses (if that kind of repo) Version/Changelog Table of Contents Link to documentation Background context, why have you written this Team members/contributors. Anything else that seems relevant","title":"May Have"},{"location":"open-guidance/readme-details/#resources","text":"Awesome Readme - An \"awesome-list\" for readme Art Of Readme - Aimed at Node projects but lots of relevant information and philosophy of writing good readme's. GOV.UK Readme Guidance incl Template - A bit heavyweight compared to other advice but relevant and useful. Template","title":"Resources"},{"location":"open-guidance/readme-details/#examples","text":"Electron-Markdownify HTTPie - Bit long, all documentation is in it. NSGIF Gaze","title":"Examples"},{"location":"quality-assurance/","text":"UKHO Test Community Docs These documents detail how we work as a Test Community at UKHO. We aim to provide a framework for our testers, developers and community engineers to enable them to deliver testing that supports our desire to build and release good software quickly. Where to start If you read nothing else, then read these three things: Our Test Automation Strategy contains details of the UKHO approach to testing, including the Test Pyramid and Principles of Test Automation The UKHO Delivery Quality Charter assists delivery teams in adopting practices proven to improve quality of delivery The BDD Reference Page contains information on BDD to aid our use at UKHO Contents Vision Acceptance Criteria BDD Browser Automation Code Standards Open Source Repositories Tester Roles Test Automation Strategy Test Policy Test Principles Test Standards Test Strategy UKHO Delivery Quality Charter","title":"UKHO Test Community Docs"},{"location":"quality-assurance/#ukho-test-community-docs","text":"These documents detail how we work as a Test Community at UKHO. We aim to provide a framework for our testers, developers and community engineers to enable them to deliver testing that supports our desire to build and release good software quickly.","title":"UKHO Test Community Docs"},{"location":"quality-assurance/#where-to-start","text":"If you read nothing else, then read these three things: Our Test Automation Strategy contains details of the UKHO approach to testing, including the Test Pyramid and Principles of Test Automation The UKHO Delivery Quality Charter assists delivery teams in adopting practices proven to improve quality of delivery The BDD Reference Page contains information on BDD to aid our use at UKHO","title":"Where to start"},{"location":"quality-assurance/#contents","text":"Vision Acceptance Criteria BDD Browser Automation Code Standards Open Source Repositories Tester Roles Test Automation Strategy Test Policy Test Principles Test Standards Test Strategy UKHO Delivery Quality Charter","title":"Contents"},{"location":"quality-assurance/acceptance-criteria/","text":"Acceptance Criteria Guidance This page provides tips on writing effective acceptance criteria (AC). What is Acceptance Criteria Conditions that a software product must satisfy to be accepted by a user, customer or other stakeholder. Why write good Acceptance Criteria To ensure all members of a team have a shared understanding of the requirements of the stories they are developing. How do I know I am doing it right The whole team is involved in the creation and refinement of AC AC is recorded and agreed before a user story is played Every user story has at least 1 and a maximum of 5 ACs - too many ACs? Split the story All criteria are independently testable with a clear pass / fail outcome Non-functional criteria is included where applicable How to generate good Acceptance Criteria Use Example Mapping sessions - Example Mapping as part of BDD Record it using Gherkin scenario-orientated syntax - \u201cGiven...When...Then...\u201d","title":"Acceptance Criteria Guidance"},{"location":"quality-assurance/acceptance-criteria/#acceptance-criteria-guidance","text":"This page provides tips on writing effective acceptance criteria (AC).","title":"Acceptance Criteria Guidance"},{"location":"quality-assurance/acceptance-criteria/#what-is-acceptance-criteria","text":"Conditions that a software product must satisfy to be accepted by a user, customer or other stakeholder.","title":"What is Acceptance Criteria"},{"location":"quality-assurance/acceptance-criteria/#why-write-good-acceptance-criteria","text":"To ensure all members of a team have a shared understanding of the requirements of the stories they are developing.","title":"Why write good Acceptance Criteria"},{"location":"quality-assurance/acceptance-criteria/#how-do-i-know-i-am-doing-it-right","text":"The whole team is involved in the creation and refinement of AC AC is recorded and agreed before a user story is played Every user story has at least 1 and a maximum of 5 ACs - too many ACs? Split the story All criteria are independently testable with a clear pass / fail outcome Non-functional criteria is included where applicable","title":"How do I know I am doing it right"},{"location":"quality-assurance/acceptance-criteria/#how-to-generate-good-acceptance-criteria","text":"Use Example Mapping sessions - Example Mapping as part of BDD Record it using Gherkin scenario-orientated syntax - \u201cGiven...When...Then...\u201d","title":"How to generate good Acceptance Criteria"},{"location":"quality-assurance/bdd/","text":"Behaviour Driven Development (BDD) What is BDD \"An approach that enhances communication between stakeholders and project team members by expressing product needs as concrete examples\" BDD: Is a process to enable the entire team to better understand stories before they are played Enables structured collaboration between Product Owners (proxy for the customer), developers and testers to gain an agreed understanding Uses rules and examples to illustrate this understanding BDD is NOT: Testing Gherkin SpecFlow or Cucumber Just automated tests (tests are a downstream benefit) Benefits of BDD Creates a shared understanding in the team of user requirements Ensures all perspectives are considered when defining requirements Produces better software that matches user needs first time Stages of BDD How a team can apply BDD Discovery The customer representative brings requirements to the team as user stories (PBIs) The Example Mapping technique is applied to these stories either by the whole team or a \"Three Amigos\" subset This will create rules and examples that illustrate an understanding of the story Formulation Examples can be formulated into Gherkin and documented in the acceptance criteria Automation Derive automated tests from the Gherkin (this does not have to involve putting the Gherkin into SpecFlow/Cucumber) Example Mapping Example Mapping is a structured technique to drive out understanding of user requirements. Example Mapping sessions can involve the whole team, or just the \"Three Amigos\" (Developer, Tester, Product Owner). It is important that all perspectives in the team are involved. Approach A story is created by the customer representative and presented to the group. The group discuss the story and determine rules that clarify the purpose of the story. Examples are created by the group to demonstrate the understanding of the rules. When creating examples it may become clear that further rules are needed. When there are lots of rules this may indicate the story is too big and should be split. Any questions that cannot be answered in the session should be recorded and answered subsequently. If there are lots of questions this may indicate the story is not understood and needs to go back to the customer. Resources Books Discovery: Explore behaviour using examples - Gaspar Nagy ( Amazon link ) BDD in Action: Behaviour-driven development for the whole software lifecycle - John Ferguson Smart ( Amazon link ) Online resources Example Mapping by Gaspar Nagy Another description of Example Mapping by Matt Wynne Writing better Gherkin scenarios Gherkin - keeping your scenarios BRIEF How writing good Gherkin enables better automation How to facilitate an Example Mapping session","title":"Behaviour Driven Development (BDD)"},{"location":"quality-assurance/bdd/#behaviour-driven-development-bdd","text":"","title":"Behaviour Driven Development (BDD)"},{"location":"quality-assurance/bdd/#what-is-bdd","text":"\"An approach that enhances communication between stakeholders and project team members by expressing product needs as concrete examples\" BDD: Is a process to enable the entire team to better understand stories before they are played Enables structured collaboration between Product Owners (proxy for the customer), developers and testers to gain an agreed understanding Uses rules and examples to illustrate this understanding BDD is NOT: Testing Gherkin SpecFlow or Cucumber Just automated tests (tests are a downstream benefit)","title":"What is BDD"},{"location":"quality-assurance/bdd/#benefits-of-bdd","text":"Creates a shared understanding in the team of user requirements Ensures all perspectives are considered when defining requirements Produces better software that matches user needs first time","title":"Benefits of BDD"},{"location":"quality-assurance/bdd/#stages-of-bdd","text":"","title":"Stages of BDD"},{"location":"quality-assurance/bdd/#how-a-team-can-apply-bdd","text":"","title":"How a team can apply BDD"},{"location":"quality-assurance/bdd/#discovery","text":"The customer representative brings requirements to the team as user stories (PBIs) The Example Mapping technique is applied to these stories either by the whole team or a \"Three Amigos\" subset This will create rules and examples that illustrate an understanding of the story","title":"Discovery"},{"location":"quality-assurance/bdd/#formulation","text":"Examples can be formulated into Gherkin and documented in the acceptance criteria","title":"Formulation"},{"location":"quality-assurance/bdd/#automation","text":"Derive automated tests from the Gherkin (this does not have to involve putting the Gherkin into SpecFlow/Cucumber)","title":"Automation"},{"location":"quality-assurance/bdd/#example-mapping","text":"Example Mapping is a structured technique to drive out understanding of user requirements. Example Mapping sessions can involve the whole team, or just the \"Three Amigos\" (Developer, Tester, Product Owner). It is important that all perspectives in the team are involved.","title":"Example Mapping"},{"location":"quality-assurance/bdd/#approach","text":"A story is created by the customer representative and presented to the group. The group discuss the story and determine rules that clarify the purpose of the story. Examples are created by the group to demonstrate the understanding of the rules. When creating examples it may become clear that further rules are needed. When there are lots of rules this may indicate the story is too big and should be split. Any questions that cannot be answered in the session should be recorded and answered subsequently. If there are lots of questions this may indicate the story is not understood and needs to go back to the customer.","title":"Approach"},{"location":"quality-assurance/bdd/#resources","text":"","title":"Resources"},{"location":"quality-assurance/bdd/#books","text":"Discovery: Explore behaviour using examples - Gaspar Nagy ( Amazon link ) BDD in Action: Behaviour-driven development for the whole software lifecycle - John Ferguson Smart ( Amazon link )","title":"Books"},{"location":"quality-assurance/bdd/#online-resources","text":"Example Mapping by Gaspar Nagy Another description of Example Mapping by Matt Wynne Writing better Gherkin scenarios Gherkin - keeping your scenarios BRIEF How writing good Gherkin enables better automation How to facilitate an Example Mapping session","title":"Online resources"},{"location":"quality-assurance/browser-automation/","text":"Browser Automation This section will cover the browser automation tools we use at the UKHO and the recommended uses for each one. The three recommended tools for Browser Automation (for UI, e2e and integration testing) are: Cypress Cypress is a front end testing tool built for testing web apps. Cypress runs within available and supported browsers installed on the machine (the Electron browser is baked into Cypress and does not need to be installed separately). Cypress test code is executed directly within the browser as JavaScript, meaning there are no language or driver bindings and the tests can execute much faster and with more reliability. It also has full DOM and network traffic recording to aid debugging within the Cypress Test Runner. Cypress, however, does have its limitations. It has been created to test your application and your application only, and works best if the application is a Single Page Application; or a Multi Page Application in the same domain that does not utilise pop-ups or new tabs / windows. Some authentication scenarios can be worked out, primarily SSO and NTLM Windows Auth, but not MSAL Azure B2C Auth. Playwright Playwright enables fast, reliable and capable automation across all modern browsers. It is a Node.js library to automate Chromium, Firefox and WebKit with a single API. Upon install, Playwright downloads a version of Chromium/Chrome and uses the Chrome DevTools Protocol to orchestrate the browser instance. For Firefox and WebKit engines, Playwright downloads the actual browser but extends their debugging protocol capabilities to provide a unified API and features. There is no modification of the actual browsers, so that it is expected to work exactly the same in the testing and the real user's browser. Go here for more information on the browser binaries. One of the big disadvantages over Cypress is that it does not have a fully supported Test Runner ( playwright-test is currently in its first preview release), therefore screenshots, videos, DOM and network traffic are not recorded out of the box, making debugging tests less intuitive. The core advantage of using Playwright over Cypress is that it is an out-of-process automation driver that is not limited by the scope of in-page JavaScript execution and can automate scenarios with multiple pages and popups. Playwright's documentation and community is not as comprehensive as Cypress or Selenium, yet, it is constantly being added to as the tool is developed and the community is growing. Selenium Selenium is a tool for web browser automation that uses WebDrivers to remotely control browser instances and emulate a user\u2019s interaction with the browser. This allows tests to be run across many browsers and versions using the associated WebDriver. One of the reasons that Selenium is popular is because of its available language bindings, these include Java, C#, JavaScript and Python. Selenium is a very good tool to automate true E2E and user interactions, but it takes time and effort to get the framework right, and then there is the overhead of maintaining it along with the WebDrivers and browser versions (though this overhead can be reduced through the use of tools such as automated driver synchronisation . It is also not as fast or intuitive as Cypress or Playwright. Which tool should I use Here is a list of sample questions / statements and responses to work through (alongside the tool capabilities) with a Test Lead to decide which tool is right for the job . I just want to do pure UI testing Use Cypress and stub or mock external dependencies as required. I want to do E2E / Integration testing but our application uses MSAL Azure B2C authentication Use Playwright. As this authentication requires interactive login, Cypress cannot deal with this use case. The application is a Single Page Application or a Multi Page Application in the same domain Use Cypress. There is a package to deal with NTLM(Windows) authentication and recipes for general SSO. The application has multiple tabs / windows / domains Use Playwright. I need to test against non-chromium based browser versions (e.g. Edge and IE) If yes, consider if this needs to be automated. If it does then Selenium, if not refer back to the previous questions. Tool Capabilities This section will outline the capabilities of each to assist in the selection of the correct tool. Capability Cypress Playwright Selenium Documentation Yes ( link ) Yes ( link ) Yes ( link ) Relative speed of execution Fastest Fast Slowest Open-source Yes Yes Yes Supported Browsers Chrome, Edge (Chromium), Electron, Firefox Chrome, Edge (Chromium), Safari (WebKit), Firefox Chrome, Edge (Legacy and Chromium), Safari, Firefox, Internet Explorer Supported Languages JavaScript JavaScript JavaScript, Java, C#, Python, Ruby Cross Domain Support No Yes Yes Supports Multiple Tabs No Yes Yes Supports Multiple Pages No Yes Yes Accessing iFrames Not fully supported Yes Yes Auto-wait Yes Yes No Intercept Network Traffic Yes Yes No (currently) Screenshots on failure Yes (Built in) Yes (Not built in) Yes (Not built in) Record Test Yes (Built in) Yes (Not built in) Yes (Not built in / not easy to implement) Full DOM recording Yes No No","title":"Browser Automation"},{"location":"quality-assurance/browser-automation/#browser-automation","text":"This section will cover the browser automation tools we use at the UKHO and the recommended uses for each one. The three recommended tools for Browser Automation (for UI, e2e and integration testing) are:","title":"Browser Automation"},{"location":"quality-assurance/browser-automation/#cypress","text":"Cypress is a front end testing tool built for testing web apps. Cypress runs within available and supported browsers installed on the machine (the Electron browser is baked into Cypress and does not need to be installed separately). Cypress test code is executed directly within the browser as JavaScript, meaning there are no language or driver bindings and the tests can execute much faster and with more reliability. It also has full DOM and network traffic recording to aid debugging within the Cypress Test Runner. Cypress, however, does have its limitations. It has been created to test your application and your application only, and works best if the application is a Single Page Application; or a Multi Page Application in the same domain that does not utilise pop-ups or new tabs / windows. Some authentication scenarios can be worked out, primarily SSO and NTLM Windows Auth, but not MSAL Azure B2C Auth.","title":"Cypress"},{"location":"quality-assurance/browser-automation/#playwright","text":"Playwright enables fast, reliable and capable automation across all modern browsers. It is a Node.js library to automate Chromium, Firefox and WebKit with a single API. Upon install, Playwright downloads a version of Chromium/Chrome and uses the Chrome DevTools Protocol to orchestrate the browser instance. For Firefox and WebKit engines, Playwright downloads the actual browser but extends their debugging protocol capabilities to provide a unified API and features. There is no modification of the actual browsers, so that it is expected to work exactly the same in the testing and the real user's browser. Go here for more information on the browser binaries. One of the big disadvantages over Cypress is that it does not have a fully supported Test Runner ( playwright-test is currently in its first preview release), therefore screenshots, videos, DOM and network traffic are not recorded out of the box, making debugging tests less intuitive. The core advantage of using Playwright over Cypress is that it is an out-of-process automation driver that is not limited by the scope of in-page JavaScript execution and can automate scenarios with multiple pages and popups. Playwright's documentation and community is not as comprehensive as Cypress or Selenium, yet, it is constantly being added to as the tool is developed and the community is growing.","title":"Playwright"},{"location":"quality-assurance/browser-automation/#selenium","text":"Selenium is a tool for web browser automation that uses WebDrivers to remotely control browser instances and emulate a user\u2019s interaction with the browser. This allows tests to be run across many browsers and versions using the associated WebDriver. One of the reasons that Selenium is popular is because of its available language bindings, these include Java, C#, JavaScript and Python. Selenium is a very good tool to automate true E2E and user interactions, but it takes time and effort to get the framework right, and then there is the overhead of maintaining it along with the WebDrivers and browser versions (though this overhead can be reduced through the use of tools such as automated driver synchronisation . It is also not as fast or intuitive as Cypress or Playwright.","title":"Selenium"},{"location":"quality-assurance/browser-automation/#which-tool-should-i-use","text":"Here is a list of sample questions / statements and responses to work through (alongside the tool capabilities) with a Test Lead to decide which tool is right for the job .","title":"Which tool should I use"},{"location":"quality-assurance/browser-automation/#i-just-want-to-do-pure-ui-testing","text":"Use Cypress and stub or mock external dependencies as required.","title":"I just want to do pure UI testing"},{"location":"quality-assurance/browser-automation/#i-want-to-do-e2e-integration-testing-but-our-application-uses-msal-azure-b2c-authentication","text":"Use Playwright. As this authentication requires interactive login, Cypress cannot deal with this use case.","title":"I want to do E2E / Integration testing but our application uses MSAL Azure B2C authentication"},{"location":"quality-assurance/browser-automation/#the-application-is-a-single-page-application-or-a-multi-page-application-in-the-same-domain","text":"Use Cypress. There is a package to deal with NTLM(Windows) authentication and recipes for general SSO.","title":"The application is a Single Page Application or a Multi Page Application in the same domain"},{"location":"quality-assurance/browser-automation/#the-application-has-multiple-tabs-windows-domains","text":"Use Playwright.","title":"The application has multiple tabs / windows / domains"},{"location":"quality-assurance/browser-automation/#i-need-to-test-against-non-chromium-based-browser-versions-eg-edge-and-ie","text":"If yes, consider if this needs to be automated. If it does then Selenium, if not refer back to the previous questions.","title":"I need to test against non-chromium based browser versions (e.g. Edge and IE)"},{"location":"quality-assurance/browser-automation/#tool-capabilities","text":"This section will outline the capabilities of each to assist in the selection of the correct tool. Capability Cypress Playwright Selenium Documentation Yes ( link ) Yes ( link ) Yes ( link ) Relative speed of execution Fastest Fast Slowest Open-source Yes Yes Yes Supported Browsers Chrome, Edge (Chromium), Electron, Firefox Chrome, Edge (Chromium), Safari (WebKit), Firefox Chrome, Edge (Legacy and Chromium), Safari, Firefox, Internet Explorer Supported Languages JavaScript JavaScript JavaScript, Java, C#, Python, Ruby Cross Domain Support No Yes Yes Supports Multiple Tabs No Yes Yes Supports Multiple Pages No Yes Yes Accessing iFrames Not fully supported Yes Yes Auto-wait Yes Yes No Intercept Network Traffic Yes Yes No (currently) Screenshots on failure Yes (Built in) Yes (Not built in) Yes (Not built in) Record Test Yes (Built in) Yes (Not built in) Yes (Not built in / not easy to implement) Full DOM recording Yes No No","title":"Tool Capabilities"},{"location":"quality-assurance/test-automation-strategy/","text":"Test Automation Strategy Introduction This strategy document details the UKHO approach to test automation. As an organisation we recognise the importance of embracing test automation and utilising it to enable faster development and release of our software products. This strategy acts as a baseline for UKHO delivery teams, with each team empowered to determine how they will adhere to this strategy. Our Test Automation Model To summarise our approach to test automation we created our take on the standard Test Pyramid Model. This promotes: The areas of testing we aim to automate The correct level in the pyramid we should add testing Principles of Test Automation We suggest that all teams using automation should adhere to these principles: New functionality must be covered by passing automated tests (unless there is a legitimate reason not to) Make use of test design patterns and principles Add tests at the correct level of the test pyramid \u2013 lower is better All tests should be independent of each other Test Automation Standards The following standards act as a guide for the creation of automated tests: Test Standards Ways of Working Test automation has provided the opportunity to move away from the traditional developer \u2013 tester divide and move towards an integrated way of working. The following principles are promoted: Use Test-Driven Design when developing functionality Pairing developer-tester can improve the quality of testing at all levels Ensure there is a process to manage existing test automation (reviewing execution time, test relevance, code refactoring) Test results are made visible to the team Follow the \u201cgreen tests run\u201d policy (i.e. all tests must pass before new functionality is submitted) How we measure our progress We will maintain metrics to determine our current state of automation at the UKHO. The metrics will be produced by comparing the state of test automation in a product against the exemplar test pyramid. The Future The UKHO Test Community will review and evolve this strategy over time to ensure our approach and ways or working continue to support our development and release processes.","title":"Test Automation Strategy"},{"location":"quality-assurance/test-automation-strategy/#test-automation-strategy","text":"","title":"Test Automation Strategy"},{"location":"quality-assurance/test-automation-strategy/#introduction","text":"This strategy document details the UKHO approach to test automation. As an organisation we recognise the importance of embracing test automation and utilising it to enable faster development and release of our software products. This strategy acts as a baseline for UKHO delivery teams, with each team empowered to determine how they will adhere to this strategy.","title":"Introduction"},{"location":"quality-assurance/test-automation-strategy/#our-test-automation-model","text":"To summarise our approach to test automation we created our take on the standard Test Pyramid Model. This promotes: The areas of testing we aim to automate The correct level in the pyramid we should add testing","title":"Our Test Automation Model"},{"location":"quality-assurance/test-automation-strategy/#principles-of-test-automation","text":"We suggest that all teams using automation should adhere to these principles: New functionality must be covered by passing automated tests (unless there is a legitimate reason not to) Make use of test design patterns and principles Add tests at the correct level of the test pyramid \u2013 lower is better All tests should be independent of each other","title":"Principles of Test Automation"},{"location":"quality-assurance/test-automation-strategy/#test-automation-standards","text":"The following standards act as a guide for the creation of automated tests: Test Standards","title":"Test Automation Standards"},{"location":"quality-assurance/test-automation-strategy/#ways-of-working","text":"Test automation has provided the opportunity to move away from the traditional developer \u2013 tester divide and move towards an integrated way of working. The following principles are promoted: Use Test-Driven Design when developing functionality Pairing developer-tester can improve the quality of testing at all levels Ensure there is a process to manage existing test automation (reviewing execution time, test relevance, code refactoring) Test results are made visible to the team Follow the \u201cgreen tests run\u201d policy (i.e. all tests must pass before new functionality is submitted)","title":"Ways of Working"},{"location":"quality-assurance/test-automation-strategy/#how-we-measure-our-progress","text":"We will maintain metrics to determine our current state of automation at the UKHO. The metrics will be produced by comparing the state of test automation in a product against the exemplar test pyramid.","title":"How we measure our progress"},{"location":"quality-assurance/test-automation-strategy/#the-future","text":"The UKHO Test Community will review and evolve this strategy over time to ensure our approach and ways or working continue to support our development and release processes.","title":"The Future"},{"location":"quality-assurance/test-code-standards/","text":"Test Automation Standards C# and Java Test Automation code should adhere to the same standard as production code Formatting standards should reflect standard in use by development teams (e.g. Google Code Standard, Microsoft) Standard coding principles apply (e.g. SOLID, DRY) Unit Testing Aim for naming consistency. Common standard is to use a When-Then name, for example, WhenTwoItemsExistsThenBothItemsAreReturned Follow best practice: Tests for results not functionality One assertion per test Tests should be isolated, i.e. have no dependencies on other tests nor on order of execution API Testing Perform full happy/unhappy path tests at this level Interactions with APIs should be abstracted into a separate service/facade, not alongside the test code UI Testing Only use for e2e tests or explicit UI features at this level Interactions with UIs should be abstracted into a separate service/facade, not alongside the test code (e.g., Page Object Model) SpecFlow and Cucumber Consider whether using these are required - will it add value, will a stakeholder be reading the tests, or can the extra technical layer be avoided? If using, publish the tests to a website for easy access using Pickles (see our Pickles Example Project ) If considered necessary then: The feature name should reflect the area being tested The scenario name should reflect the purpose of the test, e.g. \u201cEnsure two numbers are added correctly\u201d rather than \u201cadd two numbers\u201d or \u201cadd\u201d Similar scenarios should be in one feature file \u2013 a feature file should only contain similar scenarios Ensure only one result is tested per scenario, try to avoid having too many assertions, better to split into different scenarios Move repeated steps into a Background Perform technical setup and teardown in the Steps classes, not in the Gherkin. Test and Defect Management For C# projects, unit and SpecFlow tests should exist in separate projects Open defects should be managed; a regular team/project review session is recommended","title":"Test Automation Standards"},{"location":"quality-assurance/test-code-standards/#test-automation-standards","text":"","title":"Test Automation Standards"},{"location":"quality-assurance/test-code-standards/#c-and-java","text":"Test Automation code should adhere to the same standard as production code Formatting standards should reflect standard in use by development teams (e.g. Google Code Standard, Microsoft) Standard coding principles apply (e.g. SOLID, DRY)","title":"C# and Java"},{"location":"quality-assurance/test-code-standards/#unit-testing","text":"Aim for naming consistency. Common standard is to use a When-Then name, for example, WhenTwoItemsExistsThenBothItemsAreReturned Follow best practice: Tests for results not functionality One assertion per test Tests should be isolated, i.e. have no dependencies on other tests nor on order of execution","title":"Unit Testing"},{"location":"quality-assurance/test-code-standards/#api-testing","text":"Perform full happy/unhappy path tests at this level Interactions with APIs should be abstracted into a separate service/facade, not alongside the test code","title":"API Testing"},{"location":"quality-assurance/test-code-standards/#ui-testing","text":"Only use for e2e tests or explicit UI features at this level Interactions with UIs should be abstracted into a separate service/facade, not alongside the test code (e.g., Page Object Model)","title":"UI Testing"},{"location":"quality-assurance/test-code-standards/#specflow-and-cucumber","text":"Consider whether using these are required - will it add value, will a stakeholder be reading the tests, or can the extra technical layer be avoided? If using, publish the tests to a website for easy access using Pickles (see our Pickles Example Project ) If considered necessary then: The feature name should reflect the area being tested The scenario name should reflect the purpose of the test, e.g. \u201cEnsure two numbers are added correctly\u201d rather than \u201cadd two numbers\u201d or \u201cadd\u201d Similar scenarios should be in one feature file \u2013 a feature file should only contain similar scenarios Ensure only one result is tested per scenario, try to avoid having too many assertions, better to split into different scenarios Move repeated steps into a Background Perform technical setup and teardown in the Steps classes, not in the Gherkin.","title":"SpecFlow and Cucumber"},{"location":"quality-assurance/test-code-standards/#test-and-defect-management","text":"For C# projects, unit and SpecFlow tests should exist in separate projects Open defects should be managed; a regular team/project review session is recommended","title":"Test and Defect Management"},{"location":"quality-assurance/test-policy/","text":"Test Policy The purpose of this document is to communicate the policy for UKHO for testing of new software, updates, hardware and other related changes. Why we Test To build confidence in our systems Detect defects Generate information Manage quality risks To deliver value to our customers How we measure the effectiveness of Testing Delivery to customers of software and hardware that provides business value. UKHO long-term Testing goals To move to a DevOps Model Test Automation provides the bulk of testing functionality High Value manual testing is used Testing across UKHO is done within an Agile framework Who Tests Test Engineering line manages a group of test engineers, ranging from junior to lead people; they provide testing capability across most of UKHO where testing is carried out within Scrum teams. Outside of the Scrum teams other people do test, for instance within Operations testing of hardware is carried out by the relevant SME, like network engineers carry out network testing. In some non-Agile teams, Business Analysts also carry out testing. Who manages Testing The Head of Test line manages all test engineers, but test engineers are task-managed by the overall technology program in conjunction with the Head of Test. Other areas of the business carry out various testing activities, but these people will not necessarily be professional software testers, they are line managed by their relevant program. Roles and responsibilities of Test Engineering This will only deal with the roles within Test Engineering. In scope All software applications Any changes to database structures Third-party software Cloud-based applications The Testing Life-Cycle UKHO follows the Disciplined Agile Delivery (DAD) and testing forms part of that lifecycle process which is collectively referred to as the Agile Delivery Governance Framework (ADGF). Testing will be carried out at all stages of development of software and products. There are sub-policies that cover the Agile and Non-Agile methods as well as security, penetration, load and performance testing. The test guidance within the ADGF provides guidance/support for all teams that will carry out testing across UKHO. International standards Our baseline for standards is ISO/IEC 29119 . Testing process followed UKHO follows the fundamental test process as defined by ISTQB.","title":"Test Policy"},{"location":"quality-assurance/test-policy/#test-policy","text":"The purpose of this document is to communicate the policy for UKHO for testing of new software, updates, hardware and other related changes.","title":"Test Policy"},{"location":"quality-assurance/test-policy/#why-we-test","text":"To build confidence in our systems Detect defects Generate information Manage quality risks To deliver value to our customers","title":"Why we Test"},{"location":"quality-assurance/test-policy/#how-we-measure-the-effectiveness-of-testing","text":"Delivery to customers of software and hardware that provides business value.","title":"How we measure the effectiveness of Testing"},{"location":"quality-assurance/test-policy/#ukho-long-term-testing-goals","text":"To move to a DevOps Model Test Automation provides the bulk of testing functionality High Value manual testing is used Testing across UKHO is done within an Agile framework","title":"UKHO long-term Testing goals"},{"location":"quality-assurance/test-policy/#who-tests","text":"Test Engineering line manages a group of test engineers, ranging from junior to lead people; they provide testing capability across most of UKHO where testing is carried out within Scrum teams. Outside of the Scrum teams other people do test, for instance within Operations testing of hardware is carried out by the relevant SME, like network engineers carry out network testing. In some non-Agile teams, Business Analysts also carry out testing.","title":"Who Tests"},{"location":"quality-assurance/test-policy/#who-manages-testing","text":"The Head of Test line manages all test engineers, but test engineers are task-managed by the overall technology program in conjunction with the Head of Test. Other areas of the business carry out various testing activities, but these people will not necessarily be professional software testers, they are line managed by their relevant program.","title":"Who manages Testing"},{"location":"quality-assurance/test-policy/#roles-and-responsibilities-of-test-engineering","text":"This will only deal with the roles within Test Engineering.","title":"Roles and responsibilities of Test Engineering"},{"location":"quality-assurance/test-policy/#in-scope","text":"All software applications Any changes to database structures Third-party software Cloud-based applications","title":"In scope"},{"location":"quality-assurance/test-policy/#the-testing-life-cycle","text":"UKHO follows the Disciplined Agile Delivery (DAD) and testing forms part of that lifecycle process which is collectively referred to as the Agile Delivery Governance Framework (ADGF). Testing will be carried out at all stages of development of software and products. There are sub-policies that cover the Agile and Non-Agile methods as well as security, penetration, load and performance testing. The test guidance within the ADGF provides guidance/support for all teams that will carry out testing across UKHO.","title":"The Testing Life-Cycle"},{"location":"quality-assurance/test-policy/#international-standards","text":"Our baseline for standards is ISO/IEC 29119 .","title":"International standards"},{"location":"quality-assurance/test-policy/#testing-process-followed","text":"UKHO follows the fundamental test process as defined by ISTQB.","title":"Testing process followed"},{"location":"quality-assurance/test-profiles/","text":"Test Engineer Profiles DDAT Job Roles Our job roles adhere to the DDAT Test Engineer roles. The different levels of Test Engineer are: Test Engineer Senior Test Engineer Lead Test Engineer Also the Head of Test role: Head of Test Skill Levels Essential Skills Test Engineer Senior Test Engineer Lead Test Engineer Functional Testing Working Practitioner Expert Non-Functional Testing Working Practitioner Expert Technical Breadth Working Practitioner Expert Test Analysis Working Practitioner Expert Responsibilities The UKHO-specific responsibilities for each role have been outlined here: Test Engineer Senior Test Engineer Lead Test Engineer (Team) Lead Test Engineer (Program) Head of Test","title":"Test Engineer Profiles"},{"location":"quality-assurance/test-profiles/#test-engineer-profiles","text":"","title":"Test Engineer Profiles"},{"location":"quality-assurance/test-profiles/#ddat-job-roles","text":"Our job roles adhere to the DDAT Test Engineer roles. The different levels of Test Engineer are: Test Engineer Senior Test Engineer Lead Test Engineer Also the Head of Test role: Head of Test","title":"DDAT Job Roles"},{"location":"quality-assurance/test-profiles/#skill-levels","text":"Essential Skills Test Engineer Senior Test Engineer Lead Test Engineer Functional Testing Working Practitioner Expert Non-Functional Testing Working Practitioner Expert Technical Breadth Working Practitioner Expert Test Analysis Working Practitioner Expert","title":"Skill Levels"},{"location":"quality-assurance/test-profiles/#responsibilities","text":"The UKHO-specific responsibilities for each role have been outlined here: Test Engineer Senior Test Engineer Lead Test Engineer (Team) Lead Test Engineer (Program) Head of Test","title":"Responsibilities"},{"location":"quality-assurance/test-repositories/","text":"GitHub Repositories This page lists the UKHO test-related repositories on GitHub. Demo API Test Framework Example Java project for API testing, using REST-assured and obtaining secrets from an Azure Key Vault. https://github.com/UKHO/demo-api-test-framework OWASP ZAP Scan Provides the ability to execute a Full Scan against a web application using the OWASP ZAP Docker image within an Azure DevOps pipeline. https://github.com/UKHO/owasp-zap-scan Pickles Example project to demonstrate production of HTML-based Gherkin using Pickles tool with an Azure DevOps pipeline. https://github.com/UKHO/pickles-demo-project WinAppDriver Example C# project to demonstrate how to use WinAppDriver to drive a WPF application and run UI tests in a Azure Devops pipeline. https://github.com/UKHO/winappdriver-demo","title":"GitHub Repositories"},{"location":"quality-assurance/test-repositories/#github-repositories","text":"This page lists the UKHO test-related repositories on GitHub.","title":"GitHub Repositories"},{"location":"quality-assurance/test-repositories/#demo-api-test-framework","text":"Example Java project for API testing, using REST-assured and obtaining secrets from an Azure Key Vault. https://github.com/UKHO/demo-api-test-framework","title":"Demo API Test Framework"},{"location":"quality-assurance/test-repositories/#owasp-zap-scan","text":"Provides the ability to execute a Full Scan against a web application using the OWASP ZAP Docker image within an Azure DevOps pipeline. https://github.com/UKHO/owasp-zap-scan","title":"OWASP ZAP Scan"},{"location":"quality-assurance/test-repositories/#pickles","text":"Example project to demonstrate production of HTML-based Gherkin using Pickles tool with an Azure DevOps pipeline. https://github.com/UKHO/pickles-demo-project","title":"Pickles"},{"location":"quality-assurance/test-repositories/#winappdriver","text":"Example C# project to demonstrate how to use WinAppDriver to drive a WPF application and run UI tests in a Azure Devops pipeline. https://github.com/UKHO/winappdriver-demo","title":"WinAppDriver"},{"location":"quality-assurance/test-strategy/","text":"Test Strategy Overview This strategy details how we add value through testing at the UKHO. The strategy is lightweight and provides a basis for all delivery teams. How this document should be used Teams should adhere to this strategy when determining their team approach to testing, creating a Test Approach document for the current work-stream that adds detail to this strategy. Roles and Responsibilities Role Responsibility Testers Champion quality within the team, ensuring quality is present during all stages of software development and inclusive of all team members and users. Developers Integrate quality into all stages of development, treating testing as an equal to development Delivery Managers Create an environment that fosters quality and integration of all members of a delivery team Approach to Testing Automation Automation should be used where possible. See the UKHO Test Automation Strategy for more information. Manual Manual testing should be used when automation is not deemed the best approach (e.g. too costly, not feasible, not applicable) Exploratory Exploratory testing should be used to verify quality in addition to regular manual and automated testing Sessions should be planned with a charter (including time-box, area to review, personas) Non-Functional Non-functional requirements and testing should be considered alongside other forms of testing Determining requirements and expected results will involve the architecture and product manager communities Safety Safety assurance is part of our core software engineering processes (ensuring our products are safe for the end user) We have adopted BS EN 61508-3:2010 as our safety standard Safety is the responsibility of the whole team and is championed by the Test Engineer Test Generation Test scenarios should be generated from a BDD approach A risk-based approach should be used to determine the priority of test cases Security Testing to ensure security should take place throughout development The OWASP ZAP scanner should be used for development of APIs and UIs - see UKHO OWASP Zap Scanner project for more information. Cross Browser Testing The team should define the browser (and device if mobile testing is required) requirements. These should be documented in the Test Approach for that item of work. This requirement should be considered as early as possible by the team. Browser testing should be carried out on the latest version of Chrome as a minimum. If multiple browsers need to be tested then work closely with the Test Leads and Product Owner to ensure the correct approach is taken, e.g. which tests to run across browsers and the test framework to use. User Testing Testing must recognise the importance of ensuring we are delivering value to users The team should involve users during the development process Contract Testing for internal APIs Contract testing must be used when developing an API that will communicate with another UKHO API (e.g. when interacting with the Data Platform) PACT is the technology to use Use the UKHO PACT documentation to learn how to do this Test Standards See the UKHO Test Standards for information on the standards that should be adhered to. Test Management Teams need to ensure their tests are managed over time in order to maintain their value, considering: Run time Test coverage Test code quality Test Reporting The results of testing must be visible to a team delivering confidence when developing. Tests written using Gherkin (i.e. business readable) should be easily available to members outside the development team.","title":"Test Strategy"},{"location":"quality-assurance/test-strategy/#test-strategy","text":"","title":"Test Strategy"},{"location":"quality-assurance/test-strategy/#overview","text":"This strategy details how we add value through testing at the UKHO. The strategy is lightweight and provides a basis for all delivery teams.","title":"Overview"},{"location":"quality-assurance/test-strategy/#how-this-document-should-be-used","text":"Teams should adhere to this strategy when determining their team approach to testing, creating a Test Approach document for the current work-stream that adds detail to this strategy.","title":"How this document should be used"},{"location":"quality-assurance/test-strategy/#roles-and-responsibilities","text":"Role Responsibility Testers Champion quality within the team, ensuring quality is present during all stages of software development and inclusive of all team members and users. Developers Integrate quality into all stages of development, treating testing as an equal to development Delivery Managers Create an environment that fosters quality and integration of all members of a delivery team","title":"Roles and Responsibilities"},{"location":"quality-assurance/test-strategy/#approach-to-testing","text":"","title":"Approach to Testing"},{"location":"quality-assurance/test-strategy/#automation","text":"Automation should be used where possible. See the UKHO Test Automation Strategy for more information.","title":"Automation"},{"location":"quality-assurance/test-strategy/#manual","text":"Manual testing should be used when automation is not deemed the best approach (e.g. too costly, not feasible, not applicable)","title":"Manual"},{"location":"quality-assurance/test-strategy/#exploratory","text":"Exploratory testing should be used to verify quality in addition to regular manual and automated testing Sessions should be planned with a charter (including time-box, area to review, personas)","title":"Exploratory"},{"location":"quality-assurance/test-strategy/#non-functional","text":"Non-functional requirements and testing should be considered alongside other forms of testing Determining requirements and expected results will involve the architecture and product manager communities","title":"Non-Functional"},{"location":"quality-assurance/test-strategy/#safety","text":"Safety assurance is part of our core software engineering processes (ensuring our products are safe for the end user) We have adopted BS EN 61508-3:2010 as our safety standard Safety is the responsibility of the whole team and is championed by the Test Engineer","title":"Safety"},{"location":"quality-assurance/test-strategy/#test-generation","text":"Test scenarios should be generated from a BDD approach A risk-based approach should be used to determine the priority of test cases","title":"Test Generation"},{"location":"quality-assurance/test-strategy/#security","text":"Testing to ensure security should take place throughout development The OWASP ZAP scanner should be used for development of APIs and UIs - see UKHO OWASP Zap Scanner project for more information.","title":"Security"},{"location":"quality-assurance/test-strategy/#cross-browser-testing","text":"The team should define the browser (and device if mobile testing is required) requirements. These should be documented in the Test Approach for that item of work. This requirement should be considered as early as possible by the team. Browser testing should be carried out on the latest version of Chrome as a minimum. If multiple browsers need to be tested then work closely with the Test Leads and Product Owner to ensure the correct approach is taken, e.g. which tests to run across browsers and the test framework to use.","title":"Cross Browser Testing"},{"location":"quality-assurance/test-strategy/#user-testing","text":"Testing must recognise the importance of ensuring we are delivering value to users The team should involve users during the development process","title":"User Testing"},{"location":"quality-assurance/test-strategy/#contract-testing-for-internal-apis","text":"Contract testing must be used when developing an API that will communicate with another UKHO API (e.g. when interacting with the Data Platform) PACT is the technology to use Use the UKHO PACT documentation to learn how to do this","title":"Contract Testing for internal APIs"},{"location":"quality-assurance/test-strategy/#test-standards","text":"See the UKHO Test Standards for information on the standards that should be adhered to.","title":"Test Standards"},{"location":"quality-assurance/test-strategy/#test-management","text":"Teams need to ensure their tests are managed over time in order to maintain their value, considering: Run time Test coverage Test code quality","title":"Test Management"},{"location":"quality-assurance/test-strategy/#test-reporting","text":"The results of testing must be visible to a team delivering confidence when developing. Tests written using Gherkin (i.e. business readable) should be easily available to members outside the development team.","title":"Test Reporting"},{"location":"quality-assurance/test-vision/","text":"Test Vision To continually improve our testing approach To ensure we use the best testing techniques to deliver Quality Improvement to the One Programme To continually review our approach so we are using the latest technology and techniques To automate 100% of what is automatable Add automation wherever it is possible and applicable, and do so in a consistent manner Ensure we have commonality in technology and practises across the organisation To have security testing as an integral part of our approach Ensure we have the skills and tools to deliver Quality Improvement in security To have security testing part as part of our standard test approach To have a thriving Test Community Have a community that offers support to each other in our roles championing quality across the organisation Ensure testers have the skills and support to deliver to the UKHO One Programme Promote the value of software testing across the UKHO (including to Development and Citizen Tester communities) Ensure we share knowledge in what we do both internally and externally and strive to become a leader in testing in government","title":"Test Vision"},{"location":"quality-assurance/test-vision/#test-vision","text":"","title":"Test Vision"},{"location":"quality-assurance/test-vision/#to-continually-improve-our-testing-approach","text":"To ensure we use the best testing techniques to deliver Quality Improvement to the One Programme To continually review our approach so we are using the latest technology and techniques","title":"To continually improve our testing approach"},{"location":"quality-assurance/test-vision/#to-automate-100-of-what-is-automatable","text":"Add automation wherever it is possible and applicable, and do so in a consistent manner Ensure we have commonality in technology and practises across the organisation","title":"To automate 100% of what is automatable"},{"location":"quality-assurance/test-vision/#to-have-security-testing-as-an-integral-part-of-our-approach","text":"Ensure we have the skills and tools to deliver Quality Improvement in security To have security testing part as part of our standard test approach","title":"To have security testing as an integral part of our approach"},{"location":"quality-assurance/test-vision/#to-have-a-thriving-test-community","text":"Have a community that offers support to each other in our roles championing quality across the organisation Ensure testers have the skills and support to deliver to the UKHO One Programme Promote the value of software testing across the UKHO (including to Development and Citizen Tester communities) Ensure we share knowledge in what we do both internally and externally and strive to become a leader in testing in government","title":"To have a thriving Test Community"},{"location":"quality-assurance/testing-principles/","text":"Testing principles 1. We utilise a shift left mindset (quality is baked in) Quality starts at the very beginning of a project, it is not just something related to testing, we champion product quality from the very beginning. 2. We test at every stage of the product lifecycle (continuously testing) Testing begins before any code is written and continues through every stage, ensuring that the product is tested the right way at the right time. 3. We automate 100% of what is automatable Automation is key to delivering in a DevOps world, we seek to automate everything that can be, allowing us to move faster and with greater certainty. 4. We use Agile principles at every stage of our work We must be flexible and adaptable, delivering value quickly to our customers, using Agile principles to help us do that. 5. We use Behaviour Driven Development (BDD) to help us deliver value to our customers BDD helps teams focus on the most valuable work to deliver, it helps clarify and ensure misunderstanding is reduced so that the right product is built. 6. We take a holistic view of a product when testing We look to view the product as a whole, ensuring that testing encompasses non-functional as well as the functional areas of that product. 7. We adopt a continuous improvement mentality to our skills We are always learning, our people are key to our delivery and by always seeking to learn we allow ourselves to introduce new ideas, ways of working, to try new things. 8. We collaborate across Government to learn and to teach We are reaching out across wider government to learn from other organisations and to pass on our knowledge that could help other organisations. 9. We look to our partners to work to the same principles With our teams working to the principles, working with partners who work to similar ones can make the working relationships between us and the partner more productive.","title":"Testing principles"},{"location":"quality-assurance/testing-principles/#testing-principles","text":"","title":"Testing principles"},{"location":"quality-assurance/testing-principles/#1-we-utilise-a-shift-left-mindset-quality-is-baked-in","text":"Quality starts at the very beginning of a project, it is not just something related to testing, we champion product quality from the very beginning.","title":"1. We utilise a shift left mindset (quality is baked in)"},{"location":"quality-assurance/testing-principles/#2-we-test-at-every-stage-of-the-product-lifecycle-continuously-testing","text":"Testing begins before any code is written and continues through every stage, ensuring that the product is tested the right way at the right time.","title":"2. We test at every stage of the product lifecycle (continuously testing)"},{"location":"quality-assurance/testing-principles/#3-we-automate-100-of-what-is-automatable","text":"Automation is key to delivering in a DevOps world, we seek to automate everything that can be, allowing us to move faster and with greater certainty.","title":"3. We automate 100% of what is automatable"},{"location":"quality-assurance/testing-principles/#4-we-use-agile-principles-at-every-stage-of-our-work","text":"We must be flexible and adaptable, delivering value quickly to our customers, using Agile principles to help us do that.","title":"4. We use Agile principles at every stage of our work"},{"location":"quality-assurance/testing-principles/#5-we-use-behaviour-driven-development-bdd-to-help-us-deliver-value-to-our-customers","text":"BDD helps teams focus on the most valuable work to deliver, it helps clarify and ensure misunderstanding is reduced so that the right product is built.","title":"5. We use Behaviour Driven Development (BDD) to help us deliver value to our customers"},{"location":"quality-assurance/testing-principles/#6-we-take-a-holistic-view-of-a-product-when-testing","text":"We look to view the product as a whole, ensuring that testing encompasses non-functional as well as the functional areas of that product.","title":"6. We take a holistic view of a product when testing"},{"location":"quality-assurance/testing-principles/#7-we-adopt-a-continuous-improvement-mentality-to-our-skills","text":"We are always learning, our people are key to our delivery and by always seeking to learn we allow ourselves to introduce new ideas, ways of working, to try new things.","title":"7. We adopt a continuous improvement mentality to our skills"},{"location":"quality-assurance/testing-principles/#8-we-collaborate-across-government-to-learn-and-to-teach","text":"We are reaching out across wider government to learn from other organisations and to pass on our knowledge that could help other organisations.","title":"8. We collaborate across Government to learn and to teach"},{"location":"quality-assurance/testing-principles/#9-we-look-to-our-partners-to-work-to-the-same-principles","text":"With our teams working to the principles, working with partners who work to similar ones can make the working relationships between us and the partner more productive.","title":"9. We look to our partners to work to the same principles"},{"location":"quality-assurance/ukho-quality-charter/","text":"UKHO Delivery Quality Charter This is the UKHO Delivery Quality Charter - a set of objectives that will improve how teams can quality assure their software. The Team All members of the team are equal \u2013 there should be no differences between developers and testers in: Permissions they have been assigned (e.g. permissions to access environments) Access to hardware or software Weight of opinion Teams that are multi-disciplinary, cross-functional and equal achieve better results Ways of Working Planning, creating and executing tests (including manual testing) is the responsibility of everyone in the team The role of the tester in the team is to champion quality assurance and testing at all stages of the development process The team will use BDD for user-focused stories in the story refinement process (for more details see our ' BDD ' page) To ensure the team is aware of the Test Approach and their role in delivering this, the quality champion will present the approach to the team early in a project Acceptance Criteria Every story will have acceptance criteria added before being worked on Acceptance criteria will not be changed without cross-team awareness Acceptance criteria will be testable, i.e. capable of being proven true or false For more details see our ' Acceptance Criteria ' page. Test Automation Write tests at the correct level of the test pyramid \u2013 lower is better All functional code must have accompanying unit or component tests All API development must have accompanying API tests Testing at the UI level is limited to a small number of happy-path tests There must be a compelling reason to use SpecFlow (its use must not be a default position) Test code must be treated with the same care and attention as production code (including pairing on writing) The team will maintain their automated test suite (test content, relevance and code quality) to ensure it adds maximum value For more details see our ' Test Automation Strategy ' page. Manual Testing Manual testing should never be a team's default test method and should only be used when the team agrees that full automation of a test is not feasible (e.g. the technical complexity is too high or the time taken to fully automate a test far outweighs the benefit of having that test automated) When used, evidence of manual testing (e.g. screenshots) is not required Exploratory testing is a valid form of manual testing and should be part of the test approach","title":"UKHO Delivery Quality Charter"},{"location":"quality-assurance/ukho-quality-charter/#ukho-delivery-quality-charter","text":"This is the UKHO Delivery Quality Charter - a set of objectives that will improve how teams can quality assure their software.","title":"UKHO Delivery Quality Charter"},{"location":"quality-assurance/ukho-quality-charter/#the-team","text":"All members of the team are equal \u2013 there should be no differences between developers and testers in: Permissions they have been assigned (e.g. permissions to access environments) Access to hardware or software Weight of opinion Teams that are multi-disciplinary, cross-functional and equal achieve better results","title":"The Team"},{"location":"quality-assurance/ukho-quality-charter/#ways-of-working","text":"Planning, creating and executing tests (including manual testing) is the responsibility of everyone in the team The role of the tester in the team is to champion quality assurance and testing at all stages of the development process The team will use BDD for user-focused stories in the story refinement process (for more details see our ' BDD ' page) To ensure the team is aware of the Test Approach and their role in delivering this, the quality champion will present the approach to the team early in a project","title":"Ways of Working"},{"location":"quality-assurance/ukho-quality-charter/#acceptance-criteria","text":"Every story will have acceptance criteria added before being worked on Acceptance criteria will not be changed without cross-team awareness Acceptance criteria will be testable, i.e. capable of being proven true or false For more details see our ' Acceptance Criteria ' page.","title":"Acceptance Criteria"},{"location":"quality-assurance/ukho-quality-charter/#test-automation","text":"Write tests at the correct level of the test pyramid \u2013 lower is better All functional code must have accompanying unit or component tests All API development must have accompanying API tests Testing at the UI level is limited to a small number of happy-path tests There must be a compelling reason to use SpecFlow (its use must not be a default position) Test code must be treated with the same care and attention as production code (including pairing on writing) The team will maintain their automated test suite (test content, relevance and code quality) to ensure it adds maximum value For more details see our ' Test Automation Strategy ' page.","title":"Test Automation"},{"location":"quality-assurance/ukho-quality-charter/#manual-testing","text":"Manual testing should never be a team's default test method and should only be used when the team agrees that full automation of a test is not feasible (e.g. the technical complexity is too high or the time taken to fully automate a test far outweighs the benefit of having that test automated) When used, evidence of manual testing (e.g. screenshots) is not required Exploratory testing is a valid form of manual testing and should be part of the test approach","title":"Manual Testing"},{"location":"quality-assurance/roles/head-of-test/","text":"Head of Test The Head of Test takes ownership for establishing policy and strategy for Test Engineering: Owns continuous improvement Researches new technology and new techniques to implement change Builds the test community Provides organisational leadership Advocates test capabilities both internally and outside of government Ensures teams have the right test capabilities Areas Tasks Stories Testing policy, strategy and standards Responsible for ensuring that the relevant policy, strategy and standards comply with relevant government regulations; that the relevant policies are applied correctly across all teams and are updated when needed. Creation of policy, strategy and standards , working with other engineers to ensure they remain relevant and updated. The accountable officer in legal terms for ensuring these documents exist, are updated and are known to engineers Recruitment of test engineers Planning when new engineers are needed and recruiting people with relevant skills. Working with the One Program and delivery teams to determine the skills required. Creating relevant job descriptions and interview packs. Running the recruitment campaign with HR (from CV sift, interview and offer,and agreeing renumeration). Skills planning Ensuring that engineers have the skills that they need now and in the future. Maintaining a high level view of all engineers and key skills. Ensuring that the relevant training is covered by personal development plans and that engineers are supported in their ongoing development Line Management Line managing test engineers, defining objectives and performance measurements for engineers. Helping them build relevant development plans and managing performance issues. This also includes working with relevant teams to understand their requirements, rotation of test engineers around teams. Making sure that the engineers who report to the Head of Test follow the relevant HR policies as well as working to the relevant technology standards and best practices. Long term strategic planning Responsible for ensuring that the UKHO has an up-to-date long term testing vision, covering people and technology. This falls into three elements, a) What we need now, b) what we will need in a years time and c) up to 5 years time. Ensuring that as business and technology changes, the testing capability continues to meet the needs of the whole organisation. Part of senior technology management team Working with other senior technology managers on a range of tactical/strategic issues affecting UKHO. This covers a wide range of topics, including input into the overall technology roadmap, management of technology driven work that sits outside of delivery teams, providing support to other technology managers, oversight of design changes to systems. One of the approvers on the change approval board. Product Owner Acts as Product Owner for the Test Leads, covering requirements through to sign-off. Adds work to the lead engineers backlog, sign off of backlog items, consultation with leads on requirements gathering, refinement. Ensuring that the sum total of work that the lead engineers are working on supports the testing strategy for the organisation.","title":"Head of Test"},{"location":"quality-assurance/roles/head-of-test/#head-of-test","text":"The Head of Test takes ownership for establishing policy and strategy for Test Engineering: Owns continuous improvement Researches new technology and new techniques to implement change Builds the test community Provides organisational leadership Advocates test capabilities both internally and outside of government Ensures teams have the right test capabilities Areas Tasks Stories Testing policy, strategy and standards Responsible for ensuring that the relevant policy, strategy and standards comply with relevant government regulations; that the relevant policies are applied correctly across all teams and are updated when needed. Creation of policy, strategy and standards , working with other engineers to ensure they remain relevant and updated. The accountable officer in legal terms for ensuring these documents exist, are updated and are known to engineers Recruitment of test engineers Planning when new engineers are needed and recruiting people with relevant skills. Working with the One Program and delivery teams to determine the skills required. Creating relevant job descriptions and interview packs. Running the recruitment campaign with HR (from CV sift, interview and offer,and agreeing renumeration). Skills planning Ensuring that engineers have the skills that they need now and in the future. Maintaining a high level view of all engineers and key skills. Ensuring that the relevant training is covered by personal development plans and that engineers are supported in their ongoing development Line Management Line managing test engineers, defining objectives and performance measurements for engineers. Helping them build relevant development plans and managing performance issues. This also includes working with relevant teams to understand their requirements, rotation of test engineers around teams. Making sure that the engineers who report to the Head of Test follow the relevant HR policies as well as working to the relevant technology standards and best practices. Long term strategic planning Responsible for ensuring that the UKHO has an up-to-date long term testing vision, covering people and technology. This falls into three elements, a) What we need now, b) what we will need in a years time and c) up to 5 years time. Ensuring that as business and technology changes, the testing capability continues to meet the needs of the whole organisation. Part of senior technology management team Working with other senior technology managers on a range of tactical/strategic issues affecting UKHO. This covers a wide range of topics, including input into the overall technology roadmap, management of technology driven work that sits outside of delivery teams, providing support to other technology managers, oversight of design changes to systems. One of the approvers on the change approval board. Product Owner Acts as Product Owner for the Test Leads, covering requirements through to sign-off. Adds work to the lead engineers backlog, sign off of backlog items, consultation with leads on requirements gathering, refinement. Ensuring that the sum total of work that the lead engineers are working on supports the testing strategy for the organisation.","title":"Head of Test"},{"location":"quality-assurance/roles/lead-program-test-engineer/","text":"Lead Test Engineer (Program) Areas Tasks Stories To Continually Improve our Testing Approach (30%) Provide support, consultancy and guidance in testing matters to UKHO development teams. A team is trying out a new test technology. The lead will assist the team in implementing it. They will ensure that automated tests are following best practice guidelines. A team is automating BDD tests. The lead will work with the team to ensure Gherkin written follows the UKHO standards. They will work with the DDC team helping to build and support delivery pipelines. A team is starting to use a new build pipeline. The lead will assist in adding automated tests to the pipeline. They will work with teams helping to resolve issues with automated tests and looking for solutions to automation issues. A team has a failing test that they are unable to resolve. The lead will aid in fixing. They have responsibility for the upgrade path for relevant testing tools, advising teams on when and how to upgrade, plus any related issues they should be aware of. A team discovers they are using an old version of a BDD test tool. The lead will aid in upgrading this, in line with the wider organisation. To Automate 100% of what is Automatable (30%) They will implement new automation frameworks and work with teams on new processes and tools to help improve the return from test automation (and improve delivery to the customer). The organisation is using different techniques for API testing. The lead will review available option, suggest a preferred approach and create a framework to deliver this. Working with teams ensuring that relevant automation metrics provide feedback to teams and wider stakeholders. A stakeholder wants to understand how much automation is used on a project. The lead will prepare and deliver this information. Provide guidance and mentoring in test automation to teams. A new project is starting. The lead will suggest how test automation can be used to improve quality. To have Security Testing as an Integral part of our approach (25%) Assist teams with improving security testing. A team would like to automate the results of threat modelling. The lead assists in implementing these as part of the test approach. Investigate tools, frameworks or approaches that would be beneficial to the UKHO. OWASP develop a new tool to discover potential security flaws. The lead will investigate this and determine whether and how it could be used to improve security testing. To have a Thriving Test Community (10%) Mentoring. Some testers are learning a new programming language. The lead will provide support to help them in their journey. Take part in wider government discussions around test automation, both to influence and learn from. The lead recognises that a team may not be using a tool correctly. They seek guidance from another government organisation on how they use the tool. Facilitate the promotion of testing at UKHO. A tester has come up with a new way of testing a product. The lead suggests that the tester do a short presentation to the community on this. \u200bContinually develop own skills as part of a program of professional development (5%) \u200bCreates and takes pro-active ownership of a continuous learning cycle for themselves. \u200bReviewing their current skill level, they identify that they have a knowledge gap on how DevOps works. They put together a plan that utilises books, and online materials to gain a better understanding.","title":"Lead Test Engineer (Program)"},{"location":"quality-assurance/roles/lead-program-test-engineer/#lead-test-engineer-program","text":"Areas Tasks Stories To Continually Improve our Testing Approach (30%) Provide support, consultancy and guidance in testing matters to UKHO development teams. A team is trying out a new test technology. The lead will assist the team in implementing it. They will ensure that automated tests are following best practice guidelines. A team is automating BDD tests. The lead will work with the team to ensure Gherkin written follows the UKHO standards. They will work with the DDC team helping to build and support delivery pipelines. A team is starting to use a new build pipeline. The lead will assist in adding automated tests to the pipeline. They will work with teams helping to resolve issues with automated tests and looking for solutions to automation issues. A team has a failing test that they are unable to resolve. The lead will aid in fixing. They have responsibility for the upgrade path for relevant testing tools, advising teams on when and how to upgrade, plus any related issues they should be aware of. A team discovers they are using an old version of a BDD test tool. The lead will aid in upgrading this, in line with the wider organisation. To Automate 100% of what is Automatable (30%) They will implement new automation frameworks and work with teams on new processes and tools to help improve the return from test automation (and improve delivery to the customer). The organisation is using different techniques for API testing. The lead will review available option, suggest a preferred approach and create a framework to deliver this. Working with teams ensuring that relevant automation metrics provide feedback to teams and wider stakeholders. A stakeholder wants to understand how much automation is used on a project. The lead will prepare and deliver this information. Provide guidance and mentoring in test automation to teams. A new project is starting. The lead will suggest how test automation can be used to improve quality. To have Security Testing as an Integral part of our approach (25%) Assist teams with improving security testing. A team would like to automate the results of threat modelling. The lead assists in implementing these as part of the test approach. Investigate tools, frameworks or approaches that would be beneficial to the UKHO. OWASP develop a new tool to discover potential security flaws. The lead will investigate this and determine whether and how it could be used to improve security testing. To have a Thriving Test Community (10%) Mentoring. Some testers are learning a new programming language. The lead will provide support to help them in their journey. Take part in wider government discussions around test automation, both to influence and learn from. The lead recognises that a team may not be using a tool correctly. They seek guidance from another government organisation on how they use the tool. Facilitate the promotion of testing at UKHO. A tester has come up with a new way of testing a product. The lead suggests that the tester do a short presentation to the community on this. \u200bContinually develop own skills as part of a program of professional development (5%) \u200bCreates and takes pro-active ownership of a continuous learning cycle for themselves. \u200bReviewing their current skill level, they identify that they have a knowledge gap on how DevOps works. They put together a plan that utilises books, and online materials to gain a better understanding.","title":"Lead Test Engineer (Program)"},{"location":"quality-assurance/roles/lead-team-test-engineer/","text":"Lead Test Engineer (Team) Area Tasks Example stories Creating test automation (25%) Responsible for writing automated tests in software development Working as part of a delivery team, writing new and refactoring existing automated tests. \u200b Accountable for ensuring that UKHO test automation code standards are maintained Both testers and developers can write automated tests; the lead test engineer notices a new approach used, they review this with the author to ensure standards are met or that the standards need updating. \u200b Responsible for pro-actively researching and recommending the use of technology A company bring out a new tool for managing test data. The lead test engineer sees that this resolves a common problem in several teams. They research it and finds it to be fit for purpose and so recommends to Test Engineering. \u200b Accountable for producing solutions that are supportable, including documentation, knowledge transfer and support documentation The lead test engineer's delivery team is creating a new piece of software. They check that the team's \"Definition of Done\" covers the required quality assurance. Create relevant test documents for project (e.g Test Approach, Test Summary Report) (5%)) Responsible for the creation of the Test Approach and Test Summary reports as required At the start of a project the test engineer takes ownership of producing the relevant document that provides details on how testing of the product will be undertaken. This will be produced in conjunction with and presented back to the rest of the team. If required, the test engineer will create a Test Summary Report that provides an overview of the testing completed. Analysing Requirements and designing manual or automated tests (20%) Review requirements to understand how they can be tested The role helps review requirements; the lead test engineer sees that altering the requirement slightly would help the testing of it so they that altering the requirement would help the testing, so they discuss this with the rest of the team.. \u200b \u200bDesign manual tests \u200bA feature needs to be manually tested so the lead test engineer uses test design techniques to create both happy and unhappy path test plans. \u200b \u200bDesign Automated tests \u200bA feature will need automated tests; the lead test engineer uses test design techniques to create the relevant automated tests. \u200bLeads Testing (20%) Leads the team in ensuring that the product is tested to a satisfactory level to give confidence that when released it will function as intended During a sprint, the lead test engineer notices that the developers do not have enough work to do. The lead test engineer discusses with the team and proposes that there are some test tasks that they could work on to keep the sprint on track. Leads the use of Behaviour Driven Development (BDD) within the delivery team The team is finding it challenging to add acceptance criteria to user stories. They work with the Delivery Manager and the team using BDD techniques to create acceptance criteria. \u200b Carries out exploratory testing A feature is under test; the lead test engineer feels that some exploratory testing will help look for defects. They use a test charter and test persona to carry out some exploratory testing. \u200b Responsible for coaching less experienced test automation engineers The lead test engineer coaches a junior tester in BDD, reviewing their work and providing feedback and advice. \u200b Responsible for ensuring that testing on a project adds up to a coherent whole A project uses several different testing techniques - automated, manual, non-functional. The lead test engineer sees that there is a lack of security testing, so they recommend to the Delivery Manager that several security testing stories are added to the backlog. \u200b Will be involved in hiring and other resourcing decisions (but is not responsible for recruitment) Having received appropriate training, the lead test engineer is a member of the board on an interview of a test automation engineer. They assist in creating the questions used. \u200bSoftware Testing Subject Matter Expert (10%) Advise the team on the best approach for automated tests \u200bThe team are building a new application; the lead test engineer reviews the user stories and advises on the best approach for automated testing. \u200b \u200bHelps the team on using best practice for writing Behaviour Driven Development testing \u200bThe lead test engineer sees that some of the team have less confidence than others in using BDD. They offer to provide some 1-2-1 coaching to improve the overall level of skill within the team. \u200b \u200b\u200bLooks at the testability of a product As part of backlog refinement they see that implementing stubs or mocks will allow the team to progress testing rather than having to wait for another PBI to be completed. Setup tasks for testing (5%) \u200bCreates test data for a sprint There is a requirement to test a complex change, the senior test engineer analyses which data will be needed for testing and arranges the relevant test data. \u200b \u200bAssists with preparing environments for testing \u200bPrior to a sprint starting the lead test engineer runs some confidence tests to ensure that the test environment is ready for testing. \u200bAct as Subject Matter Expert in a technology across UKHO (10%) \u200bLeads that technology, its adoption and best practices across UKHO \u200bThe lead test engineer would champion the technology across all teams, create best practices, provide mentoring to teams, lead events and engage with external organisations, adding to the body of knowledge regarding the technology. \u200bContinually develop own skills as part of a program of professional development (5%) \u200bCreates and takes pro-active ownership of a continuous learning cycle for themselves \u200bReviewing their current skill level, they identify that they have a knowledge gap on how DevOps works. They put together a plan that utilises books, and online materials to gain a better understanding.","title":"Lead Test Engineer (Team)"},{"location":"quality-assurance/roles/lead-team-test-engineer/#lead-test-engineer-team","text":"Area Tasks Example stories Creating test automation (25%) Responsible for writing automated tests in software development Working as part of a delivery team, writing new and refactoring existing automated tests. \u200b Accountable for ensuring that UKHO test automation code standards are maintained Both testers and developers can write automated tests; the lead test engineer notices a new approach used, they review this with the author to ensure standards are met or that the standards need updating. \u200b Responsible for pro-actively researching and recommending the use of technology A company bring out a new tool for managing test data. The lead test engineer sees that this resolves a common problem in several teams. They research it and finds it to be fit for purpose and so recommends to Test Engineering. \u200b Accountable for producing solutions that are supportable, including documentation, knowledge transfer and support documentation The lead test engineer's delivery team is creating a new piece of software. They check that the team's \"Definition of Done\" covers the required quality assurance. Create relevant test documents for project (e.g Test Approach, Test Summary Report) (5%)) Responsible for the creation of the Test Approach and Test Summary reports as required At the start of a project the test engineer takes ownership of producing the relevant document that provides details on how testing of the product will be undertaken. This will be produced in conjunction with and presented back to the rest of the team. If required, the test engineer will create a Test Summary Report that provides an overview of the testing completed. Analysing Requirements and designing manual or automated tests (20%) Review requirements to understand how they can be tested The role helps review requirements; the lead test engineer sees that altering the requirement slightly would help the testing of it so they that altering the requirement would help the testing, so they discuss this with the rest of the team.. \u200b \u200bDesign manual tests \u200bA feature needs to be manually tested so the lead test engineer uses test design techniques to create both happy and unhappy path test plans. \u200b \u200bDesign Automated tests \u200bA feature will need automated tests; the lead test engineer uses test design techniques to create the relevant automated tests. \u200bLeads Testing (20%) Leads the team in ensuring that the product is tested to a satisfactory level to give confidence that when released it will function as intended During a sprint, the lead test engineer notices that the developers do not have enough work to do. The lead test engineer discusses with the team and proposes that there are some test tasks that they could work on to keep the sprint on track. Leads the use of Behaviour Driven Development (BDD) within the delivery team The team is finding it challenging to add acceptance criteria to user stories. They work with the Delivery Manager and the team using BDD techniques to create acceptance criteria. \u200b Carries out exploratory testing A feature is under test; the lead test engineer feels that some exploratory testing will help look for defects. They use a test charter and test persona to carry out some exploratory testing. \u200b Responsible for coaching less experienced test automation engineers The lead test engineer coaches a junior tester in BDD, reviewing their work and providing feedback and advice. \u200b Responsible for ensuring that testing on a project adds up to a coherent whole A project uses several different testing techniques - automated, manual, non-functional. The lead test engineer sees that there is a lack of security testing, so they recommend to the Delivery Manager that several security testing stories are added to the backlog. \u200b Will be involved in hiring and other resourcing decisions (but is not responsible for recruitment) Having received appropriate training, the lead test engineer is a member of the board on an interview of a test automation engineer. They assist in creating the questions used. \u200bSoftware Testing Subject Matter Expert (10%) Advise the team on the best approach for automated tests \u200bThe team are building a new application; the lead test engineer reviews the user stories and advises on the best approach for automated testing. \u200b \u200bHelps the team on using best practice for writing Behaviour Driven Development testing \u200bThe lead test engineer sees that some of the team have less confidence than others in using BDD. They offer to provide some 1-2-1 coaching to improve the overall level of skill within the team. \u200b \u200b\u200bLooks at the testability of a product As part of backlog refinement they see that implementing stubs or mocks will allow the team to progress testing rather than having to wait for another PBI to be completed. Setup tasks for testing (5%) \u200bCreates test data for a sprint There is a requirement to test a complex change, the senior test engineer analyses which data will be needed for testing and arranges the relevant test data. \u200b \u200bAssists with preparing environments for testing \u200bPrior to a sprint starting the lead test engineer runs some confidence tests to ensure that the test environment is ready for testing. \u200bAct as Subject Matter Expert in a technology across UKHO (10%) \u200bLeads that technology, its adoption and best practices across UKHO \u200bThe lead test engineer would champion the technology across all teams, create best practices, provide mentoring to teams, lead events and engage with external organisations, adding to the body of knowledge regarding the technology. \u200bContinually develop own skills as part of a program of professional development (5%) \u200bCreates and takes pro-active ownership of a continuous learning cycle for themselves \u200bReviewing their current skill level, they identify that they have a knowledge gap on how DevOps works. They put together a plan that utilises books, and online materials to gain a better understanding.","title":"Lead Test Engineer (Team)"},{"location":"quality-assurance/roles/senior-test-engineer/","text":"Senior Test Engineer Area Tasks Stories Creating test automation (30%) Responsible for writing automated tests in software development Working as part of a delivery team, writing new and refactoring existing automated tests. \u200b Accountable for ensuring that UKHO test automation code standards are maintained Both testers and developers can write automated tests; the senior test engineer notices a new approach used, they review this with the author to ensure standards are met or that the standards need updating. \u200b Responsible for pro-actively researching and recommending the use of technology A company bring out a new tool for managing test data. The senior test engineer sees that this resolves a common problem in several teams. They research it and finds it to be fit for purpose and recommends it to Test Engineering. \u200b Accountable for producing solutions that are supportable, including documentation, knowledge transfer and support documentation The senior test engineer's delivery team is creating a new piece of software. They check that the team's \"Definition of Done\" covers the required quality assurance. Create relevant test documents for project (e.g Test Approach, Test Summary Report) (5%)) Responsible for the creation of the Test Approach and Test Summary reports as required At the start of a project the test engineer takes ownership of producing the relevant document that provides details on how testing of the product will be undertaken. This will be produced in conjunction with and presented back to the rest of the team. If required, the test engineer will create a Test Summary Report that provides an overview of the testing completed. Analysing Requirements and designing manual or automated tests (20%) Review requirements to understand how they can be tested The role helps review requirements; the senior test engineer sees that altering the requirement would help the testing, so they discuss this with the rest of the team. \u200b \u200bDesign manual tests \u200bA feature needs to be manually tested so the senior test engineer uses test design techniques to create both happy and unhappy path test plans. \u200b \u200bDesign Automated tests \u200bA feature will need automated tests; the senior test engineer uses test design techniques to create the relevant automated tests. \u200bLeads Testing (25%) Leads the team in ensuring that the product is tested to a satisfactory level to provide confidence and information on its quality During a sprint, the senior test engineer notices that the developers do not have enough work to do. The senior test engineer discusses with the team and proposes that there are some test tasks that they could work on to keep the sprint on track. Leads the use of Behaviour Driven Development (BDD) within the delivery team The team is finding it challenging to add acceptance criteria to user stories. They work with the Delivery Manager and the team using BDD techniques to create acceptance criteria. \u200b Carries out exploratory testing A feature is under test; the senior test engineer feels that some exploratory testing will help look for defects. They use a test charter and test persona to carry out some exploratory testing. \u200b Responsible for coaching less experienced test engineers The senior test engineer coaches a junior tester in BDD, reviewing their work and providing feedback and advice. \u200b Responsible for ensuring that testing on a project adds up to a coherent whole A project uses several different testing techniques - automated, manual, non-functional. The senior test engineer sees that there is a lack of security testing, so they recommend to the Delivery Manager that several security testing user stories are added to the backlog. \u200b Will be involved in hiring and other resourcing decisions (but is not responsible for recruitment) Having received appropriate training, the senior test engineer is a member of the board on an interview of a test automation engineer. They assist in creating the questions used. \u200bSoftware Testing Subject Matter Expert (10%) Advise the team on the best approach for automated tests \u200bThe team are building a new application; the senior test engineer reviews the user stories and advises on the best approach for automated testing. \u200b \u200bHelps the team on using best practice for writing Behaviour Driven Development testing \u200bThe senior test engineer sees that some of the team have less confidence than others in using BDD. They offer to provide some 1-2-1 coaching to improve the overall level of skill within the team. \u200b \u200b\u200bLooks at the testability of a product As part of backlog refinement they see that implementing stubs or mocks will allow the team to progress testing rather than having to wait for another user story to be completed. Setup tasks for testing (5%) \u200bCreates test data for a sprint \u200bThere is a requirement to test a complex change, the senior test engineer analyses which data will be needed for testing and arranges the relevant test data. \u200b \u200bAssists with preparing environments for testing \u200bPrior to a sprint starting the senior test engineer runs some confidence tests to ensure that the test environment is ready for testing. \u200bContinually develop own skills as part of a program of professional development (5%) \u200bCreates and takes pro-active ownership of a continuous learning cycle for themselves \u200bReviewing their current skill level, they identify that they have a knowledge gap on how DevOps works. They put together a plan that utilises books, and online materials to gain a better understanding.","title":"Senior Test Engineer"},{"location":"quality-assurance/roles/senior-test-engineer/#senior-test-engineer","text":"Area Tasks Stories Creating test automation (30%) Responsible for writing automated tests in software development Working as part of a delivery team, writing new and refactoring existing automated tests. \u200b Accountable for ensuring that UKHO test automation code standards are maintained Both testers and developers can write automated tests; the senior test engineer notices a new approach used, they review this with the author to ensure standards are met or that the standards need updating. \u200b Responsible for pro-actively researching and recommending the use of technology A company bring out a new tool for managing test data. The senior test engineer sees that this resolves a common problem in several teams. They research it and finds it to be fit for purpose and recommends it to Test Engineering. \u200b Accountable for producing solutions that are supportable, including documentation, knowledge transfer and support documentation The senior test engineer's delivery team is creating a new piece of software. They check that the team's \"Definition of Done\" covers the required quality assurance. Create relevant test documents for project (e.g Test Approach, Test Summary Report) (5%)) Responsible for the creation of the Test Approach and Test Summary reports as required At the start of a project the test engineer takes ownership of producing the relevant document that provides details on how testing of the product will be undertaken. This will be produced in conjunction with and presented back to the rest of the team. If required, the test engineer will create a Test Summary Report that provides an overview of the testing completed. Analysing Requirements and designing manual or automated tests (20%) Review requirements to understand how they can be tested The role helps review requirements; the senior test engineer sees that altering the requirement would help the testing, so they discuss this with the rest of the team. \u200b \u200bDesign manual tests \u200bA feature needs to be manually tested so the senior test engineer uses test design techniques to create both happy and unhappy path test plans. \u200b \u200bDesign Automated tests \u200bA feature will need automated tests; the senior test engineer uses test design techniques to create the relevant automated tests. \u200bLeads Testing (25%) Leads the team in ensuring that the product is tested to a satisfactory level to provide confidence and information on its quality During a sprint, the senior test engineer notices that the developers do not have enough work to do. The senior test engineer discusses with the team and proposes that there are some test tasks that they could work on to keep the sprint on track. Leads the use of Behaviour Driven Development (BDD) within the delivery team The team is finding it challenging to add acceptance criteria to user stories. They work with the Delivery Manager and the team using BDD techniques to create acceptance criteria. \u200b Carries out exploratory testing A feature is under test; the senior test engineer feels that some exploratory testing will help look for defects. They use a test charter and test persona to carry out some exploratory testing. \u200b Responsible for coaching less experienced test engineers The senior test engineer coaches a junior tester in BDD, reviewing their work and providing feedback and advice. \u200b Responsible for ensuring that testing on a project adds up to a coherent whole A project uses several different testing techniques - automated, manual, non-functional. The senior test engineer sees that there is a lack of security testing, so they recommend to the Delivery Manager that several security testing user stories are added to the backlog. \u200b Will be involved in hiring and other resourcing decisions (but is not responsible for recruitment) Having received appropriate training, the senior test engineer is a member of the board on an interview of a test automation engineer. They assist in creating the questions used. \u200bSoftware Testing Subject Matter Expert (10%) Advise the team on the best approach for automated tests \u200bThe team are building a new application; the senior test engineer reviews the user stories and advises on the best approach for automated testing. \u200b \u200bHelps the team on using best practice for writing Behaviour Driven Development testing \u200bThe senior test engineer sees that some of the team have less confidence than others in using BDD. They offer to provide some 1-2-1 coaching to improve the overall level of skill within the team. \u200b \u200b\u200bLooks at the testability of a product As part of backlog refinement they see that implementing stubs or mocks will allow the team to progress testing rather than having to wait for another user story to be completed. Setup tasks for testing (5%) \u200bCreates test data for a sprint \u200bThere is a requirement to test a complex change, the senior test engineer analyses which data will be needed for testing and arranges the relevant test data. \u200b \u200bAssists with preparing environments for testing \u200bPrior to a sprint starting the senior test engineer runs some confidence tests to ensure that the test environment is ready for testing. \u200bContinually develop own skills as part of a program of professional development (5%) \u200bCreates and takes pro-active ownership of a continuous learning cycle for themselves \u200bReviewing their current skill level, they identify that they have a knowledge gap on how DevOps works. They put together a plan that utilises books, and online materials to gain a better understanding.","title":"Senior Test Engineer"},{"location":"quality-assurance/roles/test-engineer/","text":"Test Engineer Areas Tasks Stories \u200bDeliver, under tuition, test automation as part of the Delivery Team (35%) \u200bWriting test automation code \u200bA user story requires automated tests; it is building on existing functionality so the test engineer can use existing automation code and add in the extra tests. Create relevant test documents for project (e.g Test Approach, Test Summary Report) (5%)) Responsible for the creation of the Test Approach and Test Summary reports as required At the start of a project the test engineer takes ownership of producing the relevant document that provides details on how testing of the product will be undertaken. This will be produced in conjunction with and presented back to the rest of the team. If required, the test engineer will create a Test Summary Report that provides an overview of the testing completed. Assist with the resolution of defects by recording them in the project, communicating effectively on the issue and carrying out re-tests as required (5%). Raise good quality defects The test engineer discovers a defect in a product. They raise a defect and include details on the impact, how the defect can be re-created and its importance. \u200b \u200bEnsures that all defects raised within a sprint are followed up \u200bThere are several open defects, the test engineer can see that if one of them is fixed it will allow a PBI to be completed. They discuss with the developers and they agree to focus on that defect first. Analysing Requirements and designing manual or automated tests (25%) Review requirements to understand how they can be tested The test engineer sees that altering the requirement would help the testing, so they discuss this with the rest of the team. \u200b \u200bDesign manual tests \u200bA feature needs to be manually tested so the test engineer uses test design techniques to create both happy and unhappy path test plans. \u200b \u200bDesign Automated tests \u200bA feature will need automated tests; the test engineer uses test design techniques to create the relevant automated tests. \u200bCarry out Testing (25%) Leads the use of Behaviour Driven Development (BDD) within the delivery team The team is finding it challenging to add acceptance criteria to user stories. They work with the Delivery Manager and the team using BDD techniques to create acceptance criteria. \u200b Carries out exploratory testing A feature is under test; the test engineer feels that some exploratory testing will help look for defects. They use a test charter and test persona to carry out some exploratory testing. \u200b \u200bRuns any manual testing \u200bThe test engineer recommends that some user stories are better suited to manual testing and agrees the approach with the team. \u200b \u200bEnsure that automated test suites are being used and any failures followed up \u200bThe test engineer notices that some of the automated tests have failed; they investigate and seeks support/advice form other members of the team if needed. \u200b Has some responsibility for ensuring that testing on a project adds up to a coherent whole A project uses several different testing techniques - automated, manual, non-functional. The test engineer sees that there is a lack of security testing, so they recommend to the Delivery Manager that several security testing user stories are added to the backlog. \u200b \u200b\u200bLooks at the testability of a product As part of backlog refinement they see that asking the developers to create a stub or mock will allow the team to be able to progress testing rather than having to wait for another user story to be completed. \u200bContinually develop own skills as part of a program of professional development (5%) \u200bCreates and takes pro-active ownership of a continuous learning cycle for themselves \u200bReviewing their current skill level, they identify that they have a knowledge gap on how DevOps works. They put together a plan that utilises books and online materials to gain a better understanding.","title":"Test Engineer"},{"location":"quality-assurance/roles/test-engineer/#test-engineer","text":"Areas Tasks Stories \u200bDeliver, under tuition, test automation as part of the Delivery Team (35%) \u200bWriting test automation code \u200bA user story requires automated tests; it is building on existing functionality so the test engineer can use existing automation code and add in the extra tests. Create relevant test documents for project (e.g Test Approach, Test Summary Report) (5%)) Responsible for the creation of the Test Approach and Test Summary reports as required At the start of a project the test engineer takes ownership of producing the relevant document that provides details on how testing of the product will be undertaken. This will be produced in conjunction with and presented back to the rest of the team. If required, the test engineer will create a Test Summary Report that provides an overview of the testing completed. Assist with the resolution of defects by recording them in the project, communicating effectively on the issue and carrying out re-tests as required (5%). Raise good quality defects The test engineer discovers a defect in a product. They raise a defect and include details on the impact, how the defect can be re-created and its importance. \u200b \u200bEnsures that all defects raised within a sprint are followed up \u200bThere are several open defects, the test engineer can see that if one of them is fixed it will allow a PBI to be completed. They discuss with the developers and they agree to focus on that defect first. Analysing Requirements and designing manual or automated tests (25%) Review requirements to understand how they can be tested The test engineer sees that altering the requirement would help the testing, so they discuss this with the rest of the team. \u200b \u200bDesign manual tests \u200bA feature needs to be manually tested so the test engineer uses test design techniques to create both happy and unhappy path test plans. \u200b \u200bDesign Automated tests \u200bA feature will need automated tests; the test engineer uses test design techniques to create the relevant automated tests. \u200bCarry out Testing (25%) Leads the use of Behaviour Driven Development (BDD) within the delivery team The team is finding it challenging to add acceptance criteria to user stories. They work with the Delivery Manager and the team using BDD techniques to create acceptance criteria. \u200b Carries out exploratory testing A feature is under test; the test engineer feels that some exploratory testing will help look for defects. They use a test charter and test persona to carry out some exploratory testing. \u200b \u200bRuns any manual testing \u200bThe test engineer recommends that some user stories are better suited to manual testing and agrees the approach with the team. \u200b \u200bEnsure that automated test suites are being used and any failures followed up \u200bThe test engineer notices that some of the automated tests have failed; they investigate and seeks support/advice form other members of the team if needed. \u200b Has some responsibility for ensuring that testing on a project adds up to a coherent whole A project uses several different testing techniques - automated, manual, non-functional. The test engineer sees that there is a lack of security testing, so they recommend to the Delivery Manager that several security testing user stories are added to the backlog. \u200b \u200b\u200bLooks at the testability of a product As part of backlog refinement they see that asking the developers to create a stub or mock will allow the team to be able to progress testing rather than having to wait for another user story to be completed. \u200bContinually develop own skills as part of a program of professional development (5%) \u200bCreates and takes pro-active ownership of a continuous learning cycle for themselves \u200bReviewing their current skill level, they identify that they have a knowledge gap on how DevOps works. They put together a plan that utilises books and online materials to gain a better understanding.","title":"Test Engineer"},{"location":"software-engineering-policies/","text":"Software Engineering Policies The policies (and associated guidance) that should be followed during software development at the UKHO. Area Policy Guidance Defect Management Policy Code Copyright Policy Code Reuse Policy Code Review Policy Open Source Contribution Policy Open Source Use Policy Pair Programming Policy Secure Development Policy Source Control Policy System Documentation Policy Technical Debt Policy Guidance Third-Party Licensing Policy Guidance Unit Testing Policy Guidance","title":"Software Engineering Policies"},{"location":"software-engineering-policies/#software-engineering-policies","text":"The policies (and associated guidance) that should be followed during software development at the UKHO. Area Policy Guidance Defect Management Policy Code Copyright Policy Code Reuse Policy Code Review Policy Open Source Contribution Policy Open Source Use Policy Pair Programming Policy Secure Development Policy Source Control Policy System Documentation Policy Technical Debt Policy Guidance Third-Party Licensing Policy Guidance Unit Testing Policy Guidance","title":"Software Engineering Policies"},{"location":"software-engineering-policies/CONTRIBUTING/","text":"Contributing to Software Engineering Policies Thank you for considering to contributing to these policies Contribution Processes Questions, Queries and Concerns Please open an issue in all situations and if necessary please @ the policy owner and editor. Minor Changes (typos etc.) Please make the change on a separate branch and submit a merge request. Major Changes (Updating/Creating policies) Open an issue containing detailed information on the change you would like to make If you want to change and existing policy, please @ the policy owner and editor Add the proposal label to the issue. With other participants and stakeholders come to a consensus whether to accept the proposal If accepted remove the proposal label and replace with accepted . This should only be done with agreement from the owner (if relevant) Make the accepted changes on a separate branch, push to GitLab and open a merge request for review Once the changes have been reviewed, make all requested changes. This can take several rounds of changes -> review Once the review is complete and all requested changes have been made, merge in the accepted branch If your proposal is rejected, please close the issue and feel free to resubmit in a new issue making the necessary changes.","title":"Contributing to Software Engineering Policies"},{"location":"software-engineering-policies/CONTRIBUTING/#contributing-to-software-engineering-policies","text":"Thank you for considering to contributing to these policies","title":"Contributing to Software Engineering Policies"},{"location":"software-engineering-policies/CONTRIBUTING/#contribution-processes","text":"","title":"Contribution Processes"},{"location":"software-engineering-policies/CONTRIBUTING/#questions-queries-and-concerns","text":"Please open an issue in all situations and if necessary please @ the policy owner and editor.","title":"Questions, Queries and Concerns"},{"location":"software-engineering-policies/CONTRIBUTING/#minor-changes-typos-etc","text":"Please make the change on a separate branch and submit a merge request.","title":"Minor Changes (typos etc.)"},{"location":"software-engineering-policies/CONTRIBUTING/#major-changes-updatingcreating-policies","text":"Open an issue containing detailed information on the change you would like to make If you want to change and existing policy, please @ the policy owner and editor Add the proposal label to the issue. With other participants and stakeholders come to a consensus whether to accept the proposal If accepted remove the proposal label and replace with accepted . This should only be done with agreement from the owner (if relevant) Make the accepted changes on a separate branch, push to GitLab and open a merge request for review Once the changes have been reviewed, make all requested changes. This can take several rounds of changes -> review Once the review is complete and all requested changes have been made, merge in the accepted branch If your proposal is rejected, please close the issue and feel free to resubmit in a new issue making the necessary changes.","title":"Major Changes (Updating/Creating policies)"},{"location":"software-engineering-policies/development-principles/","text":"Development Principles These are our overarching principles for development: We understand the value of our code. We understand the impact of failure and build appropriately. We write high quality code. We seek confidence in release. We seek reuse of our code. We take a full lifecycle view. We keep our designs simple. We seek opposing views. We look externally when deciding about technology. We understand the value of our code We understand the value of what we are delivering, using this to make decisions about how we work. We understand the impact of failure and build appropriately We build in quality and security controls appropriate to the impact of failure of the systems. We write high quality code We write code covered by automated tests and reviewed by colleagues. We seek confidence in release We favour options that will increase our confidence in releasing products and services. We seek reuse of our code We don\u2019t create the same thing twice. We look for opportunities to collaborate and re-use existing implementations. We take a full lifecycle view We write systems that are robust and easy to support, with appropriate monitoring and instrumentation. We keep our designs simple We favour designs that are easy to understand and communicate. We seek opposing views We strive for teams that understand and create psychologically safe environments, openly seeking views that challenge our ideas and assumptions. We look externally when deciding about technology We look for best practice and innovative solutions elsewhere in government and industry, and reuse them in the UKHO.","title":"Development Principles"},{"location":"software-engineering-policies/development-principles/#development-principles","text":"These are our overarching principles for development: We understand the value of our code. We understand the impact of failure and build appropriately. We write high quality code. We seek confidence in release. We seek reuse of our code. We take a full lifecycle view. We keep our designs simple. We seek opposing views. We look externally when deciding about technology.","title":"Development Principles"},{"location":"software-engineering-policies/development-principles/#we-understand-the-value-of-our-code","text":"We understand the value of what we are delivering, using this to make decisions about how we work.","title":"We understand the value of our code"},{"location":"software-engineering-policies/development-principles/#we-understand-the-impact-of-failure-and-build-appropriately","text":"We build in quality and security controls appropriate to the impact of failure of the systems.","title":"We understand the impact of failure and build appropriately"},{"location":"software-engineering-policies/development-principles/#we-write-high-quality-code","text":"We write code covered by automated tests and reviewed by colleagues.","title":"We write high quality code"},{"location":"software-engineering-policies/development-principles/#we-seek-confidence-in-release","text":"We favour options that will increase our confidence in releasing products and services.","title":"We seek confidence in release"},{"location":"software-engineering-policies/development-principles/#we-seek-reuse-of-our-code","text":"We don\u2019t create the same thing twice. We look for opportunities to collaborate and re-use existing implementations.","title":"We seek reuse of our code"},{"location":"software-engineering-policies/development-principles/#we-take-a-full-lifecycle-view","text":"We write systems that are robust and easy to support, with appropriate monitoring and instrumentation.","title":"We take a full lifecycle view"},{"location":"software-engineering-policies/development-principles/#we-keep-our-designs-simple","text":"We favour designs that are easy to understand and communicate.","title":"We keep our designs simple"},{"location":"software-engineering-policies/development-principles/#we-seek-opposing-views","text":"We strive for teams that understand and create psychologically safe environments, openly seeking views that challenge our ideas and assumptions.","title":"We seek opposing views"},{"location":"software-engineering-policies/development-principles/#we-look-externally-when-deciding-about-technology","text":"We look for best practice and innovative solutions elsewhere in government and industry, and reuse them in the UKHO.","title":"We look externally when deciding about technology"},{"location":"software-engineering-policies/CodeCopyright/CodeCopyrightPolicy/","text":"Code Copyright Policy The topic of copyright and licensing topic is owned by the National Archives . All the code we create is Crown copyright . We are encouraged to open source and license our code under the Open Government License , but are given freedom to use another open source license if we think it would promote adoption. If we want to open source code we should use the MIT license as per the policy (appendix A). This should assert Crown copyright, as per the example \u201cCopyright (C) 2011 Crown copyright (United Kingdom Hydrographic Office)\u201d). Where we are not open sourcing, if there is no license explicitly included in a repo then no license is granted. We can just miss out the license file. We should still assert Crown copyright (although we don\u2019t strictly have to). Since there will be no license file, it should go somewhere prominent like a readme. We don\u2019t need to repeat it in every source file.","title":"Code Copyright Policy"},{"location":"software-engineering-policies/CodeCopyright/CodeCopyrightPolicy/#code-copyright-policy","text":"The topic of copyright and licensing topic is owned by the National Archives . All the code we create is Crown copyright . We are encouraged to open source and license our code under the Open Government License , but are given freedom to use another open source license if we think it would promote adoption. If we want to open source code we should use the MIT license as per the policy (appendix A). This should assert Crown copyright, as per the example \u201cCopyright (C) 2011 Crown copyright (United Kingdom Hydrographic Office)\u201d). Where we are not open sourcing, if there is no license explicitly included in a repo then no license is granted. We can just miss out the license file. We should still assert Crown copyright (although we don\u2019t strictly have to). Since there will be no license file, it should go somewhere prominent like a readme. We don\u2019t need to repeat it in every source file.","title":"Code Copyright Policy"},{"location":"software-engineering-policies/CodeReuse/CodeReusePolicy/","text":"Code Reuse Policy Code assets must be reused where possible. Lead Engineers are accountable for effective: Reuse of assets from within their teams and from other teams and programmes; Communication of available assets to other teams; Verification Teams should be seen to be actively using shared assets The assets that teams push to the UKHO InnerSource repository, with adequate test and documentation artefacts, are available for inspection.","title":"Code Reuse Policy"},{"location":"software-engineering-policies/CodeReuse/CodeReusePolicy/#code-reuse-policy","text":"Code assets must be reused where possible. Lead Engineers are accountable for effective: Reuse of assets from within their teams and from other teams and programmes; Communication of available assets to other teams;","title":"Code Reuse Policy"},{"location":"software-engineering-policies/CodeReuse/CodeReusePolicy/#verification","text":"Teams should be seen to be actively using shared assets The assets that teams push to the UKHO InnerSource repository, with adequate test and documentation artefacts, are available for inspection.","title":"Verification"},{"location":"software-engineering-policies/CodeReview/CodeReviewPolicy/","text":"Code Review Policy What are code reviews Peer code reviews are a valuable and mandatory part of the software development process. These reviews can take various forms, for example a desk based review with another developer or a walkthrough of some significant changes with the entire team. What should be reviewed All changes which are to be committed to source control must be subject to a review. Code reviews must be conducted on code directly from source control. You must not review code deployed to shared folders or drives, or from test deployments. Each team must maintain a means of checking that all code is reviewed. This might consist of a report that is generated showing un-reviewed changes, or the preferred approach of a workflow within version control tooling which enforces it, e.g. via pull requests. What else should be checked The review should ensure that the change set(s) must have a link to an associated work item. All change set(s) must have an appropriate comment explaining the change, i.e. a good commit message. When must the review be completed It is strongly advised that reviews should be completed within 1-2 days of the coding task being completed. Reviews must be completed before the change set is merged into a different branch and prior to code entering a branch which has a deployment path to a formal testing environment such as UAT. A PBI is not completed until any code changes have been reviewed and any further changes from the review completed. The completion of code reviews must be included in a team's definition of done. Evidence of review There must be evidence that the code changes associated with a check-in have been reviewed. Pair Programming Where development has been carried out with pair programming there is no requirement for a separate code review to be completed. Verification There are two means of verification: A report or similar must be open to inspection showing that all code reviews have been carried out. Alternatively, a workflow can be created which enforces a code review before work can enter the main codebase. Code Comments When responding to code comments, it is best to discuss face to face with the reviewer (where possible) to ensure a common understanding of the requested change.","title":"Code Review Policy"},{"location":"software-engineering-policies/CodeReview/CodeReviewPolicy/#code-review-policy","text":"","title":"Code Review Policy"},{"location":"software-engineering-policies/CodeReview/CodeReviewPolicy/#what-are-code-reviews","text":"Peer code reviews are a valuable and mandatory part of the software development process. These reviews can take various forms, for example a desk based review with another developer or a walkthrough of some significant changes with the entire team.","title":"What are code reviews"},{"location":"software-engineering-policies/CodeReview/CodeReviewPolicy/#what-should-be-reviewed","text":"All changes which are to be committed to source control must be subject to a review. Code reviews must be conducted on code directly from source control. You must not review code deployed to shared folders or drives, or from test deployments. Each team must maintain a means of checking that all code is reviewed. This might consist of a report that is generated showing un-reviewed changes, or the preferred approach of a workflow within version control tooling which enforces it, e.g. via pull requests.","title":"What should be reviewed"},{"location":"software-engineering-policies/CodeReview/CodeReviewPolicy/#what-else-should-be-checked","text":"The review should ensure that the change set(s) must have a link to an associated work item. All change set(s) must have an appropriate comment explaining the change, i.e. a good commit message.","title":"What else should be checked"},{"location":"software-engineering-policies/CodeReview/CodeReviewPolicy/#when-must-the-review-be-completed","text":"It is strongly advised that reviews should be completed within 1-2 days of the coding task being completed. Reviews must be completed before the change set is merged into a different branch and prior to code entering a branch which has a deployment path to a formal testing environment such as UAT. A PBI is not completed until any code changes have been reviewed and any further changes from the review completed. The completion of code reviews must be included in a team's definition of done.","title":"When must the review be completed"},{"location":"software-engineering-policies/CodeReview/CodeReviewPolicy/#evidence-of-review","text":"There must be evidence that the code changes associated with a check-in have been reviewed.","title":"Evidence of review"},{"location":"software-engineering-policies/CodeReview/CodeReviewPolicy/#pair-programming","text":"Where development has been carried out with pair programming there is no requirement for a separate code review to be completed.","title":"Pair Programming"},{"location":"software-engineering-policies/CodeReview/CodeReviewPolicy/#verification","text":"There are two means of verification: A report or similar must be open to inspection showing that all code reviews have been carried out. Alternatively, a workflow can be created which enforces a code review before work can enter the main codebase.","title":"Verification"},{"location":"software-engineering-policies/CodeReview/CodeReviewPolicy/#code-comments","text":"When responding to code comments, it is best to discuss face to face with the reviewer (where possible) to ensure a common understanding of the requested change.","title":"Code Comments"},{"location":"software-engineering-policies/CodingStandards/JavascriptCodingStandards/","text":"JavaScript Coding Standards Overview These JavaScript standards describe the default usage and configuration of the JavaScript language, and associated tools within the Software Engineering discipline at the UK Hydrographic Office. All Software Engineering projects shall use these standards by default, however they are not mandatory and alternatives and deviations are permitted, provided that any such alternatives or deviations are fully captured, along with justifications for use, in project documentation. Updates to these standards must be agreed and approved by the collective Lead Engineers meeting, and may be applied at any time. Language Guidelines The baseline set of JavaScript language guidelines are given by the Google JavaScript Style Guide, located here: https://google.github.io/styleguide/jsguide.html Exceptions There may be exceptions to the guidelines mentioned above. These must be determined on a project-by-project basis, and documented appropriately. For secure projects, the style guide above has one immediate exception: the eval() function is NOT permitted by default due to the security implications of using that particular function. Further details can be found here: https://msdn.microsoft.com/en-us/library/windows/desktop/ee790610.aspx TypeScript TypeScript is a strongly-typed variant of JavaScript which benefits from compile-time analysis when developed with some tools. As such, it is seen as the preferred option, especially when developing single-page applications, or other standalone resources. Tooling IDE / Editor JavaScript (and TypeScript) can be written with any ASCII editor application. The standard IDE within the UKHO is Microsoft Visual Studio, and this has increased support for TypeScript. However, any editors may be used to write JS/TS. Linting All JavaScript code shall have a linting tool applied in order to conform to good coding practices. The default choice of tool is ESLint . Whilst most of the suggestions made by ESLint are good practice, there may be some which are not appropriate for a project. Wherever any of the linting rules are ignored or overridden, they must be documented along with justification. ESLint support is built into Visual Studio 2019, it can be enabled by ticking the checkbox in the Tools -> Options menu under Text Editor -> JavaScript/TypeScript -> Linting . It is also available for Java development as an Eclipse Tern plugin, and can be integrated with the IntelliJ IDE. Additionally, there is a Visual Studio Code extension. Google provide an ESLint configuration supporting the Google JavaScript style guide here . Unit Testing Unit testing is required on all applications which execute any JavaScript code. Jasmine is the chosen unit testing framework for JavaScript, since it is the most widely used, supported, and documented. Jasmine can be downloaded from https://jasmine.github.io/ This site also contains excellent documentation for writing Jasmine tests, along with add-on modules which increase the capability of the framework (e.g. jasmine-ajax) Jasmine unit tests can be automated by using the Chutzpah JavaScript test runner.","title":"JavaScript Coding Standards"},{"location":"software-engineering-policies/CodingStandards/JavascriptCodingStandards/#javascript-coding-standards","text":"","title":"JavaScript Coding Standards"},{"location":"software-engineering-policies/CodingStandards/JavascriptCodingStandards/#overview","text":"These JavaScript standards describe the default usage and configuration of the JavaScript language, and associated tools within the Software Engineering discipline at the UK Hydrographic Office. All Software Engineering projects shall use these standards by default, however they are not mandatory and alternatives and deviations are permitted, provided that any such alternatives or deviations are fully captured, along with justifications for use, in project documentation. Updates to these standards must be agreed and approved by the collective Lead Engineers meeting, and may be applied at any time.","title":"Overview"},{"location":"software-engineering-policies/CodingStandards/JavascriptCodingStandards/#language-guidelines","text":"The baseline set of JavaScript language guidelines are given by the Google JavaScript Style Guide, located here: https://google.github.io/styleguide/jsguide.html","title":"Language Guidelines"},{"location":"software-engineering-policies/CodingStandards/JavascriptCodingStandards/#exceptions","text":"There may be exceptions to the guidelines mentioned above. These must be determined on a project-by-project basis, and documented appropriately. For secure projects, the style guide above has one immediate exception: the eval() function is NOT permitted by default due to the security implications of using that particular function. Further details can be found here: https://msdn.microsoft.com/en-us/library/windows/desktop/ee790610.aspx","title":"Exceptions"},{"location":"software-engineering-policies/CodingStandards/JavascriptCodingStandards/#typescript","text":"TypeScript is a strongly-typed variant of JavaScript which benefits from compile-time analysis when developed with some tools. As such, it is seen as the preferred option, especially when developing single-page applications, or other standalone resources.","title":"TypeScript"},{"location":"software-engineering-policies/CodingStandards/JavascriptCodingStandards/#tooling","text":"IDE / Editor JavaScript (and TypeScript) can be written with any ASCII editor application. The standard IDE within the UKHO is Microsoft Visual Studio, and this has increased support for TypeScript. However, any editors may be used to write JS/TS.","title":"Tooling"},{"location":"software-engineering-policies/CodingStandards/JavascriptCodingStandards/#linting","text":"All JavaScript code shall have a linting tool applied in order to conform to good coding practices. The default choice of tool is ESLint . Whilst most of the suggestions made by ESLint are good practice, there may be some which are not appropriate for a project. Wherever any of the linting rules are ignored or overridden, they must be documented along with justification. ESLint support is built into Visual Studio 2019, it can be enabled by ticking the checkbox in the Tools -> Options menu under Text Editor -> JavaScript/TypeScript -> Linting . It is also available for Java development as an Eclipse Tern plugin, and can be integrated with the IntelliJ IDE. Additionally, there is a Visual Studio Code extension. Google provide an ESLint configuration supporting the Google JavaScript style guide here .","title":"Linting"},{"location":"software-engineering-policies/CodingStandards/JavascriptCodingStandards/#unit-testing","text":"Unit testing is required on all applications which execute any JavaScript code. Jasmine is the chosen unit testing framework for JavaScript, since it is the most widely used, supported, and documented. Jasmine can be downloaded from https://jasmine.github.io/ This site also contains excellent documentation for writing Jasmine tests, along with add-on modules which increase the capability of the framework (e.g. jasmine-ajax) Jasmine unit tests can be automated by using the Chutzpah JavaScript test runner.","title":"Unit Testing"},{"location":"software-engineering-policies/DefectManagement/DefectManagementPolicy/","text":"Defect Management Policy An effective Defect Management workflow must be in place for all teams. The Defect Management workflow is to be created and maintained by each team, working with the Test Leads to ensure it meets the requirements outlined below. The Defect Management workflow should include the following: The definition of a defect - what is a defect? Minimum detail required when logging a defect Where, when and how defects should be logged Defect Triage process (Does it contain enough detail?, Is it a defect?, Severity, When should it be fixed?) Defect closure process It is the team's responsibility to ensure that the Defect Management workflow is adhered to.","title":"Defect Management Policy"},{"location":"software-engineering-policies/DefectManagement/DefectManagementPolicy/#defect-management-policy","text":"An effective Defect Management workflow must be in place for all teams. The Defect Management workflow is to be created and maintained by each team, working with the Test Leads to ensure it meets the requirements outlined below. The Defect Management workflow should include the following: The definition of a defect - what is a defect? Minimum detail required when logging a defect Where, when and how defects should be logged Defect Triage process (Does it contain enough detail?, Is it a defect?, Severity, When should it be fixed?) Defect closure process It is the team's responsibility to ensure that the Defect Management workflow is adhered to.","title":"Defect Management Policy"},{"location":"software-engineering-policies/Induction/LeadDeveloperInduction/","text":"Induction sheet for new Lead Developers Security By default, the Lead Developer will also be the Security Advisor. If this is the case: The lead needs to be walked through the Secure Development Policy by the Software Engineering Team Manager or another Security Advisor. The team's documentation needs to be updated with the identity of the new Security Advisor. The lead should self-certify the team against the Secure Development Policy and send the results to the Software Engineering Team Manager. Policies The Lead Developer is accountable for the team following all the engineering team's policies. The Software Engineering Team Manager will: Show the location of the policies Describe each policy Clarify the Lead's accountability towards the policies Explain how to change the policies Explain coding in the open principals Groups and contacts Invite to the Lead's meeting Invite to the Lead's Book Club Introduce to the Testing practice (e.g. invite to Test Practice monthly meeting) Make sure they are invited to the sprint reviews of other teams where appropriate Skills and activities Discuss with line manager the skills required to do the role. Draw up a development plan. Discuss use of time with line manager. Set expectations around amount of coding that is likely. Meet with SA to establish areas of responsibility Support network Conversation with line manager around the following: Would they benefit from a mentor? How can they obtain feedback? Discuss imposter syndrome, expectations of knowing everything","title":"Induction sheet for new Lead Developers"},{"location":"software-engineering-policies/Induction/LeadDeveloperInduction/#induction-sheet-for-new-lead-developers","text":"","title":"Induction sheet for new Lead Developers"},{"location":"software-engineering-policies/Induction/LeadDeveloperInduction/#security","text":"By default, the Lead Developer will also be the Security Advisor. If this is the case: The lead needs to be walked through the Secure Development Policy by the Software Engineering Team Manager or another Security Advisor. The team's documentation needs to be updated with the identity of the new Security Advisor. The lead should self-certify the team against the Secure Development Policy and send the results to the Software Engineering Team Manager.","title":"Security"},{"location":"software-engineering-policies/Induction/LeadDeveloperInduction/#policies","text":"The Lead Developer is accountable for the team following all the engineering team's policies. The Software Engineering Team Manager will: Show the location of the policies Describe each policy Clarify the Lead's accountability towards the policies Explain how to change the policies Explain coding in the open principals","title":"Policies"},{"location":"software-engineering-policies/Induction/LeadDeveloperInduction/#groups-and-contacts","text":"Invite to the Lead's meeting Invite to the Lead's Book Club Introduce to the Testing practice (e.g. invite to Test Practice monthly meeting) Make sure they are invited to the sprint reviews of other teams where appropriate","title":"Groups and contacts"},{"location":"software-engineering-policies/Induction/LeadDeveloperInduction/#skills-and-activities","text":"Discuss with line manager the skills required to do the role. Draw up a development plan. Discuss use of time with line manager. Set expectations around amount of coding that is likely. Meet with SA to establish areas of responsibility","title":"Skills and activities"},{"location":"software-engineering-policies/Induction/LeadDeveloperInduction/#support-network","text":"Conversation with line manager around the following: Would they benefit from a mentor? How can they obtain feedback? Discuss imposter syndrome, expectations of knowing everything","title":"Support network"},{"location":"software-engineering-policies/OpenSourceContribution/OpenSourceContributionPolicy/","text":"Open Source Contribution Applicability This policy must be applied by those: open sourcing UKHO code in public repositories that we control; contributing code to open source software which is controlled by others; paying others to enhance open source software for our use. Introduction We are increasingly making use of open source assets as part of our business infrastructure, as governed by our Use of Open Source Policy. This often requires us to invest in the development, enhancement or integration of those OS assets to meet our specific business requirements. In line with Government policy and GDS guidance , our default position is that all incremental investments, enhancements and integrations of existing OS assets should be contributed back to the community from which the OS asset was originally sourced. This improves the general quality of the asset for all and makes it more likely that the OS asset concerned will be actively used and maintained in future. With regards to bespoke development of complete business applications, algorithms or training data sets, either internally or through a 3rd party, our default position is to retain that IPR for our unique use - unless it is determined that the asset can be released without harming our interests as a commercial entity. Responsibility for agreeing such a release lies with our ExCo and must be formally approved and recorded before release. Because of the reputational, security and business risks (detailed below) that can occur as a result of any contribution to the OS community, all releases must adhere to policies laid out below Definition of Free Open Source Software For the purposes of this policy, free open source software (FOSS) is as defined by the Open Source Initiative . In particular, it: Governed by an Open Source License; Free to incorporate in a solution and to redistribute; Is available to use and modify as source code Risks addressed by this policy \u200bRisk \u200bDescription \u200bMitigation We damage our business by contributing to an OS asset. We develop valuable IPR (most likely complete software, algorithms, or training data sets) and contribute it to an OS project that damages our business. No UKHO developed software code, algorithms, data or training data sets should be released into an OS project without specific approval. See Authorisation We attract an inappropriate liability for support of OS assets that we have contributed Unless properly licensed, it is possible that the UKHO could attract some liability for IP assets that it develops and makes OS. Only a specified license can be used. See Licensing. Our brand is damaged by delivering poor quality OS asset contributions Unless properly licensed, it is possible that the UKHO could attract some liability for IP assets that it develops and makes OS. ur approved OS asset contributions must be produced to the same quality standards as those developed for our own internal use. See Standards We inadvertently breach license terms of other software Most open source software relies on other open source software dependencies. It is possible to breach the license terms of these dependencies by issuing them under an incompatible license, or not meeting their license terms in some way. Licensing terms must be carefully managed. See Dependencies. Ownership of Open Source repositories This section covers the case where we open source some of our own code in a repository that we own and manage e.g. GDS do this by default with their code, where they share software on a dedicated GDS GitHub page . Authorisation The open sourcing of a new piece of software must be authorised by a Lead Engineer. Significant changes to the scope of the software must be re-authorised. The Lead Engineer must present a completed \"Open Source Goverance Checklist\" to a Software Engineering Team Manager in order to demonstrate that sensible precautions have been taken. Platforms Only the UKHO Github.com account can be used for creating an open source repository. Reputation Contributors must be mindful that our open source software is linked to the UKHO brand through its presence on the UKHO GitHub page. The associated Lead Engineer is accountable for ensuring that that the code, comments, documentation etc. do not contain any inappropriate content. Standards The repository must match internal standards, including code standards, unit testing, documentation, package names etc. As with internal code, all contributions to an open source repository must be subject to code reviews. Additional standards will be applied to open source projects with regards to structure, standard documentation etc. These will be defined by the work to stand up our InnerSource capability[1]. An existing Lead Engineer must be assigned to each repository and is accountable for maintaining quality standards. Community support The default position is to provide no support for consumers of the repositories other than documentation. We should not invite bug reports, or allow pull requests etc. Offering any level of support requires the authorisation of the Technology Head of Division. This needs to be carefully considered, as we would have to provide: A governance process; Contributor agreements; Trusted committers to manage pull requests; A bug reporting / triage process; Extra security testing of the code; Discussion forums. Licensing Our open source repositories must be licensed with a standard MIT open source license as per Appendix A. Security Security needs to be carefully considered so that: UKHO does not reveal anything that would make its systems vulnerable; UKHO takes reasonable steps to not publish code that is inherently insecure; UKHO does not accept changes to libraries that make them insecure. To this end, GDS guidelines must be followed. Dependencies Dependent modules in our code must be referenced using config for an appropriate dependency management tool, e.g. a Maven / pom.xml file. Binaries or source of dependencies must not be included in the repository. Investment in Open Source The section covers the case where we contribute code to open source software that another organisation or community owns and manages. For example, there might be a complex framework that almost meets our needs, but it doesn't cater for a data type type we require. We might then add this code ourselves, contributing it back to the codebase. Alternatively we might pay someone else to do this for us. Authorisation Contributing to an open source repository must be authorised by the Technology Head of Division. Significant changes to the scope of the contribution must be re-authorised. Any UKHO developed software code, algorithm, data or training data set could represent valuable intellectual property and should not be released into an OS project without specific approval. An exception would be a simple bug fix, correcting logic in existing code, which does not have to be authorised. Licensing Licenses The FOSS that the UKHO contributes to must be governed by a license. This license must be an OSI-approved license . Since we will be contributing in order to use the enhancement in our own systems, the license is very likely to be on our allowlist of licenses that are approved for use. Exceptions must be approved by the UKHO Legal Advisor. Contributor agreements Open source contributor license agreements (CLAs) define the terms that intellectual property is contributed to a project. Therefore: A CLA must exist; Contribution under that CLA must have been approved by the UKHO Legal Advisor; The CLA must be recorded and kept by DS&T. Exceptions must be approved by the Head of DS&T. Evaluating investment The investment in open source will normally take place in the context of a wider project. It will thus be part of that project's overall investment appraisal / business case, as per the Secure Funding goal of the delivery framework. If that is not the case, it represents a separate change and will therefore require a separate business case. Procurement Paying a supplier to make enhancements to an open source codebase is a procurement exercise. It must be carried out through the UKHO Procurement team, who will ensure that the business is competed where appropriate, full long-term costs are considered, etc. Forking Forking FOSS and making changes which we do not contribute back to the open codebase is not permitted because it exposes UKHO to problems of security and maintenance. Exceptions must be approved by the Head of TPE. Personal contributions to open source All contributions that relate directly to an engineer's work at the UKHO or relate to the UKHO's business (e.g. marine geospatial systems, information for the mariner) are subject to this policy, even if they are carried out on an engineer's own equipment or in their own time. Otherwise, engineers are free to contribute to open source projects. Appendix A - UKHO license file text The following license should accompany all code which the UKHO open sources. The MIT License (MIT) Copyright (C) 2011 Crown copyright (United Kingdom Hydrographic Office) Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions: The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software. THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.","title":"Open Source Contribution"},{"location":"software-engineering-policies/OpenSourceContribution/OpenSourceContributionPolicy/#open-source-contribution","text":"","title":"Open Source Contribution"},{"location":"software-engineering-policies/OpenSourceContribution/OpenSourceContributionPolicy/#applicability","text":"This policy must be applied by those: open sourcing UKHO code in public repositories that we control; contributing code to open source software which is controlled by others; paying others to enhance open source software for our use.","title":"Applicability"},{"location":"software-engineering-policies/OpenSourceContribution/OpenSourceContributionPolicy/#introduction","text":"We are increasingly making use of open source assets as part of our business infrastructure, as governed by our Use of Open Source Policy. This often requires us to invest in the development, enhancement or integration of those OS assets to meet our specific business requirements. In line with Government policy and GDS guidance , our default position is that all incremental investments, enhancements and integrations of existing OS assets should be contributed back to the community from which the OS asset was originally sourced. This improves the general quality of the asset for all and makes it more likely that the OS asset concerned will be actively used and maintained in future. With regards to bespoke development of complete business applications, algorithms or training data sets, either internally or through a 3rd party, our default position is to retain that IPR for our unique use - unless it is determined that the asset can be released without harming our interests as a commercial entity. Responsibility for agreeing such a release lies with our ExCo and must be formally approved and recorded before release. Because of the reputational, security and business risks (detailed below) that can occur as a result of any contribution to the OS community, all releases must adhere to policies laid out below Definition of Free Open Source Software For the purposes of this policy, free open source software (FOSS) is as defined by the Open Source Initiative . In particular, it: Governed by an Open Source License; Free to incorporate in a solution and to redistribute; Is available to use and modify as source code Risks addressed by this policy \u200bRisk \u200bDescription \u200bMitigation We damage our business by contributing to an OS asset. We develop valuable IPR (most likely complete software, algorithms, or training data sets) and contribute it to an OS project that damages our business. No UKHO developed software code, algorithms, data or training data sets should be released into an OS project without specific approval. See Authorisation We attract an inappropriate liability for support of OS assets that we have contributed Unless properly licensed, it is possible that the UKHO could attract some liability for IP assets that it develops and makes OS. Only a specified license can be used. See Licensing. Our brand is damaged by delivering poor quality OS asset contributions Unless properly licensed, it is possible that the UKHO could attract some liability for IP assets that it develops and makes OS. ur approved OS asset contributions must be produced to the same quality standards as those developed for our own internal use. See Standards We inadvertently breach license terms of other software Most open source software relies on other open source software dependencies. It is possible to breach the license terms of these dependencies by issuing them under an incompatible license, or not meeting their license terms in some way. Licensing terms must be carefully managed. See Dependencies.","title":"Introduction"},{"location":"software-engineering-policies/OpenSourceContribution/OpenSourceContributionPolicy/#ownership-of-open-source-repositories","text":"This section covers the case where we open source some of our own code in a repository that we own and manage e.g. GDS do this by default with their code, where they share software on a dedicated GDS GitHub page .","title":"Ownership of Open Source repositories"},{"location":"software-engineering-policies/OpenSourceContribution/OpenSourceContributionPolicy/#authorisation","text":"The open sourcing of a new piece of software must be authorised by a Lead Engineer. Significant changes to the scope of the software must be re-authorised. The Lead Engineer must present a completed \"Open Source Goverance Checklist\" to a Software Engineering Team Manager in order to demonstrate that sensible precautions have been taken.","title":"Authorisation"},{"location":"software-engineering-policies/OpenSourceContribution/OpenSourceContributionPolicy/#platforms","text":"Only the UKHO Github.com account can be used for creating an open source repository.","title":"Platforms"},{"location":"software-engineering-policies/OpenSourceContribution/OpenSourceContributionPolicy/#reputation","text":"Contributors must be mindful that our open source software is linked to the UKHO brand through its presence on the UKHO GitHub page. The associated Lead Engineer is accountable for ensuring that that the code, comments, documentation etc. do not contain any inappropriate content.","title":"Reputation"},{"location":"software-engineering-policies/OpenSourceContribution/OpenSourceContributionPolicy/#standards","text":"The repository must match internal standards, including code standards, unit testing, documentation, package names etc. As with internal code, all contributions to an open source repository must be subject to code reviews. Additional standards will be applied to open source projects with regards to structure, standard documentation etc. These will be defined by the work to stand up our InnerSource capability[1]. An existing Lead Engineer must be assigned to each repository and is accountable for maintaining quality standards.","title":"Standards"},{"location":"software-engineering-policies/OpenSourceContribution/OpenSourceContributionPolicy/#community-support","text":"The default position is to provide no support for consumers of the repositories other than documentation. We should not invite bug reports, or allow pull requests etc. Offering any level of support requires the authorisation of the Technology Head of Division. This needs to be carefully considered, as we would have to provide: A governance process; Contributor agreements; Trusted committers to manage pull requests; A bug reporting / triage process; Extra security testing of the code; Discussion forums.","title":"Community support"},{"location":"software-engineering-policies/OpenSourceContribution/OpenSourceContributionPolicy/#licensing","text":"Our open source repositories must be licensed with a standard MIT open source license as per Appendix A.","title":"Licensing"},{"location":"software-engineering-policies/OpenSourceContribution/OpenSourceContributionPolicy/#security","text":"Security needs to be carefully considered so that: UKHO does not reveal anything that would make its systems vulnerable; UKHO takes reasonable steps to not publish code that is inherently insecure; UKHO does not accept changes to libraries that make them insecure. To this end, GDS guidelines must be followed. Dependencies Dependent modules in our code must be referenced using config for an appropriate dependency management tool, e.g. a Maven / pom.xml file. Binaries or source of dependencies must not be included in the repository.","title":"Security"},{"location":"software-engineering-policies/OpenSourceContribution/OpenSourceContributionPolicy/#investment-in-open-source","text":"The section covers the case where we contribute code to open source software that another organisation or community owns and manages. For example, there might be a complex framework that almost meets our needs, but it doesn't cater for a data type type we require. We might then add this code ourselves, contributing it back to the codebase. Alternatively we might pay someone else to do this for us.","title":"Investment in Open Source"},{"location":"software-engineering-policies/OpenSourceContribution/OpenSourceContributionPolicy/#authorisation_1","text":"Contributing to an open source repository must be authorised by the Technology Head of Division. Significant changes to the scope of the contribution must be re-authorised. Any UKHO developed software code, algorithm, data or training data set could represent valuable intellectual property and should not be released into an OS project without specific approval. An exception would be a simple bug fix, correcting logic in existing code, which does not have to be authorised.","title":"Authorisation"},{"location":"software-engineering-policies/OpenSourceContribution/OpenSourceContributionPolicy/#licensing_1","text":"","title":"Licensing"},{"location":"software-engineering-policies/OpenSourceContribution/OpenSourceContributionPolicy/#licenses","text":"The FOSS that the UKHO contributes to must be governed by a license. This license must be an OSI-approved license . Since we will be contributing in order to use the enhancement in our own systems, the license is very likely to be on our allowlist of licenses that are approved for use. Exceptions must be approved by the UKHO Legal Advisor.","title":"Licenses"},{"location":"software-engineering-policies/OpenSourceContribution/OpenSourceContributionPolicy/#contributor-agreements","text":"Open source contributor license agreements (CLAs) define the terms that intellectual property is contributed to a project. Therefore: A CLA must exist; Contribution under that CLA must have been approved by the UKHO Legal Advisor; The CLA must be recorded and kept by DS&T. Exceptions must be approved by the Head of DS&T.","title":"Contributor agreements"},{"location":"software-engineering-policies/OpenSourceContribution/OpenSourceContributionPolicy/#evaluating-investment","text":"The investment in open source will normally take place in the context of a wider project. It will thus be part of that project's overall investment appraisal / business case, as per the Secure Funding goal of the delivery framework. If that is not the case, it represents a separate change and will therefore require a separate business case.","title":"Evaluating investment"},{"location":"software-engineering-policies/OpenSourceContribution/OpenSourceContributionPolicy/#procurement","text":"Paying a supplier to make enhancements to an open source codebase is a procurement exercise. It must be carried out through the UKHO Procurement team, who will ensure that the business is competed where appropriate, full long-term costs are considered, etc.","title":"Procurement"},{"location":"software-engineering-policies/OpenSourceContribution/OpenSourceContributionPolicy/#forking","text":"Forking FOSS and making changes which we do not contribute back to the open codebase is not permitted because it exposes UKHO to problems of security and maintenance. Exceptions must be approved by the Head of TPE.","title":"Forking"},{"location":"software-engineering-policies/OpenSourceContribution/OpenSourceContributionPolicy/#personal-contributions-to-open-source","text":"All contributions that relate directly to an engineer's work at the UKHO or relate to the UKHO's business (e.g. marine geospatial systems, information for the mariner) are subject to this policy, even if they are carried out on an engineer's own equipment or in their own time. Otherwise, engineers are free to contribute to open source projects.","title":"Personal contributions to open source"},{"location":"software-engineering-policies/OpenSourceContribution/OpenSourceContributionPolicy/#appendix-a-ukho-license-file-text","text":"The following license should accompany all code which the UKHO open sources. The MIT License (MIT) Copyright (C) 2011 Crown copyright (United Kingdom Hydrographic Office) Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions: The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software. THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.","title":"Appendix A - UKHO license file text"},{"location":"software-engineering-policies/OpenSourceContribution/OpenSourceGovernanceChecklist/","text":"Open Source Governance Checklist Identifer (e.g. repo name) Technical owner The lead responsible for the repo Description of functionality Must contain enough detail to allow assessment of whether it contains intellectual property that we need to protect. Security How has security been considered? Has application code been scanned with security tooling and issues corrected? This must be done for code supported by our SAST tooling Has the application been threat modelled during development and the evidence captured within TFS (or similar)? Threat modelling must be carried out for all application code, this evidence needs to be reviewed by expert or lead engineer Has the code been double-checked for security credentials, keys etc.? Give details of who has double-checked the code Is a disclosure process in place and linked from the codebase? Use the standard disclose text Quality How has code quality been considered? Does the quality of the code reflect our ambitions for high quality code, in terms of being clean, well-tested etc. Correct answer = yes! Has all code been reviewed? Correct answer = yes! Has the open-sourced codebase had its history removed? If not, have all check-in comments been reviewed? Describe the steps taken to prevent inadvertent disclosed in comments / etc. Does the codebase contain all documentation and configuration elements required to build and verify the software? A user should be able to build / run tests etc. based on what is in the repo Contributions Has the handling of contributions considered? Are contributions explicitly encouraged in the codebase For example, have you enabled the use of issues and provided a CONTRIBUTING.md? Think very carefully before inviting change, as you will then have to answer 'yes' to the next two questions Is a process for responding to issues defined? Describe in detail the process by which you are going to ensure that issues are responded to in a timely manner How is this process resourced? Describe how you have made sure that time is available to carry out the process described above. For example, has the relevant manager agreed for time for time to spent on this?","title":"Open Source Governance Checklist"},{"location":"software-engineering-policies/OpenSourceContribution/OpenSourceGovernanceChecklist/#open-source-governance-checklist","text":"","title":"Open Source Governance Checklist"},{"location":"software-engineering-policies/OpenSourceContribution/OpenSourceGovernanceChecklist/#identifer","text":"(e.g. repo name)","title":"Identifer"},{"location":"software-engineering-policies/OpenSourceContribution/OpenSourceGovernanceChecklist/#technical-owner","text":"The lead responsible for the repo","title":"Technical owner"},{"location":"software-engineering-policies/OpenSourceContribution/OpenSourceGovernanceChecklist/#description-of-functionality","text":"Must contain enough detail to allow assessment of whether it contains intellectual property that we need to protect.","title":"Description of functionality"},{"location":"software-engineering-policies/OpenSourceContribution/OpenSourceGovernanceChecklist/#security","text":"How has security been considered? Has application code been scanned with security tooling and issues corrected? This must be done for code supported by our SAST tooling Has the application been threat modelled during development and the evidence captured within TFS (or similar)? Threat modelling must be carried out for all application code, this evidence needs to be reviewed by expert or lead engineer Has the code been double-checked for security credentials, keys etc.? Give details of who has double-checked the code Is a disclosure process in place and linked from the codebase? Use the standard disclose text","title":"Security"},{"location":"software-engineering-policies/OpenSourceContribution/OpenSourceGovernanceChecklist/#quality","text":"How has code quality been considered? Does the quality of the code reflect our ambitions for high quality code, in terms of being clean, well-tested etc. Correct answer = yes! Has all code been reviewed? Correct answer = yes! Has the open-sourced codebase had its history removed? If not, have all check-in comments been reviewed? Describe the steps taken to prevent inadvertent disclosed in comments / etc. Does the codebase contain all documentation and configuration elements required to build and verify the software? A user should be able to build / run tests etc. based on what is in the repo","title":"Quality"},{"location":"software-engineering-policies/OpenSourceContribution/OpenSourceGovernanceChecklist/#contributions","text":"Has the handling of contributions considered? Are contributions explicitly encouraged in the codebase For example, have you enabled the use of issues and provided a CONTRIBUTING.md? Think very carefully before inviting change, as you will then have to answer 'yes' to the next two questions Is a process for responding to issues defined? Describe in detail the process by which you are going to ensure that issues are responded to in a timely manner How is this process resourced? Describe how you have made sure that time is available to carry out the process described above. For example, has the relevant manager agreed for time for time to spent on this?","title":"Contributions"},{"location":"software-engineering-policies/OpenSourceUse/OpenSourceUsePolicy/","text":"Use of Free Open Source Software Introduction UKHO is makes extensive use of open source assets (software, algorithms and data) to meet its goals. Incorporating them into our business solutions provides a business benefit but also introduces risks. This document defines the policy and governance designed to mitigate these. Definition of Free Open Source Software For the purposes of this policy, free open source software (FOSS) is as defined by the Open Source Initiative . In particular, it: Governed by an Open Source License; Free to incorporate in a solution and to redistribute; Is available to use and modify as source code Risks addressed by this policy Risk Description Mitigation The licensing terms of OS asset cause us to inadvertently lose control of valuable IPR if we use it, or prevent us from using an OS asset that performs a function we require. Certain OS licenses, especially those that include so-called \" copyleft \" provisions may require that linked code or solutions built on incorporated code are also distributed under similar terms and conditions. Copyleft licenses may prevent us exploiting specific OS assets that would otherwise be our choice to meet a requirement. See Permitted licenses, below Using OS assets results in unexpected costs to either exploit or support that asset. This is the issues that arise from so-called \"open wash\" ( https://www.quora.com/What-is-openwashing ) and \"open core\" ( https://en.wikipedia.org/wiki/Open_core ) software. A typical \"open core\" problem is where the main asset is released as OS, but to really exploit it requires the use of proprietary, paid-for SW, or commercial support from a single vendor. A typical \"open wash\" problem is where an asset purports to be OS but the owner of the OS asset refuses to allow certain features to be added by the community to the core. This is typically where a paid for module exists that meets the same requirement. The two problems are typically associated with each other \u2013 and are both common where the OS software is developed and supported by a single commercial company rather than being adopted by a wider community. Evaluation criteria 1. and 2. An OS asset that we rely on becomes unmaintained. Not all OS assets are adopted and maintained by an active community. Similarly, not every OS asset has commercial companies that provide support. Evaluation criteria 5,6 We expose ourselves to security issues by using OS assets. There may be cyber-security risk associated with OS assets, either in terms of its development, packaging and distribution or maintenance. See Security vulnerabilities below. We utilise OS assets that infringe someone's IPR OS assets may contain code, algorithms or data that includes 3rd party IPR that hasn't been licensed for use in the code concerned. The risk is that we need to stop using the software concerned and/or pay for a license and/or damages for past use. Evaluation criteria 7 below General guidance Permitted licenses Lead Engineers are accountable for checking the license terms of all open source assets incorporated in our solutions. The license must be on the UKHO allowlist of permitted licenses. Exceptions and changes Any exceptions must be agreed by the Software Engineering Team Manager. Changes to the allowlist must be agreed by the Software Engineering Team Manager and the UKHO Legal Advisor. Reporting and automation It must be possible to report on the licenses of included packages at build time for UKHO systems. An automated process must restrict builds to only use packages with white-listed licenses. Security vulnerabilities All referenced packages must be cross-referenced against known vulnerabilities, as per the Secure Development Policy. Other considerations The table below shows further criteria that should be applied when considering whether to use a piece of FOSS. The responsible person must validate the FOSS against these criteria. If the decision is one which needs to be presented to the ARB, the responsible person is the Solution Architect. In this case, any exceptions must be signed off by ARB. For other (smaller) decisions, the responsible person is the relevant Lead Engineer. In this case, any exceptions must be agreed with the Software Engineering Team Manager. FOSS evaluation criteria Reason Positive indicators Negative indicators 1. Is it controlled by an open foundation, or by a commercial entity Control by a foundation means it is less likely to be exploited for commercial gain. Controlled by a foundation. E.g. The Apache HTTP server is governed by the Apache Software Foundation (ASF) . The ASF is a charitable foundation with a clear and open governance, free from proprietary control. Controlled by a single commercial entity. E.g. NServiceBus is open source , issued under the IPL1.5 license. However, it is entirely controlled by one company, Particular Software. OR Is it under diverse control If several commercial organisations are in control, it is less likely that any one of them will exploit it for commercial gain. Sometimes, multiple vendors form an organisation to govern an open source effort. This diversity makes it less likely that the FOSS will be directly by the vendor. Cloud Foundry is an open source cloud application platform, whose board of directors includes representatives of VMWare, Dell, IBM & Cisco. Sometimes a single vendor or organisation is in control (see Particular Software example above) 2. Is it part of an ' open-core ' offering? The owners of an open core project will be unlikely to accept modifications that would undermine the value of their commercial offering. The FOSS has a free offering which is fully functional. If the FOSS is governed by a single company, this company might make its money instead from support, training and consulting (e.g. Hortonworks ) The software consists of a FOSS core which is just about adequate for basic use, with proprietary add-ons providing more advanced functionality (e.g. Cloudera ). 3. Does it have a clear governance model? A comprehensive, published governance model will provide us clarity on how it is led and how it can be influenced. It can also indicate that the project has reached a certain stage of maturity. A clear governance model exists, e.g. that of Ubuntu . No explicit governance model exists. It isn't clear who owns the direction of the FOSS and how the UKHO could change it, e.g. by adding features that we need. 4. Is there a defined contribution process? UKHO might need to need to add features or fix bugs and feed these back into the project, so that we can avoid forking it. A clear process is published, which invites direct contributions from external parties. E.g. Ubuntu . There should also be a track record of accepting contributions. No process is published, or the process does not invite contribution from external parties. 5. Is it actively maintained? All software has bugs and security flaws. Change to the codebase shows that these issues are being dealt with. There is a stream of commits to the codebase. There is a recent track record of minor releases, with a roadmap for future releases. Codebase seems stagnant, with no plans or progress being made towards new releases. 6. Is it mature and well-used? Software that has been in use over time by large numbers of users will have be more stable Software has been used for a long time and has a good reputation, e.g. Apache HTTP server Software is new, with limited evidence that it is being seriously used. 7. Does the license contain a patent peace clause? A patent peace clause in a license protects the licensee of FOSS against a patent claim from a contributor. The license contains a patent peace clause, e.g. CDDL-1.0 The license does not contain a patent peace clause, e.g. BSD licenses Note that this table contains only open-source-specific concerns. Generic criteria, such as technical fit, security, performance etc. are not included.","title":"Use of Free Open Source Software"},{"location":"software-engineering-policies/OpenSourceUse/OpenSourceUsePolicy/#use-of-free-open-source-software","text":"","title":"Use of Free Open Source Software"},{"location":"software-engineering-policies/OpenSourceUse/OpenSourceUsePolicy/#introduction","text":"UKHO is makes extensive use of open source assets (software, algorithms and data) to meet its goals. Incorporating them into our business solutions provides a business benefit but also introduces risks. This document defines the policy and governance designed to mitigate these.","title":"Introduction"},{"location":"software-engineering-policies/OpenSourceUse/OpenSourceUsePolicy/#definition-of-free-open-source-software","text":"For the purposes of this policy, free open source software (FOSS) is as defined by the Open Source Initiative . In particular, it: Governed by an Open Source License; Free to incorporate in a solution and to redistribute; Is available to use and modify as source code","title":"Definition of Free Open Source Software"},{"location":"software-engineering-policies/OpenSourceUse/OpenSourceUsePolicy/#risks-addressed-by-this-policy","text":"Risk Description Mitigation The licensing terms of OS asset cause us to inadvertently lose control of valuable IPR if we use it, or prevent us from using an OS asset that performs a function we require. Certain OS licenses, especially those that include so-called \" copyleft \" provisions may require that linked code or solutions built on incorporated code are also distributed under similar terms and conditions. Copyleft licenses may prevent us exploiting specific OS assets that would otherwise be our choice to meet a requirement. See Permitted licenses, below Using OS assets results in unexpected costs to either exploit or support that asset. This is the issues that arise from so-called \"open wash\" ( https://www.quora.com/What-is-openwashing ) and \"open core\" ( https://en.wikipedia.org/wiki/Open_core ) software. A typical \"open core\" problem is where the main asset is released as OS, but to really exploit it requires the use of proprietary, paid-for SW, or commercial support from a single vendor. A typical \"open wash\" problem is where an asset purports to be OS but the owner of the OS asset refuses to allow certain features to be added by the community to the core. This is typically where a paid for module exists that meets the same requirement. The two problems are typically associated with each other \u2013 and are both common where the OS software is developed and supported by a single commercial company rather than being adopted by a wider community. Evaluation criteria 1. and 2. An OS asset that we rely on becomes unmaintained. Not all OS assets are adopted and maintained by an active community. Similarly, not every OS asset has commercial companies that provide support. Evaluation criteria 5,6 We expose ourselves to security issues by using OS assets. There may be cyber-security risk associated with OS assets, either in terms of its development, packaging and distribution or maintenance. See Security vulnerabilities below. We utilise OS assets that infringe someone's IPR OS assets may contain code, algorithms or data that includes 3rd party IPR that hasn't been licensed for use in the code concerned. The risk is that we need to stop using the software concerned and/or pay for a license and/or damages for past use. Evaluation criteria 7 below","title":"Risks addressed by this policy"},{"location":"software-engineering-policies/OpenSourceUse/OpenSourceUsePolicy/#general-guidance","text":"","title":"General guidance"},{"location":"software-engineering-policies/OpenSourceUse/OpenSourceUsePolicy/#permitted-licenses","text":"Lead Engineers are accountable for checking the license terms of all open source assets incorporated in our solutions. The license must be on the UKHO allowlist of permitted licenses.","title":"Permitted licenses"},{"location":"software-engineering-policies/OpenSourceUse/OpenSourceUsePolicy/#exceptions-and-changes","text":"Any exceptions must be agreed by the Software Engineering Team Manager. Changes to the allowlist must be agreed by the Software Engineering Team Manager and the UKHO Legal Advisor.","title":"Exceptions and changes"},{"location":"software-engineering-policies/OpenSourceUse/OpenSourceUsePolicy/#reporting-and-automation","text":"It must be possible to report on the licenses of included packages at build time for UKHO systems. An automated process must restrict builds to only use packages with white-listed licenses.","title":"Reporting and automation"},{"location":"software-engineering-policies/OpenSourceUse/OpenSourceUsePolicy/#security-vulnerabilities","text":"All referenced packages must be cross-referenced against known vulnerabilities, as per the Secure Development Policy.","title":"Security vulnerabilities"},{"location":"software-engineering-policies/OpenSourceUse/OpenSourceUsePolicy/#other-considerations","text":"The table below shows further criteria that should be applied when considering whether to use a piece of FOSS. The responsible person must validate the FOSS against these criteria. If the decision is one which needs to be presented to the ARB, the responsible person is the Solution Architect. In this case, any exceptions must be signed off by ARB. For other (smaller) decisions, the responsible person is the relevant Lead Engineer. In this case, any exceptions must be agreed with the Software Engineering Team Manager.","title":"Other considerations"},{"location":"software-engineering-policies/OpenSourceUse/OpenSourceUsePolicy/#foss-evaluation-criteria","text":"Reason Positive indicators Negative indicators 1. Is it controlled by an open foundation, or by a commercial entity Control by a foundation means it is less likely to be exploited for commercial gain. Controlled by a foundation. E.g. The Apache HTTP server is governed by the Apache Software Foundation (ASF) . The ASF is a charitable foundation with a clear and open governance, free from proprietary control. Controlled by a single commercial entity. E.g. NServiceBus is open source , issued under the IPL1.5 license. However, it is entirely controlled by one company, Particular Software. OR Is it under diverse control If several commercial organisations are in control, it is less likely that any one of them will exploit it for commercial gain. Sometimes, multiple vendors form an organisation to govern an open source effort. This diversity makes it less likely that the FOSS will be directly by the vendor. Cloud Foundry is an open source cloud application platform, whose board of directors includes representatives of VMWare, Dell, IBM & Cisco. Sometimes a single vendor or organisation is in control (see Particular Software example above) 2. Is it part of an ' open-core ' offering? The owners of an open core project will be unlikely to accept modifications that would undermine the value of their commercial offering. The FOSS has a free offering which is fully functional. If the FOSS is governed by a single company, this company might make its money instead from support, training and consulting (e.g. Hortonworks ) The software consists of a FOSS core which is just about adequate for basic use, with proprietary add-ons providing more advanced functionality (e.g. Cloudera ). 3. Does it have a clear governance model? A comprehensive, published governance model will provide us clarity on how it is led and how it can be influenced. It can also indicate that the project has reached a certain stage of maturity. A clear governance model exists, e.g. that of Ubuntu . No explicit governance model exists. It isn't clear who owns the direction of the FOSS and how the UKHO could change it, e.g. by adding features that we need. 4. Is there a defined contribution process? UKHO might need to need to add features or fix bugs and feed these back into the project, so that we can avoid forking it. A clear process is published, which invites direct contributions from external parties. E.g. Ubuntu . There should also be a track record of accepting contributions. No process is published, or the process does not invite contribution from external parties. 5. Is it actively maintained? All software has bugs and security flaws. Change to the codebase shows that these issues are being dealt with. There is a stream of commits to the codebase. There is a recent track record of minor releases, with a roadmap for future releases. Codebase seems stagnant, with no plans or progress being made towards new releases. 6. Is it mature and well-used? Software that has been in use over time by large numbers of users will have be more stable Software has been used for a long time and has a good reputation, e.g. Apache HTTP server Software is new, with limited evidence that it is being seriously used. 7. Does the license contain a patent peace clause? A patent peace clause in a license protects the licensee of FOSS against a patent claim from a contributor. The license contains a patent peace clause, e.g. CDDL-1.0 The license does not contain a patent peace clause, e.g. BSD licenses Note that this table contains only open-source-specific concerns. Generic criteria, such as technical fit, security, performance etc. are not included.","title":"FOSS evaluation criteria"},{"location":"software-engineering-policies/PairProgramming/PairProgrammingPolicy/","text":"Pair Programming Policy \u200bGuide All teams must carry out pair programming as a standard activity in their work. Some types of work are suitable for pairing, others are not. Each team must create written guidelines about which types will be paired, and which not. The team's lead engineer is responsible for making sure these guidelines are suitable, and for enforcing them. Verify Each team's pair programming guidelines must be available for inspection.","title":"Pair Programming Policy"},{"location":"software-engineering-policies/PairProgramming/PairProgrammingPolicy/#pair-programming-policy","text":"","title":"Pair Programming Policy"},{"location":"software-engineering-policies/PairProgramming/PairProgrammingPolicy/#guide","text":"All teams must carry out pair programming as a standard activity in their work. Some types of work are suitable for pairing, others are not. Each team must create written guidelines about which types will be paired, and which not. The team's lead engineer is responsible for making sure these guidelines are suitable, and for enforcing them.","title":"\u200bGuide"},{"location":"software-engineering-policies/PairProgramming/PairProgrammingPolicy/#verify","text":"Each team's pair programming guidelines must be available for inspection.","title":"Verify"},{"location":"software-engineering-policies/SecureDevelopment/SecureDevelopmentPolicy/","text":"Objective Vulnerabilities exist because engineers create them. This can be due to several reasons including lack of training, accidental, lack of guidance, poor-quality controls or resource constraints. UKHO software needs to be secure as feasible and this policy is to aid teams in catching vulnerabilities during development. The purpose of this document is to ensure that: It is clear what controls are expected. It is clear what roles are required. Teams are using the correct processes. Teams are using authorised tooling in the correct way. Teams are shown to be continuous improving with security. The teams are creating evidence of security as part of the SDLC. To provide useful references for further learning. Roles Risk Owner The risk owner is the person who is responsible for the product. This may be person responsible for the system or service delivery the solution is part of. It is important to clarify the risk owner as they will be the decider on what the risk tolerance is. Provide the PO/Team with a description of the Risk Tolerance. To authorise exceptions when risks diverge from security requirements or tolerance. Security Champion(s) A Security Champion is any skill level engineer who is enthusiastic about building secure applications. They are responsible for: Collaboration with other security functions at UKHO. Encouraging and facilitating threat modelling. Championing secure development practises. Security Advisor The Security Advisor is a lead or senior engineer who has additional responsibilities towards security. They are responsible for: Ensuring security is considered throughout development. Guiding the team to comply with security policies at UKHO. Ensuring Security Requirement Specifications are available (if they exist). Ensuring unfulfilled security requirements are documented. Ensure a skills matrix is defined per project and developers complete this. Assisting SAC where necessary. Security Working Groups The SWG is a security focused meeting between stakeholders and security functions at UKHO. Security concerns are raised at this forum where owners must decide on whether to accept the risk or seek mitigations. Any unfulfilled security requirements will likely come to this forum. Anyone, including developers, can raise an item to be discussed at the SWG. Accreditor Accreditation is simply the process of auditing a risk management process which is performed by the MOD. Accreditors (MOD staff) \u2018sign-off\u2019 the project by reviewing the evidence of risk management and ensuring risks are within the tolerance. Maintaining the evidence requires specialist skills which we usually contract in the form of Security Assurance Coordinators. However, as of the time of writing, only MINT and Dolphin required accrediting, most of the software teams are not involved in this. Security Assurance Coordinator (SAC) For a project that requires accreditation it is likely a SAC will be involved. A SAC is a MOD role that is used as liaison between project and the MOD accreditor. Their role is to ensure that risk management practises are being followed in accordance with the guidance set by MOD. Your SAC should know what they are doing but may require assistance from software engineers in fulfilling their role. Controls Roles Teams must appoint the necessary security roles within the project. A Security Advisor must be appointed. SCRUM Security must be included within the software development lifecycle and SCRUM. Security considerations must be included within the Definition of Done. Security related stories (vulnerabilities, upgrades) must be raised in TFS with the \u2018Security\u2019 tag. The process for prioritising security PBI\u2019s must be methodical and transparent. Skills Matrix Each project will have different security nuances, so it is appropriate to have skills matrixes for the project. This is to ensure all developer have a common baseline understanding of application security. Each team must keep a list of training materials that need to be viewed per project. A skills matrix is required to track the progress of the team along the security training. There must be evidence that all engineers are progressing along the skills matrix. On Boarding New team members need to be on-boarded into the project. This include adding them to the skills matrix, discussing the common scenarios and mitigations, security tooling and encouraging further reading. Each team must have an on-boarding checklist A confirmation email should be sent to the security advisor once on-boarding is complete. Source Control Source control is a key requirement for projects as it provides role-based access control to code, change management and a change log. All project code intended for delivery should be stored as per the UKHO source control policy. Only ALM and Lead Engineers can provide commit access to a project. All projects should have read access for all engineers on the domains they have access to. All users with access to source code should have at least BPSS clearance. Code reviews must occur before code is released into production. Configuration should also be stored in source control and be subject to the code review process. 3rd Party Dependency/Package Management We are responsible for ensuring that 3rd party packages within our solutions are from authorised repositories, have appropriate licensing and are checked for known vulnerabilities. Packages must be downloaded from Proget, Nexus, Gerrit (or any ALM authorised tool). The team must use a dependency checking tool such as Dependency Checker (or another ALM authorised tool). The tool must be configured to run as part of either/both a build or release pipeline. Code for production must have passed through this tool before release. The team should decide what the acceptable threshold is to fail a release. The team must provide proof that the release fails when this threshold is breached. Decisions to release even in the presence of a known vulnerability should be recorded and approved by the risk owner. The team should agree the schedule for updating the dependency checker. SAST Tooling Static analysis tooling is required to add an extra layer of verification to developer\u2019s code and to catch vulnerabilities. The team must use a static analysis tool which ALM has approved. Each team member must have a basic understanding of interpreting the results. The tool must be configured to run as part of either/both a build or release pipeline. Code for production must have passed through this tool before release. The team should decide what the acceptable threshold is to fail a release. The team must provide proof that the release fails when this threshold is breached. Threat Library & Mitigations Each project will have recurring pieces of functionality. These generic PBI\u2019s should be captured, threat modelled, and code mitigations agreed. OWASP vulnerabilities should be discussed such as XSS, SQL Injections, broken authentication/authorisation, direct object referencing etc. It is easier to review and catch vulnerabilities during code reviews if everyone tackles vulnerabilities with the same techniques. Each team must document a set of generic scenarios for their project. The team must threat model these scenarios are drive out common vulnerabilities. Each team must agree standard code approaches to mitigate these vulnerabilities. A code review checklist must be generated from the results of the threat modelling Testing criteria must be agreed and recorded as Gherkin within the solution.","title":"Objective"},{"location":"software-engineering-policies/SecureDevelopment/SecureDevelopmentPolicy/#objective","text":"Vulnerabilities exist because engineers create them. This can be due to several reasons including lack of training, accidental, lack of guidance, poor-quality controls or resource constraints. UKHO software needs to be secure as feasible and this policy is to aid teams in catching vulnerabilities during development. The purpose of this document is to ensure that: It is clear what controls are expected. It is clear what roles are required. Teams are using the correct processes. Teams are using authorised tooling in the correct way. Teams are shown to be continuous improving with security. The teams are creating evidence of security as part of the SDLC. To provide useful references for further learning.","title":"Objective"},{"location":"software-engineering-policies/SecureDevelopment/SecureDevelopmentPolicy/#roles","text":"","title":"Roles"},{"location":"software-engineering-policies/SecureDevelopment/SecureDevelopmentPolicy/#risk-owner","text":"The risk owner is the person who is responsible for the product. This may be person responsible for the system or service delivery the solution is part of. It is important to clarify the risk owner as they will be the decider on what the risk tolerance is. Provide the PO/Team with a description of the Risk Tolerance. To authorise exceptions when risks diverge from security requirements or tolerance.","title":"Risk Owner"},{"location":"software-engineering-policies/SecureDevelopment/SecureDevelopmentPolicy/#security-champions","text":"A Security Champion is any skill level engineer who is enthusiastic about building secure applications. They are responsible for: Collaboration with other security functions at UKHO. Encouraging and facilitating threat modelling. Championing secure development practises.","title":"Security Champion(s)"},{"location":"software-engineering-policies/SecureDevelopment/SecureDevelopmentPolicy/#security-advisor","text":"The Security Advisor is a lead or senior engineer who has additional responsibilities towards security. They are responsible for: Ensuring security is considered throughout development. Guiding the team to comply with security policies at UKHO. Ensuring Security Requirement Specifications are available (if they exist). Ensuring unfulfilled security requirements are documented. Ensure a skills matrix is defined per project and developers complete this. Assisting SAC where necessary.","title":"Security Advisor"},{"location":"software-engineering-policies/SecureDevelopment/SecureDevelopmentPolicy/#security-working-groups","text":"The SWG is a security focused meeting between stakeholders and security functions at UKHO. Security concerns are raised at this forum where owners must decide on whether to accept the risk or seek mitigations. Any unfulfilled security requirements will likely come to this forum. Anyone, including developers, can raise an item to be discussed at the SWG.","title":"Security Working Groups"},{"location":"software-engineering-policies/SecureDevelopment/SecureDevelopmentPolicy/#accreditor","text":"Accreditation is simply the process of auditing a risk management process which is performed by the MOD. Accreditors (MOD staff) \u2018sign-off\u2019 the project by reviewing the evidence of risk management and ensuring risks are within the tolerance. Maintaining the evidence requires specialist skills which we usually contract in the form of Security Assurance Coordinators. However, as of the time of writing, only MINT and Dolphin required accrediting, most of the software teams are not involved in this.","title":"Accreditor"},{"location":"software-engineering-policies/SecureDevelopment/SecureDevelopmentPolicy/#security-assurance-coordinator-sac","text":"For a project that requires accreditation it is likely a SAC will be involved. A SAC is a MOD role that is used as liaison between project and the MOD accreditor. Their role is to ensure that risk management practises are being followed in accordance with the guidance set by MOD. Your SAC should know what they are doing but may require assistance from software engineers in fulfilling their role.","title":"Security Assurance Coordinator (SAC)"},{"location":"software-engineering-policies/SecureDevelopment/SecureDevelopmentPolicy/#controls","text":"","title":"Controls"},{"location":"software-engineering-policies/SecureDevelopment/SecureDevelopmentPolicy/#roles_1","text":"Teams must appoint the necessary security roles within the project. A Security Advisor must be appointed.","title":"Roles"},{"location":"software-engineering-policies/SecureDevelopment/SecureDevelopmentPolicy/#scrum","text":"Security must be included within the software development lifecycle and SCRUM. Security considerations must be included within the Definition of Done. Security related stories (vulnerabilities, upgrades) must be raised in TFS with the \u2018Security\u2019 tag. The process for prioritising security PBI\u2019s must be methodical and transparent.","title":"SCRUM"},{"location":"software-engineering-policies/SecureDevelopment/SecureDevelopmentPolicy/#skills-matrix","text":"Each project will have different security nuances, so it is appropriate to have skills matrixes for the project. This is to ensure all developer have a common baseline understanding of application security. Each team must keep a list of training materials that need to be viewed per project. A skills matrix is required to track the progress of the team along the security training. There must be evidence that all engineers are progressing along the skills matrix.","title":"Skills Matrix"},{"location":"software-engineering-policies/SecureDevelopment/SecureDevelopmentPolicy/#on-boarding","text":"New team members need to be on-boarded into the project. This include adding them to the skills matrix, discussing the common scenarios and mitigations, security tooling and encouraging further reading. Each team must have an on-boarding checklist A confirmation email should be sent to the security advisor once on-boarding is complete.","title":"On Boarding"},{"location":"software-engineering-policies/SecureDevelopment/SecureDevelopmentPolicy/#source-control","text":"Source control is a key requirement for projects as it provides role-based access control to code, change management and a change log. All project code intended for delivery should be stored as per the UKHO source control policy. Only ALM and Lead Engineers can provide commit access to a project. All projects should have read access for all engineers on the domains they have access to. All users with access to source code should have at least BPSS clearance. Code reviews must occur before code is released into production. Configuration should also be stored in source control and be subject to the code review process.","title":"Source Control"},{"location":"software-engineering-policies/SecureDevelopment/SecureDevelopmentPolicy/#3rd-party-dependencypackage-management","text":"We are responsible for ensuring that 3rd party packages within our solutions are from authorised repositories, have appropriate licensing and are checked for known vulnerabilities. Packages must be downloaded from Proget, Nexus, Gerrit (or any ALM authorised tool). The team must use a dependency checking tool such as Dependency Checker (or another ALM authorised tool). The tool must be configured to run as part of either/both a build or release pipeline. Code for production must have passed through this tool before release. The team should decide what the acceptable threshold is to fail a release. The team must provide proof that the release fails when this threshold is breached. Decisions to release even in the presence of a known vulnerability should be recorded and approved by the risk owner. The team should agree the schedule for updating the dependency checker.","title":"3rd Party Dependency/Package Management"},{"location":"software-engineering-policies/SecureDevelopment/SecureDevelopmentPolicy/#sast-tooling","text":"Static analysis tooling is required to add an extra layer of verification to developer\u2019s code and to catch vulnerabilities. The team must use a static analysis tool which ALM has approved. Each team member must have a basic understanding of interpreting the results. The tool must be configured to run as part of either/both a build or release pipeline. Code for production must have passed through this tool before release. The team should decide what the acceptable threshold is to fail a release. The team must provide proof that the release fails when this threshold is breached.","title":"SAST Tooling"},{"location":"software-engineering-policies/SecureDevelopment/SecureDevelopmentPolicy/#threat-library-mitigations","text":"Each project will have recurring pieces of functionality. These generic PBI\u2019s should be captured, threat modelled, and code mitigations agreed. OWASP vulnerabilities should be discussed such as XSS, SQL Injections, broken authentication/authorisation, direct object referencing etc. It is easier to review and catch vulnerabilities during code reviews if everyone tackles vulnerabilities with the same techniques. Each team must document a set of generic scenarios for their project. The team must threat model these scenarios are drive out common vulnerabilities. Each team must agree standard code approaches to mitigate these vulnerabilities. A code review checklist must be generated from the results of the threat modelling Testing criteria must be agreed and recorded as Gherkin within the solution.","title":"Threat Library &amp; Mitigations"},{"location":"software-engineering-policies/SourceControl/SourceControlPolicy/","text":"Source Control All code must be stored in a source code repository. Git is the preferred method of source control. If hosted at the UKHO, these must be used on the central Azure DevOps Server system. It is acceptable to use our official Azure DevOps instance on Azure to provide version control. It is acceptable (and preferred) to use GitHub under our official UKHO organisation. No other source control systems are permitted. Any source code found in any other source control method must first be migrated and proven to build via a CI pipeline. All new source will host a primary branch called trunk or main over master . Branch Protection Suitable branch protection should be setup, depending on factors agreed by the team, to avoid merging to main. Some suggestions are: using the code owner file ensuring a team is associated as an admin on the repository assigning the team as the only members who can merge apply to administrators A team member who is an admin on the repository could bypass the protection Branching Branching policies and schemes are decided at the team level, according to that team's needs. Branching policy and naming conventions are the responsibility of the lead engineers and must be published to the team. Check-in comments All check-ins must be accompanied by a comment. This should be enforced by the tooling. The check-in comments should be subject to review as part of code review. The commits should be small and concise and the commit message should answer \"Applying this change will...\". Verification A team's source control system must be open to inspection, including history of check-in comments. A team's branching policy and naming conventions must be available for verification. Build / Release Configuration Build and release pipelines should be under source control using YAML builds. Secrets should be provided by variable groups and possibly backed by a keyvault to allow for ease of maintenance.","title":"Source Control"},{"location":"software-engineering-policies/SourceControl/SourceControlPolicy/#source-control","text":"All code must be stored in a source code repository. Git is the preferred method of source control. If hosted at the UKHO, these must be used on the central Azure DevOps Server system. It is acceptable to use our official Azure DevOps instance on Azure to provide version control. It is acceptable (and preferred) to use GitHub under our official UKHO organisation. No other source control systems are permitted. Any source code found in any other source control method must first be migrated and proven to build via a CI pipeline. All new source will host a primary branch called trunk or main over master .","title":"Source Control"},{"location":"software-engineering-policies/SourceControl/SourceControlPolicy/#branch-protection","text":"Suitable branch protection should be setup, depending on factors agreed by the team, to avoid merging to main. Some suggestions are: using the code owner file ensuring a team is associated as an admin on the repository assigning the team as the only members who can merge apply to administrators A team member who is an admin on the repository could bypass the protection","title":"Branch Protection"},{"location":"software-engineering-policies/SourceControl/SourceControlPolicy/#branching","text":"Branching policies and schemes are decided at the team level, according to that team's needs. Branching policy and naming conventions are the responsibility of the lead engineers and must be published to the team.","title":"Branching"},{"location":"software-engineering-policies/SourceControl/SourceControlPolicy/#check-in-comments","text":"All check-ins must be accompanied by a comment. This should be enforced by the tooling. The check-in comments should be subject to review as part of code review. The commits should be small and concise and the commit message should answer \"Applying this change will...\".","title":"Check-in comments"},{"location":"software-engineering-policies/SourceControl/SourceControlPolicy/#verification","text":"A team's source control system must be open to inspection, including history of check-in comments. A team's branching policy and naming conventions must be available for verification.","title":"Verification"},{"location":"software-engineering-policies/SourceControl/SourceControlPolicy/#build-release-configuration","text":"Build and release pipelines should be under source control using YAML builds. Secrets should be provided by variable groups and possibly backed by a keyvault to allow for ease of maintenance.","title":"Build / Release Configuration"},{"location":"software-engineering-policies/SystemDocumentation/SystemDocumentationPolicy/","text":"System Documentation Policy Each system must have system documentation to support future maintenance of that system. It should contain the following types of information: High-level architecture Build process Deployment and configuration information Any other useful information to provide a 'jump start into the code' for a delivery team. The audience for this documentation is the delivery team. The Agile principle of \"Working software over comprehensive documentation\" should be followed, meaning documentation is required but should be \"just enough\" to capture the elements above. The documentation must be stored as part of the codebase of the system it describes. Documentation must be treated the same as code and be subject to peer review, as per the code review policy . It is recommended that CommonMark (a standard, unambiguous syntax specification for Markdown) is used. Each team's definition of done must include a statement on documentation. Other documentation DS&T does not mandate any code commenting standards. Teams may specify their own standards according to their needs, remembering: The guidance is that code should be comprehensible without comments, and that code comments are a maintenance overhead and can indicate poor code. Teams should consider additional user-focused documentation (e.g. Javadoc or ///) if a package is to be consumed without the source code.","title":"System Documentation Policy"},{"location":"software-engineering-policies/SystemDocumentation/SystemDocumentationPolicy/#system-documentation-policy","text":"Each system must have system documentation to support future maintenance of that system. It should contain the following types of information: High-level architecture Build process Deployment and configuration information Any other useful information to provide a 'jump start into the code' for a delivery team. The audience for this documentation is the delivery team. The Agile principle of \"Working software over comprehensive documentation\" should be followed, meaning documentation is required but should be \"just enough\" to capture the elements above. The documentation must be stored as part of the codebase of the system it describes. Documentation must be treated the same as code and be subject to peer review, as per the code review policy . It is recommended that CommonMark (a standard, unambiguous syntax specification for Markdown) is used. Each team's definition of done must include a statement on documentation.","title":"System Documentation Policy"},{"location":"software-engineering-policies/SystemDocumentation/SystemDocumentationPolicy/#other-documentation","text":"DS&T does not mandate any code commenting standards. Teams may specify their own standards according to their needs, remembering: The guidance is that code should be comprehensible without comments, and that code comments are a maintenance overhead and can indicate poor code. Teams should consider additional user-focused documentation (e.g. Javadoc or ///) if a package is to be consumed without the source code.","title":"Other documentation"},{"location":"software-engineering-policies/TechnicalDebt/TechnicalDebtGuidance/","text":"Technical Debt Guidance Raising Technical Debt Technical debt that will not be resolved in the sprint identified SHOULD be raised as a PBI in the relevant area of Azure DevOps or Azure DevOps Server. When raising Technical Debt, please add the following information to the Technical Debt PBI: Title Technical Debt - {Project} - {Concise outline of Technical Debt item} - {Date of failure if known} Description The description of the Technical Debt item should include the following as a minimum: The repository the Technical Debt lives within (a link to the repo would be good but the name would suffice) Description of the issue in as much detail as you can provide, including class/file names if this can be included A proposed solution or ideas for a fix ** Cost/Benefit and risk of the Technical Debt item, simply as a \"why should this be fixed?/How long would it take?\" The Technical Debt PBI MUST be tagged with the Technical Debt tag and any further appropriate tags, such as the following: Product Name (could be multiple, see the product list in AppRegister; http://appregister/) Security Availability Portability Compatibility Performance Maintainability Knowledge Automation Testing Out-Of-Support Date-of-Failure ** Investigate To Remove - This tag has been used to mark a Technical Debt item that may already have been completed or is going to be irrelevant due to other work. ** - Where appropriate/known An example of the above: Refining Technical Debt Technical Debt Refinement Identify old Technical Debt PBIs and refine them to meet the newly agreed model specified above Identify any details that can be added to the Technical Debt PBI Assign a Technical Debt priority tag to the PBI: TD1 - High business/technical value, high risk debt that needs to be paid off ASAP (a Security or Out-Of-Support tag should automatically be considered for a TD1 prioritisation). TD2 - High business/technical value (cost reduction, blocker removing, maintainability improvement), lower risk, a change that should be worked on when time/opportunity permits and is not something that can be accepted or supported long term. TD3 - Tech debt that has been accepted as a risk but through paying off would add value through improving usability, maintainability, reliability or performance. TD4 - Accepted risk from the business, safe to leave until service reaches end of life. Worth tracking in case developers are working in the area and can complete as quick wins. If the technical debt item doesn't meet any of the above it should be considered as debt with little or no value to resolution and considered for removal from the backlog. If during refinement an imminent issue is discovered (e.g. old Technical Debt, with high risk, which is time sensitive, but has not been addressed) this should be refined and flagged to a senior Solution Architect. When the technical debt PBI has been refined (i.e. each item on this page has been considered and applied) ensure that you add the tag TD-APPROVED to show this. Effort Assessment An initial effort is applied based on the following scale (all assumptions are based on paired times not total time and are approximate t-shirt sizes): XS S change M change L change XL change These are not final estimates of effort as when a team picks up the tech debt PBI they are expected to investigate and task the PBI according to their own team ways of working. How this meshes with RAID A technical debt PBI should be created if the team is not planning on addressing the technical debt within the current sprint. We advise that teams carrying out RAID analysis create technical debt PBIs in addition to this analysis. Consider that some technical debt items have been long lived in the past this will help support or future development teams consider the technical debt for future resolution. Accessing Technical Debt There MUST BE a centralised shared query in each project area that can be run in Azure Dev Ops (TFS) and Azure Dev Ops Server (VSTS) which centralises all tagged technical debt PBIs into one result set. This pulls from all accessible backlogs. Customer: Link to internal queries - UKHO access only Data Portal: Applications: TODO: (ADD OTHER TEAMS) Note that a new Technical Debt dashboard is also under construction. Link: TBC Team Technical Debt queries Each team should have its own query. This should be named Technical Debt - Basic and be stored in a Shared Queries\\Technical Debt folder. This will ensure consistency across all teams. FAQ When is a defect (bug) technical debt? Defects (also known as bugs) are only considered technical debt if the decision has been made to accept or otherwise leave the defect unresolved. In this case the defect should be marked as technical debt following the provided guidance. If the defect is something intended to be fixed within current or next sprint, then do not mark it as technical debt. Points of Contact Policy owner - \u200bMatthew Slade Policy Editor - Greg Zealley","title":"Technical Debt Guidance"},{"location":"software-engineering-policies/TechnicalDebt/TechnicalDebtGuidance/#technical-debt-guidance","text":"","title":"Technical Debt Guidance"},{"location":"software-engineering-policies/TechnicalDebt/TechnicalDebtGuidance/#raising-technical-debt","text":"Technical debt that will not be resolved in the sprint identified SHOULD be raised as a PBI in the relevant area of Azure DevOps or Azure DevOps Server. When raising Technical Debt, please add the following information to the Technical Debt PBI:","title":"Raising Technical Debt"},{"location":"software-engineering-policies/TechnicalDebt/TechnicalDebtGuidance/#title","text":"Technical Debt - {Project} - {Concise outline of Technical Debt item} - {Date of failure if known}","title":"Title"},{"location":"software-engineering-policies/TechnicalDebt/TechnicalDebtGuidance/#description","text":"The description of the Technical Debt item should include the following as a minimum: The repository the Technical Debt lives within (a link to the repo would be good but the name would suffice) Description of the issue in as much detail as you can provide, including class/file names if this can be included A proposed solution or ideas for a fix ** Cost/Benefit and risk of the Technical Debt item, simply as a \"why should this be fixed?/How long would it take?\" The Technical Debt PBI MUST be tagged with the Technical Debt tag and any further appropriate tags, such as the following: Product Name (could be multiple, see the product list in AppRegister; http://appregister/) Security Availability Portability Compatibility Performance Maintainability Knowledge Automation Testing Out-Of-Support Date-of-Failure ** Investigate To Remove - This tag has been used to mark a Technical Debt item that may already have been completed or is going to be irrelevant due to other work. ** - Where appropriate/known An example of the above:","title":"Description"},{"location":"software-engineering-policies/TechnicalDebt/TechnicalDebtGuidance/#refining-technical-debt","text":"","title":"Refining Technical Debt"},{"location":"software-engineering-policies/TechnicalDebt/TechnicalDebtGuidance/#technical-debt-refinement","text":"Identify old Technical Debt PBIs and refine them to meet the newly agreed model specified above Identify any details that can be added to the Technical Debt PBI Assign a Technical Debt priority tag to the PBI: TD1 - High business/technical value, high risk debt that needs to be paid off ASAP (a Security or Out-Of-Support tag should automatically be considered for a TD1 prioritisation). TD2 - High business/technical value (cost reduction, blocker removing, maintainability improvement), lower risk, a change that should be worked on when time/opportunity permits and is not something that can be accepted or supported long term. TD3 - Tech debt that has been accepted as a risk but through paying off would add value through improving usability, maintainability, reliability or performance. TD4 - Accepted risk from the business, safe to leave until service reaches end of life. Worth tracking in case developers are working in the area and can complete as quick wins. If the technical debt item doesn't meet any of the above it should be considered as debt with little or no value to resolution and considered for removal from the backlog. If during refinement an imminent issue is discovered (e.g. old Technical Debt, with high risk, which is time sensitive, but has not been addressed) this should be refined and flagged to a senior Solution Architect. When the technical debt PBI has been refined (i.e. each item on this page has been considered and applied) ensure that you add the tag TD-APPROVED to show this.","title":"Technical Debt Refinement"},{"location":"software-engineering-policies/TechnicalDebt/TechnicalDebtGuidance/#effort-assessment","text":"An initial effort is applied based on the following scale (all assumptions are based on paired times not total time and are approximate t-shirt sizes): XS S change M change L change XL change These are not final estimates of effort as when a team picks up the tech debt PBI they are expected to investigate and task the PBI according to their own team ways of working.","title":"Effort Assessment"},{"location":"software-engineering-policies/TechnicalDebt/TechnicalDebtGuidance/#how-this-meshes-with-raid","text":"A technical debt PBI should be created if the team is not planning on addressing the technical debt within the current sprint. We advise that teams carrying out RAID analysis create technical debt PBIs in addition to this analysis. Consider that some technical debt items have been long lived in the past this will help support or future development teams consider the technical debt for future resolution.","title":"How this meshes with RAID"},{"location":"software-engineering-policies/TechnicalDebt/TechnicalDebtGuidance/#accessing-technical-debt","text":"There MUST BE a centralised shared query in each project area that can be run in Azure Dev Ops (TFS) and Azure Dev Ops Server (VSTS) which centralises all tagged technical debt PBIs into one result set. This pulls from all accessible backlogs. Customer: Link to internal queries - UKHO access only Data Portal: Applications: TODO: (ADD OTHER TEAMS) Note that a new Technical Debt dashboard is also under construction. Link: TBC","title":"Accessing Technical Debt"},{"location":"software-engineering-policies/TechnicalDebt/TechnicalDebtGuidance/#team-technical-debt-queries","text":"Each team should have its own query. This should be named Technical Debt - Basic and be stored in a Shared Queries\\Technical Debt folder. This will ensure consistency across all teams.","title":"Team Technical Debt queries"},{"location":"software-engineering-policies/TechnicalDebt/TechnicalDebtGuidance/#faq","text":"When is a defect (bug) technical debt? Defects (also known as bugs) are only considered technical debt if the decision has been made to accept or otherwise leave the defect unresolved. In this case the defect should be marked as technical debt following the provided guidance. If the defect is something intended to be fixed within current or next sprint, then do not mark it as technical debt.","title":"FAQ"},{"location":"software-engineering-policies/TechnicalDebt/TechnicalDebtGuidance/#points-of-contact","text":"Policy owner - \u200bMatthew Slade Policy Editor - Greg Zealley","title":"Points of Contact"},{"location":"software-engineering-policies/TechnicalDebt/TechnicalDebtPolicy/","text":"Technical Debt Policy Guide Each team MUST maintain a register of technical debt for their system. The team should consider all types of technical debt for inclusion, i.e.: Architectural \u2013 Tightly coupled systems (lots of criss-crossed dependencies), restrictive to extension or automation Functional \u2013 Low quality code or ineffective patterns Knowledge \u2013 lack of documentation or inaccessible documentation Automation \u2013 Lack of automated tasks forcing manual intervention (Testing, deployments, backup/restore) Testing \u2013 Unknown or unrecorded test scenarios, lack of test coverage Maintenance \u2013 Out-of-support products, usually leading to security vulnerabilities Security - Known and exploitable vulnerabilities See the Technical Debt Guidance for details on recording this. Verification The team's register of technical debt MUST be available for inspection. Each project should have an accessible and clear list of technical debt which should be available in the relevant area of either Azure DevOps or Azure DevOps Server. See the Technical Debt Guidance for details on building this capability. Additional Reading \u200b https://martinfowler.com/bliki/TechnicalDebt.html https://martinfowler.com/bliki/EstimatedInterest.html https://martinfowler.com/bliki/TechnicalDebtQuadrant.html Balancing technical debt \u2018Technical debt\u2019 is any compromise you make on quality to develop something quickly in the short-term. The extra effort (or \u2018interest\u2019) required to improve what you\u2019ve built is something you\u2019ll have to make (or \u2018pay back\u2019) in future. As your technical debt grows, your code will become more difficult to work with. This means adding new features will get harder, take longer and introduce more bugs. If you decide it\u2019s necessary to compromise on quality so you can deliver something quickly, your team needs to understand the implications of taking on technical debt. You should also agree a plan for keeping it under control. Learn one of the ways GOV.UK managed technical debt . Points of Contact Policy owner - Matthew Slade Policy editor - Greg Zealley","title":"Technical Debt Policy"},{"location":"software-engineering-policies/TechnicalDebt/TechnicalDebtPolicy/#technical-debt-policy","text":"","title":"Technical Debt Policy"},{"location":"software-engineering-policies/TechnicalDebt/TechnicalDebtPolicy/#guide","text":"Each team MUST maintain a register of technical debt for their system. The team should consider all types of technical debt for inclusion, i.e.: Architectural \u2013 Tightly coupled systems (lots of criss-crossed dependencies), restrictive to extension or automation Functional \u2013 Low quality code or ineffective patterns Knowledge \u2013 lack of documentation or inaccessible documentation Automation \u2013 Lack of automated tasks forcing manual intervention (Testing, deployments, backup/restore) Testing \u2013 Unknown or unrecorded test scenarios, lack of test coverage Maintenance \u2013 Out-of-support products, usually leading to security vulnerabilities Security - Known and exploitable vulnerabilities See the Technical Debt Guidance for details on recording this.","title":"Guide"},{"location":"software-engineering-policies/TechnicalDebt/TechnicalDebtPolicy/#verification","text":"The team's register of technical debt MUST be available for inspection. Each project should have an accessible and clear list of technical debt which should be available in the relevant area of either Azure DevOps or Azure DevOps Server. See the Technical Debt Guidance for details on building this capability.","title":"Verification"},{"location":"software-engineering-policies/TechnicalDebt/TechnicalDebtPolicy/#additional-reading","text":"\u200b https://martinfowler.com/bliki/TechnicalDebt.html https://martinfowler.com/bliki/EstimatedInterest.html https://martinfowler.com/bliki/TechnicalDebtQuadrant.html","title":"Additional Reading"},{"location":"software-engineering-policies/TechnicalDebt/TechnicalDebtPolicy/#balancing-technical-debt","text":"\u2018Technical debt\u2019 is any compromise you make on quality to develop something quickly in the short-term. The extra effort (or \u2018interest\u2019) required to improve what you\u2019ve built is something you\u2019ll have to make (or \u2018pay back\u2019) in future. As your technical debt grows, your code will become more difficult to work with. This means adding new features will get harder, take longer and introduce more bugs. If you decide it\u2019s necessary to compromise on quality so you can deliver something quickly, your team needs to understand the implications of taking on technical debt. You should also agree a plan for keeping it under control. Learn one of the ways GOV.UK managed technical debt .","title":"Balancing technical debt"},{"location":"software-engineering-policies/TechnicalDebt/TechnicalDebtPolicy/#points-of-contact","text":"Policy owner - Matthew Slade Policy editor - Greg Zealley","title":"Points of Contact"},{"location":"software-engineering-policies/TechnologyGovernance/TechnologyGovernance/","text":"Technology Governance This page describes how UKHO engineering teams govern change in the technology we use. Aims The aims of our tech governance process are to balance: Innovation Developer motivation VERSUS Growing our expertise Sharing skills Re-using code Mobility Further goals are to: Keep bureaucracy low Not undermine the role of solution architects Keep decision-making with experts Use of Tech Radars Each team must maintain a tech radar on our standard tool. The Lead Developer is accountable for making sure that this kept up to date. When a change is made to a radar, the Lead Developer must do the following: If a technology enters \"Assess\" they must update their team's tech radar If they wish to move a technology into \"Trial\" they must inform the Leads' meeting in order to get feedback. If they wish to move a technology into \"Adopt\" the must ask permission of the Leads' meeting. The decision is made by Lead Developers, by a simple majority. If they need to start using a technology urgently they may continue at risk until the next Leads' meeting. Solution Architecture and Architects This process only covers technology that is not the responsibility of Solution Architects (SAs). SAs will generally be concerned with building blocks (e.g. databases, network architecture, message transport, execution environments etc.), where Lead Developers will be concerned with lower level components, frameworks and development tools (e.g. programming languages, testing frameworks, UI frameworks, build tools). Sometimes responsibility is not clear-cut, so it is vital that Lead Developers maintain a dialogue with their SA about technology choice. Scope This technology governance process applies only to Software Engineering Teams. It does not apply to Data Engineering Teams.","title":"Technology Governance"},{"location":"software-engineering-policies/TechnologyGovernance/TechnologyGovernance/#technology-governance","text":"This page describes how UKHO engineering teams govern change in the technology we use.","title":"Technology Governance"},{"location":"software-engineering-policies/TechnologyGovernance/TechnologyGovernance/#aims","text":"The aims of our tech governance process are to balance: Innovation Developer motivation VERSUS Growing our expertise Sharing skills Re-using code Mobility Further goals are to: Keep bureaucracy low Not undermine the role of solution architects Keep decision-making with experts","title":"Aims"},{"location":"software-engineering-policies/TechnologyGovernance/TechnologyGovernance/#use-of-tech-radars","text":"Each team must maintain a tech radar on our standard tool. The Lead Developer is accountable for making sure that this kept up to date. When a change is made to a radar, the Lead Developer must do the following: If a technology enters \"Assess\" they must update their team's tech radar If they wish to move a technology into \"Trial\" they must inform the Leads' meeting in order to get feedback. If they wish to move a technology into \"Adopt\" the must ask permission of the Leads' meeting. The decision is made by Lead Developers, by a simple majority. If they need to start using a technology urgently they may continue at risk until the next Leads' meeting.","title":"Use of Tech Radars"},{"location":"software-engineering-policies/TechnologyGovernance/TechnologyGovernance/#solution-architecture-and-architects","text":"This process only covers technology that is not the responsibility of Solution Architects (SAs). SAs will generally be concerned with building blocks (e.g. databases, network architecture, message transport, execution environments etc.), where Lead Developers will be concerned with lower level components, frameworks and development tools (e.g. programming languages, testing frameworks, UI frameworks, build tools). Sometimes responsibility is not clear-cut, so it is vital that Lead Developers maintain a dialogue with their SA about technology choice.","title":"Solution Architecture and Architects"},{"location":"software-engineering-policies/TechnologyGovernance/TechnologyGovernance/#scope","text":"This technology governance process applies only to Software Engineering Teams. It does not apply to Data Engineering Teams.","title":"Scope"},{"location":"software-engineering-policies/ThirdPartyLicensing/ThirdPartyLicensingGuidance/","text":"Licensing of Third Party Libraries Guidance \u200b\u200b\u200b\u200bA great resource for finding clear and concise information on a very large range of licences is tl;drLegal . This site provides a useful comparison of licences by boiling each licence down into three columns: can, cannot and must. For a licence to be suitable for use at the UKHO, on the td;lrLegal page for the licence the: Can column must contain: Private use Commercial use Cannot column must not contain: Sublicence Must column must not contain: Disclose Source\u200b","title":"Licensing of Third Party Libraries Guidance"},{"location":"software-engineering-policies/ThirdPartyLicensing/ThirdPartyLicensingGuidance/#licensing-of-third-party-libraries-guidance","text":"\u200b\u200b\u200b\u200bA great resource for finding clear and concise information on a very large range of licences is tl;drLegal . This site provides a useful comparison of licences by boiling each licence down into three columns: can, cannot and must. For a licence to be suitable for use at the UKHO, on the td;lrLegal page for the licence the: Can column must contain: Private use Commercial use Cannot column must not contain: Sublicence Must column must not contain: Disclose Source\u200b","title":"Licensing of Third Party Libraries Guidance"},{"location":"software-engineering-policies/ThirdPartyLicensing/ThirdPartyLicensingPolicy/","text":"Licensing of Third Party Libraries Policy Background All UKHO software should make use of third party components, in preference to re-writing, wherever practical, but with special consideration with respect to the licence under which a component is released. The reason being that use of a component can legally impose conditions according to its the terms of its licence. For example: using a component released under the GLP-3 licence requires (amongst other things) that code linked to the component must be disclosed under a GPL 3.0 compatible licence.\u200b Guide All third party components used in UKHO software must have been released under an appropriate licence included in the following list of approved licences. All changes to third-party components must be reviewed by the team's Lead Engineer. If a third party component is proposed for use that has not been released under an approved licence and the licence appears to be reasonable, then the team's Lead engineer should propose that the licence be added to the list at the Lead engineer's meeting. If further clarity is needed then TPE management\u200b and the Legal department will be consulted. Allowlist of approved licenses\u200b MIT License (Expat) Apache License 2.0 (Apache-2.0) BSD 2-Clause License (FreeBSD/Simplified) BSD 3-Clause License (Revised) ISC License Boost Software License 1.0 (BSL-1.0) Free Public License 1.0.0 University of Illinois - NCSA Open Source License (NCSA) X11 License The JSON License BSD 0-Clause License (0BSD) Very Simple Public License (VSPL) The Don't Ask Me About It License Universal Permissive License 1.0 (UPL-1.0) Copyfree Open Innovation License 0.3 (COIL-0.3)\u200b Microsoft Public License (Ms-PL)\u200b Microsoft Shared Source Community License (MS-CL)\u200b\u200b Verify Verification will be automated. Contact the DDC team to find out how this works.","title":"Licensing of Third Party Libraries Policy"},{"location":"software-engineering-policies/ThirdPartyLicensing/ThirdPartyLicensingPolicy/#licensing-of-third-party-libraries-policy","text":"","title":"Licensing of Third Party Libraries Policy"},{"location":"software-engineering-policies/ThirdPartyLicensing/ThirdPartyLicensingPolicy/#background","text":"All UKHO software should make use of third party components, in preference to re-writing, wherever practical, but with special consideration with respect to the licence under which a component is released. The reason being that use of a component can legally impose conditions according to its the terms of its licence. For example: using a component released under the GLP-3 licence requires (amongst other things) that code linked to the component must be disclosed under a GPL 3.0 compatible licence.\u200b","title":"Background"},{"location":"software-engineering-policies/ThirdPartyLicensing/ThirdPartyLicensingPolicy/#guide","text":"All third party components used in UKHO software must have been released under an appropriate licence included in the following list of approved licences. All changes to third-party components must be reviewed by the team's Lead Engineer. If a third party component is proposed for use that has not been released under an approved licence and the licence appears to be reasonable, then the team's Lead engineer should propose that the licence be added to the list at the Lead engineer's meeting. If further clarity is needed then TPE management\u200b and the Legal department will be consulted.","title":"Guide"},{"location":"software-engineering-policies/ThirdPartyLicensing/ThirdPartyLicensingPolicy/#allowlist-of-approved-licenses","text":"MIT License (Expat) Apache License 2.0 (Apache-2.0) BSD 2-Clause License (FreeBSD/Simplified) BSD 3-Clause License (Revised) ISC License Boost Software License 1.0 (BSL-1.0) Free Public License 1.0.0 University of Illinois - NCSA Open Source License (NCSA) X11 License The JSON License BSD 0-Clause License (0BSD) Very Simple Public License (VSPL) The Don't Ask Me About It License Universal Permissive License 1.0 (UPL-1.0) Copyfree Open Innovation License 0.3 (COIL-0.3)\u200b Microsoft Public License (Ms-PL)\u200b Microsoft Shared Source Community License (MS-CL)\u200b\u200b","title":"Allowlist of approved licenses\u200b"},{"location":"software-engineering-policies/ThirdPartyLicensing/ThirdPartyLicensingPolicy/#verify","text":"Verification will be automated. Contact the DDC team to find out how this works.","title":"Verify"},{"location":"software-engineering-policies/UnitTesting/UnitTestingPolicy/","text":"Unit Testing Policy Guide All new non-trivial code must be covered with unit tests. Ultimately, the definition of 'non-trivial' is up to the team's Lead Engineer. Areas of code may be excluded from this rule (e.g. boiler-pate, or generated code) by the Lead Engineer. Where legacy code makes unit testing difficult, a pragmatic approach may be taken, governed by the Lead Engineer. Unit tests must be run as part of a CI process. A clear statement on unit testing must be part of written definition of done. Unit tests should be checked in at the same time as subject code and must be subject to code review. Teams should report on test coverage. Good coverage levels should be maintained and reductions in coverage justified. Verify The following artefacts are subject to verification: Team 'definition of done' documents Unit test coverage reports Change sets checked into source control, including unit tests","title":"Unit Testing Policy"},{"location":"software-engineering-policies/UnitTesting/UnitTestingPolicy/#unit-testing-policy","text":"","title":"Unit Testing Policy"},{"location":"software-engineering-policies/UnitTesting/UnitTestingPolicy/#guide","text":"All new non-trivial code must be covered with unit tests. Ultimately, the definition of 'non-trivial' is up to the team's Lead Engineer. Areas of code may be excluded from this rule (e.g. boiler-pate, or generated code) by the Lead Engineer. Where legacy code makes unit testing difficult, a pragmatic approach may be taken, governed by the Lead Engineer. Unit tests must be run as part of a CI process. A clear statement on unit testing must be part of written definition of done. Unit tests should be checked in at the same time as subject code and must be subject to code review. Teams should report on test coverage. Good coverage levels should be maintained and reductions in coverage justified.","title":"Guide"},{"location":"software-engineering-policies/UnitTesting/UnitTestingPolicy/#verify","text":"The following artefacts are subject to verification: Team 'definition of done' documents Unit test coverage reports Change sets checked into source control, including unit tests","title":"Verify"},{"location":"teams/proteus/","text":"Team Proteus Team Proteus is a delivery team currently working on the Data Platform. The team was formerly known as Peppermint but has changed considerably since then to include members from the former Glaciermint team and elsewhere. Members Brian Stenson - Delivery Manager Chris Hall-Palmer - Solution Architect Antony Derham - Lead/Expert Software Engineer Sean Siford - Senior Software Engineer Alex Bush - Senior Software Engineer Benjamin Morgan - Software Engineer Kevin Harragan - Software Engineer Andy Cleveland - Senior Test Engineer Principles Delivery efforts made by Team Proteus follow these principles. Use Continuous Delivery - Never build-up work to release Use Design System - All UI work should use components and patterns from the system Use Open Standards - Should be favoured over proprietary lock-in, at least for an interface Use PaaS/SaaS over IaaS/metal - Costs and scalability make these favourable Use cloud over on-prem - Government standard approach Use Slack for communications - More integrations, rest of gov uses Definition of Done Our definition of done must be followed for all work delivered. Sections may only apply to some work. All Work All acceptance criteria are met All tasks are marked as done The boundary of the VNet is not compromised All knowledge transfer complete across team Risks identified and added to RAID log Tech Debt considered and added to Tech Debt log Threat Modelling completed and captured Cost was considered in implementation Software Dev Code review complete Related pull requests merged Continuous integration pipeline written, passing and configured to run appropriate unit test, component test and build jobs [POST-AB#7553] Contract test behaviour written for Consumers, verified on Providers and passing in build pipeline. Pull Request linked to Azure Board items Appropriate unit/component tests written, passing and executed in build pipeline Container Apps Should have readiness probe Should expose appropriate monitoring endpoints Logging out to appropriate log service App deployment written and deployed by Flux Context paths in container context and rewrite rules in ingresses Migrations Tests remain passing after migration Tests re-written where appropriate","title":"Team Proteus"},{"location":"teams/proteus/#team-proteus","text":"Team Proteus is a delivery team currently working on the Data Platform. The team was formerly known as Peppermint but has changed considerably since then to include members from the former Glaciermint team and elsewhere.","title":"Team Proteus"},{"location":"teams/proteus/#members","text":"Brian Stenson - Delivery Manager Chris Hall-Palmer - Solution Architect Antony Derham - Lead/Expert Software Engineer Sean Siford - Senior Software Engineer Alex Bush - Senior Software Engineer Benjamin Morgan - Software Engineer Kevin Harragan - Software Engineer Andy Cleveland - Senior Test Engineer","title":"Members"},{"location":"teams/proteus/#principles","text":"Delivery efforts made by Team Proteus follow these principles. Use Continuous Delivery - Never build-up work to release Use Design System - All UI work should use components and patterns from the system Use Open Standards - Should be favoured over proprietary lock-in, at least for an interface Use PaaS/SaaS over IaaS/metal - Costs and scalability make these favourable Use cloud over on-prem - Government standard approach Use Slack for communications - More integrations, rest of gov uses","title":"Principles"},{"location":"teams/proteus/#definition-of-done","text":"Our definition of done must be followed for all work delivered. Sections may only apply to some work.","title":"Definition of Done"},{"location":"teams/proteus/#all-work","text":"All acceptance criteria are met All tasks are marked as done The boundary of the VNet is not compromised All knowledge transfer complete across team Risks identified and added to RAID log Tech Debt considered and added to Tech Debt log Threat Modelling completed and captured Cost was considered in implementation","title":"All Work"},{"location":"teams/proteus/#software-dev","text":"Code review complete Related pull requests merged Continuous integration pipeline written, passing and configured to run appropriate unit test, component test and build jobs [POST-AB#7553] Contract test behaviour written for Consumers, verified on Providers and passing in build pipeline. Pull Request linked to Azure Board items Appropriate unit/component tests written, passing and executed in build pipeline","title":"Software Dev"},{"location":"teams/proteus/#container-apps","text":"Should have readiness probe Should expose appropriate monitoring endpoints Logging out to appropriate log service App deployment written and deployed by Flux Context paths in container context and rewrite rules in ingresses","title":"Container Apps"},{"location":"teams/proteus/#migrations","text":"Tests remain passing after migration Tests re-written where appropriate","title":"Migrations"}]}