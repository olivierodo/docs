{"config":{"lang":["en"],"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"This site provides documentation around general software engineering behaviors and processes at the UKHO.","title":"Home"},{"location":"open-source-governance-checklist/","text":"Open Source Governance Checklist Identifer (e.g. repo name) Technical owner The lead responsible for the repo Description of functionality Must contain enough detail to allow assessment of whether it contains intellectual property that we need to protect. Security How has security been considered? Has application code been scanned with security tooling and issues corrected? This must be done for code supported by our SAST tooling Has the application been threat modelled during development and the evidence captured within TFS (or similar)? Threat modelling must be carried out for all application code, this evidence needs to be reviewed by expert or lead engineer Has the code been double-checked for security credentials, keys etc.? Give details of who has double-checked the code Is a disclosure process in place and linked from the codebase? Use the standard disclose text Quality How has code quality been considered? Does the quality of the code reflect our ambitions for high quality code, in terms of being clean, well-tested etc. Correct answer = yes! Has all code been reviewed? Correct answer = yes! Has the open-sourced codebase had its history removed? If not, have all check-in comments been reviewed? Describe the steps taken to prevent inadvertent disclosed in comments / etc. Does the codebase contain all documentation and configuration elements required to build and verify the software? A user should be able to build / run tests etc. based on what is in the repo Contributions Has the handling of contributions considered? Are contributions explicitly encouraged in the codebase For example, have you enabled the use of issues and provided a CONTRIBUTING.md? Think very carefully before inviting change, as you will then have to answer 'yes' to the next two questions Is a process for responding to issues defined? Describe in detail the process by which you are going to ensure that issues are responded to in a timely manner How is this process resourced? Describe how you have made sure that time is available to carry out the process described above. For example, has the relevant manager agreed for time for time to spent on this?","title":"Open Source Governance Checklist"},{"location":"open-source-governance-checklist/#open-source-governance-checklist","text":"","title":"Open Source Governance Checklist"},{"location":"open-source-governance-checklist/#identifer","text":"(e.g. repo name)","title":"Identifer"},{"location":"open-source-governance-checklist/#technical-owner","text":"The lead responsible for the repo","title":"Technical owner"},{"location":"open-source-governance-checklist/#description-of-functionality","text":"Must contain enough detail to allow assessment of whether it contains intellectual property that we need to protect.","title":"Description of functionality"},{"location":"open-source-governance-checklist/#security","text":"How has security been considered? Has application code been scanned with security tooling and issues corrected? This must be done for code supported by our SAST tooling Has the application been threat modelled during development and the evidence captured within TFS (or similar)? Threat modelling must be carried out for all application code, this evidence needs to be reviewed by expert or lead engineer Has the code been double-checked for security credentials, keys etc.? Give details of who has double-checked the code Is a disclosure process in place and linked from the codebase? Use the standard disclose text","title":"Security"},{"location":"open-source-governance-checklist/#quality","text":"How has code quality been considered? Does the quality of the code reflect our ambitions for high quality code, in terms of being clean, well-tested etc. Correct answer = yes! Has all code been reviewed? Correct answer = yes! Has the open-sourced codebase had its history removed? If not, have all check-in comments been reviewed? Describe the steps taken to prevent inadvertent disclosed in comments / etc. Does the codebase contain all documentation and configuration elements required to build and verify the software? A user should be able to build / run tests etc. based on what is in the repo","title":"Quality"},{"location":"open-source-governance-checklist/#contributions","text":"Has the handling of contributions considered? Are contributions explicitly encouraged in the codebase For example, have you enabled the use of issues and provided a CONTRIBUTING.md? Think very carefully before inviting change, as you will then have to answer 'yes' to the next two questions Is a process for responding to issues defined? Describe in detail the process by which you are going to ensure that issues are responded to in a timely manner How is this process resourced? Describe how you have made sure that time is available to carry out the process described above. For example, has the relevant manager agreed for time for time to spent on this?","title":"Contributions"},{"location":"linux-workstations/","text":"Introduction This page attempts to outline how you can set up your linux workstation VM to run under VMWare Player Pro V15.0.2 or greater. Obtaining VMWare player If your laptop doesn't have VMware player installed, in the first instance open Software center from the start menu and see if it is available. If it is, install it from here. If it is not available for you in Software Center, speak to service desk (or ideally Matt Page, as he managed this rollout originally) to have this added to your software center. Obtaining the VM image The first step of the process is to access the image which is held on: \\\\\\\\business.ukho.gov.uk\\dfs\\Prod_Prod\\Linux Workstation\\OVF Image U:\\Prod_Prod\\Linux Workstation\\OVF Image and copy this directory to your laptop. Once copied, start up VMware Player Pro and on the \"Home Screen\" select the option \"Open a Virtual Machine\": Please use the file browser displayed to select the location where the image was copied. You will recieve a dialog referring to a mismatch of versions, this is a known bug in VMWare workstation, press Retry and the process will continue. You will be asked for a name and a storage path - please ensure that the name of the VM image is: UKHO CentOS 7 Please ensure that the storage path of the VM image is: C:\\VirtualMachines\\DevVM Danger It is important that the specified location is used for compliance with SyOps! Settings for the VM image Ensure the 'tab' for the virtual machine in the UI is selected and click on the 'Edit Virtual Machine Settings' link on the left-hand-side of the page: In the window displayed, select the 'Network Adapter' entry on the left hand side. In the right hand side of the same window, ensure that the following settings are selected under \"Network connection\": \"Bridged\" mode is selected Replicate physical network connection state is selected. Click OK when done. Installation - Initial Packages Start-up the Virtual Machine by selecting the \"Power On\" (Ctrl+B) option. You will shortly see a screen having the option \"Install Centos 7 - With Hydro Kickstart\". Press Enter to continue: You will then see a screen which displays \"Press to start the installation process\" - either press Enter (or wait and the install should start automatically. This starts the kickstart installation process. After some minutes (Approx. 7mins, Go grab a lengthy coffee/tea/soft drink) you should see the following: Press return. You will get a message box stating that the machine has halted. Select the \"Restart Guest\" option (or press Ctrl+R) on the VM power settings. Warning Don't try this on UKHO_LAPTOPS wifi, as the setup will not be able to access GitHub After a few minutes the VM should boot and you should be presented with a login prompt: Enter the following: For username: root For password: See password in PMP under \"Mint VMWare Dev Workstation Root\" Example joe.bloggs jane.doe Username constraints The username must be: Lower-case Alphabetic No spaces Next, you will be asked for your full name, which should be alphabetic Next, you will be asked for your password: Warning There are restrictions on the password you can use; passwords which are too lenient will be rejected. The set of interactions (for a user named jane.doe) might look as follows: The installation process will then continue, and you should see a login manager displayed after some time: Press space, this will display a set of users you can log in as (initially, this is the user you created earlier): Login by selecting the name of the user you entered earlier and enter the password, you should be presented with a screen as follows: Initially, this looks a little spartan! You can get an initial desktop created by selecting the 'Use Default Config' option - you should then see something as follows: Installing development utils Once you have logged in, if you wish to install maven, Java 8 Sdk and Yarn please go to a terminal and type: cd ~/linux-workstation/ansible sudo ansible-playbook -i inventories/laptop-vm/hosts --vault-password-file=$HOME/.config/linux-workstation/.vaultpass development.yml This should then install the basic utilities needed. Installing Citrix Receiver on Linux See the instructions here Known Issues Bug Currently, the VPN on the Linux VM has an issue if you do the following: Suspend the Linux VM when the laptop is connected to the network via USB-C Resume the Linux VM when the laptop is connected to the network via WiFi Or: Suspend the Linux VM when the laptop is connected to the network via WiFi Resume the Linux VM when the laptop is connected to the network via USB-C Alternatively, keeping the VM un-suspended whilst changing networks avoids this scenario. The issue is that the VPN on the Linux VM never seems to be able to reconnect successfully - the best way around this is to reboot the VM.","title":"Introduction"},{"location":"linux-workstations/#introduction","text":"This page attempts to outline how you can set up your linux workstation VM to run under VMWare Player Pro V15.0.2 or greater.","title":"Introduction"},{"location":"linux-workstations/#obtaining-vmware-player","text":"If your laptop doesn't have VMware player installed, in the first instance open Software center from the start menu and see if it is available. If it is, install it from here. If it is not available for you in Software Center, speak to service desk (or ideally Matt Page, as he managed this rollout originally) to have this added to your software center.","title":"Obtaining VMWare player"},{"location":"linux-workstations/#obtaining-the-vm-image","text":"The first step of the process is to access the image which is held on: \\\\\\\\business.ukho.gov.uk\\dfs\\Prod_Prod\\Linux Workstation\\OVF Image U:\\Prod_Prod\\Linux Workstation\\OVF Image and copy this directory to your laptop. Once copied, start up VMware Player Pro and on the \"Home Screen\" select the option \"Open a Virtual Machine\": Please use the file browser displayed to select the location where the image was copied. You will recieve a dialog referring to a mismatch of versions, this is a known bug in VMWare workstation, press Retry and the process will continue. You will be asked for a name and a storage path - please ensure that the name of the VM image is: UKHO CentOS 7 Please ensure that the storage path of the VM image is: C:\\VirtualMachines\\DevVM Danger It is important that the specified location is used for compliance with SyOps!","title":"Obtaining the VM image"},{"location":"linux-workstations/#settings-for-the-vm-image","text":"Ensure the 'tab' for the virtual machine in the UI is selected and click on the 'Edit Virtual Machine Settings' link on the left-hand-side of the page: In the window displayed, select the 'Network Adapter' entry on the left hand side. In the right hand side of the same window, ensure that the following settings are selected under \"Network connection\": \"Bridged\" mode is selected Replicate physical network connection state is selected. Click OK when done.","title":"Settings for the VM image"},{"location":"linux-workstations/#installation-initial-packages","text":"Start-up the Virtual Machine by selecting the \"Power On\" (Ctrl+B) option. You will shortly see a screen having the option \"Install Centos 7 - With Hydro Kickstart\". Press Enter to continue: You will then see a screen which displays \"Press to start the installation process\" - either press Enter (or wait and the install should start automatically. This starts the kickstart installation process. After some minutes (Approx. 7mins, Go grab a lengthy coffee/tea/soft drink) you should see the following: Press return. You will get a message box stating that the machine has halted. Select the \"Restart Guest\" option (or press Ctrl+R) on the VM power settings. Warning Don't try this on UKHO_LAPTOPS wifi, as the setup will not be able to access GitHub After a few minutes the VM should boot and you should be presented with a login prompt: Enter the following: For username: root For password: See password in PMP under \"Mint VMWare Dev Workstation Root\" Example joe.bloggs jane.doe Username constraints The username must be: Lower-case Alphabetic No spaces Next, you will be asked for your full name, which should be alphabetic Next, you will be asked for your password: Warning There are restrictions on the password you can use; passwords which are too lenient will be rejected. The set of interactions (for a user named jane.doe) might look as follows: The installation process will then continue, and you should see a login manager displayed after some time: Press space, this will display a set of users you can log in as (initially, this is the user you created earlier): Login by selecting the name of the user you entered earlier and enter the password, you should be presented with a screen as follows: Initially, this looks a little spartan! You can get an initial desktop created by selecting the 'Use Default Config' option - you should then see something as follows:","title":"Installation - Initial Packages"},{"location":"linux-workstations/#installing-development-utils","text":"Once you have logged in, if you wish to install maven, Java 8 Sdk and Yarn please go to a terminal and type: cd ~/linux-workstation/ansible sudo ansible-playbook -i inventories/laptop-vm/hosts --vault-password-file=$HOME/.config/linux-workstation/.vaultpass development.yml This should then install the basic utilities needed.","title":"Installing development utils"},{"location":"linux-workstations/#installing-citrix-receiver-on-linux","text":"See the instructions here","title":"Installing Citrix Receiver on Linux"},{"location":"linux-workstations/#known-issues","text":"Bug Currently, the VPN on the Linux VM has an issue if you do the following: Suspend the Linux VM when the laptop is connected to the network via USB-C Resume the Linux VM when the laptop is connected to the network via WiFi Or: Suspend the Linux VM when the laptop is connected to the network via WiFi Resume the Linux VM when the laptop is connected to the network via USB-C Alternatively, keeping the VM un-suspended whilst changing networks avoids this scenario. The issue is that the VPN on the Linux VM never seems to be able to reconnect successfully - the best way around this is to reboot the VM.","title":"Known Issues"},{"location":"linux-workstations/citrix/","text":"Installing Citrix Receiver on Linux In order to access the UKHO Citrix desktop, your computer needs to have Citrix Receiver installed. On Windows, this is a straightforward, automatic process. On Linux, it may require a manual install and some configuration. If you get this error, then follow the instructions on this page. Download and install Citrix Receiver Open a browser and navigate to the Citrix Receiver for Linux download page Navigate to the bottom of the page and download the relevant option from Debian Packages or RedHat packages. Both Web client and Full client seem to work Use your package manager (apt/yum/dnf) to install the downloaded package In the instructions below, the install location is referred to as $CITRIX_HOME. Normally this will be /opt/Citrix/ICAClient but YMMV Configure certificates For some reason, Citrix Receiver for Linux does not work out of the box on Linux. This appears to be down to not shipping with the correct certificates. The steps below describe how to correct this for Ubuntu and other distros. Be warned, however, that the instructions for all distros may require access to a working Ubuntu install. Ubuntu These instructions were taken from from this AskUbuntu post In short, telling Citrix Receiver to use the default CA certificates that ship with Ubuntu works just fine. cd $CITRIX_HOME/keystore sudo mv cacerts cacerts.original sudo ln -s /etc/ssl/certs cacerts cd util sudo ./ctx_rehash Fedora Unfortunately the default certificates that ship with Fedora are not sufficient. These are stored in /etc/pki/ca-trust/extracted/pem and the instructions above do not work for the certificates in this directory. So, it is necessary to grab the certificates from a working Ubuntu install and manually paste them into your Fedora installation. If you don't have access to a Ubuntu install, find someone that does and ask them nicely to follow the first set of instructions below. Get the certificates from an Ubuntu install Log into the Ubuntu machine then cd /etc/ssl/certs rsync -av --copy-links . ~/cacerts cd ~/cacerts tar cvzf ../cacerts.tar.gz . This will create a file called cacerts.tar.gz in the home directory on the Ubuntu machine. This file needs to be transferred to the home directory on the Fedora machine via sftp or other means. Install the certificates on the Fedora machine cd $CITRIX_HOME/keystore sudo mv cacerts cacerts.original sudo mkdir cacerts cd cacerts tar xf ~/cacerts.tar.gz cd ../util sudo ./ctx_rehash Et voil\u00e0 Other distros Try linking the $CITRIX_HOME/keystore/cacerts directory to the main CA certificates directory on your distro. If this doesn't work, the instructions for Fedora almost certainly will. TODO It is unlikely that all of the certificates from the Ubuntu distro are required to make Citrix Receiver work. It would be useful to identify the one(s) that are necessary and revise the instructions to address that certificate alone.","title":"Installing Citrix Receiver on Linux"},{"location":"linux-workstations/citrix/#installing-citrix-receiver-on-linux","text":"In order to access the UKHO Citrix desktop, your computer needs to have Citrix Receiver installed. On Windows, this is a straightforward, automatic process. On Linux, it may require a manual install and some configuration. If you get this error, then follow the instructions on this page.","title":"Installing Citrix Receiver on Linux"},{"location":"linux-workstations/citrix/#download-and-install-citrix-receiver","text":"Open a browser and navigate to the Citrix Receiver for Linux download page Navigate to the bottom of the page and download the relevant option from Debian Packages or RedHat packages. Both Web client and Full client seem to work Use your package manager (apt/yum/dnf) to install the downloaded package In the instructions below, the install location is referred to as $CITRIX_HOME. Normally this will be /opt/Citrix/ICAClient but YMMV","title":"Download and install Citrix Receiver"},{"location":"linux-workstations/citrix/#configure-certificates","text":"For some reason, Citrix Receiver for Linux does not work out of the box on Linux. This appears to be down to not shipping with the correct certificates. The steps below describe how to correct this for Ubuntu and other distros. Be warned, however, that the instructions for all distros may require access to a working Ubuntu install.","title":"Configure certificates"},{"location":"linux-workstations/citrix/#ubuntu","text":"These instructions were taken from from this AskUbuntu post In short, telling Citrix Receiver to use the default CA certificates that ship with Ubuntu works just fine. cd $CITRIX_HOME/keystore sudo mv cacerts cacerts.original sudo ln -s /etc/ssl/certs cacerts cd util sudo ./ctx_rehash","title":"Ubuntu"},{"location":"linux-workstations/citrix/#fedora","text":"Unfortunately the default certificates that ship with Fedora are not sufficient. These are stored in /etc/pki/ca-trust/extracted/pem and the instructions above do not work for the certificates in this directory. So, it is necessary to grab the certificates from a working Ubuntu install and manually paste them into your Fedora installation. If you don't have access to a Ubuntu install, find someone that does and ask them nicely to follow the first set of instructions below.","title":"Fedora"},{"location":"linux-workstations/citrix/#get-the-certificates-from-an-ubuntu-install","text":"Log into the Ubuntu machine then cd /etc/ssl/certs rsync -av --copy-links . ~/cacerts cd ~/cacerts tar cvzf ../cacerts.tar.gz . This will create a file called cacerts.tar.gz in the home directory on the Ubuntu machine. This file needs to be transferred to the home directory on the Fedora machine via sftp or other means.","title":"Get the certificates from an Ubuntu install"},{"location":"linux-workstations/citrix/#install-the-certificates-on-the-fedora-machine","text":"cd $CITRIX_HOME/keystore sudo mv cacerts cacerts.original sudo mkdir cacerts cd cacerts tar xf ~/cacerts.tar.gz cd ../util sudo ./ctx_rehash Et voil\u00e0","title":"Install the certificates on the Fedora machine"},{"location":"linux-workstations/citrix/#other-distros","text":"Try linking the $CITRIX_HOME/keystore/cacerts directory to the main CA certificates directory on your distro. If this doesn't work, the instructions for Fedora almost certainly will.","title":"Other distros"},{"location":"linux-workstations/citrix/#todo","text":"It is unlikely that all of the certificates from the Ubuntu distro are required to make Citrix Receiver work. It would be useful to identify the one(s) that are necessary and revise the instructions to address that certificate alone.","title":"TODO"},{"location":"open-guidance/contributing-details/","text":"CONTRIBUTING.md Details Provides potential contributors the useful information on how to begin contributing to the project and increase the likelihood of their contribution being accepted. May contain links to the Code of Conduct, purpose/aim of the project, code standards, how to run/build/test etc. Overview The CONTRIBUTING.md is the file that users will normally read before contributing to a project and it must provide them with the information needed to contribute to the project in a style which the owner wants. The CONTRIBUTING.md allows the owner to specify the standards and processes they want contributors to use thus setting the rules for everyone, including the rules for how the owner treats contributors. The CONTRIBUTING.md is (obviously) written in Markdown and placed in the root directory of the repository. If a repo does not have a CONTRIBUTING.md then we do not class it as \"open\" and the owner may not want external contributions Must Have Repo owner (Can be team or individual) Contact details for owner (Email) A welcome/intro paragraph. May Have Link to documentation Link to issue tracker Instructions on how to run tests locally Instructions on how to develop code locally Pull Request process Style guide Where a user can find help Security issue reporting How to report bugs How to request a feature Code of Conduct The recognition model(how people are thanked) Philosophy of the project Versioning process Commit message guidance Definition of done Roadmap Branching conventions Anything else that seems relevant Resources Mozilla tutorial - Good guide on creating/thinking about writing a CONTRIBUTING.MD Template contributing.md - Example base template of a CONTRIBUTING.MD Understanding the InnerSource Checklist - pg. 25 - Creating good house rules for guests: Writing contributing agreements Examples Atom OpenGovernment Rails GitLab","title":"CONTRIBUTING.md Details"},{"location":"open-guidance/contributing-details/#contributingmd-details","text":"Provides potential contributors the useful information on how to begin contributing to the project and increase the likelihood of their contribution being accepted. May contain links to the Code of Conduct, purpose/aim of the project, code standards, how to run/build/test etc.","title":"CONTRIBUTING.md Details"},{"location":"open-guidance/contributing-details/#overview","text":"The CONTRIBUTING.md is the file that users will normally read before contributing to a project and it must provide them with the information needed to contribute to the project in a style which the owner wants. The CONTRIBUTING.md allows the owner to specify the standards and processes they want contributors to use thus setting the rules for everyone, including the rules for how the owner treats contributors. The CONTRIBUTING.md is (obviously) written in Markdown and placed in the root directory of the repository. If a repo does not have a CONTRIBUTING.md then we do not class it as \"open\" and the owner may not want external contributions","title":"Overview"},{"location":"open-guidance/contributing-details/#must-have","text":"Repo owner (Can be team or individual) Contact details for owner (Email) A welcome/intro paragraph.","title":"Must Have"},{"location":"open-guidance/contributing-details/#may-have","text":"Link to documentation Link to issue tracker Instructions on how to run tests locally Instructions on how to develop code locally Pull Request process Style guide Where a user can find help Security issue reporting How to report bugs How to request a feature Code of Conduct The recognition model(how people are thanked) Philosophy of the project Versioning process Commit message guidance Definition of done Roadmap Branching conventions Anything else that seems relevant","title":"May Have"},{"location":"open-guidance/contributing-details/#resources","text":"Mozilla tutorial - Good guide on creating/thinking about writing a CONTRIBUTING.MD Template contributing.md - Example base template of a CONTRIBUTING.MD Understanding the InnerSource Checklist - pg. 25 - Creating good house rules for guests: Writing contributing agreements","title":"Resources"},{"location":"open-guidance/contributing-details/#examples","text":"Atom OpenGovernment Rails GitLab","title":"Examples"},{"location":"open-guidance/migration/","text":"Migrating an existing project As part of the Open Source Governance Checklist , it is a requirement that sensitive data has been removed from the repository history. This can be acheived with Git's filter-branch command to walk over the history of a branch and apply changes throughout. Remove lines from commit messages Gerrit leaves a Commit-Id line in every commit message made. To remove these, the --msg-filter can be used as follows: git filter-branch -f --msg-filter 'sed \"/Change-Id/ d\"' -- --all Substitute Change-Id for any string to match an entire line and delete from all commit message in the branch. Remove directories/files from branch trees To remove directories from the entire history of a branch, use the --tree-filter as follows: git filter-branch --tree-filter \"rm -rf dev\" --prune-empty HEAD","title":"Migrating an existing project"},{"location":"open-guidance/migration/#migrating-an-existing-project","text":"As part of the Open Source Governance Checklist , it is a requirement that sensitive data has been removed from the repository history. This can be acheived with Git's filter-branch command to walk over the history of a branch and apply changes throughout.","title":"Migrating an existing project"},{"location":"open-guidance/migration/#remove-lines-from-commit-messages","text":"Gerrit leaves a Commit-Id line in every commit message made. To remove these, the --msg-filter can be used as follows: git filter-branch -f --msg-filter 'sed \"/Change-Id/ d\"' -- --all Substitute Change-Id for any string to match an entire line and delete from all commit message in the branch.","title":"Remove lines from commit messages"},{"location":"open-guidance/migration/#remove-directoriesfiles-from-branch-trees","text":"To remove directories from the entire history of a branch, use the --tree-filter as follows: git filter-branch --tree-filter \"rm -rf dev\" --prune-empty HEAD","title":"Remove directories/files from branch trees"},{"location":"open-guidance/open-guidance/","text":"Open-Guidance Guidance for what basic documents must be within a repo for open software, aimed to create a common and familiar style. Background This repository is to provide guidance on what must exist in open repos as a minimum with the aim of enabling people to feel familiar when browsing, find information and to become productive if contributing back. Overview All open repos must contain the following: A CONTRIBUTING.md within the root folder. The file is a marker to people that this repo will accept changes from outside of the team. It must contain the processes that the owner of the repository needs people to follow when contributing to the project. Guidance on how to write a CONTRIBUTING.md . A LICENSE within the root folder. This will be MIT in most cases. Having a license is critical as it states what others are allowed to do with the code. A README.md within the root folder. This must contain some basic useful information for the user allowing them to quickly understand the project and get started using it. It isn't the place for extensive documentation. Guidance on what should be in a README.md can be found . A continuous integration build process. Each time a pull request is submitted a build is triggered which will run all the tests to ensure the change does not break any features. This will also give the contributor feedback and confidence that there code will work! Above is the minimum for an what open repo must contain, other useful things a repo may contain: Code of Conduct Code of Conduct from contributor covenant . Changelog Keep a changelog . TDL (Technical decision log) Documenting Architecture Decisions . Architecture Decision Records In action presentation . Scripts script/bootstrap - Configure the machine ready to develop for this repo(pull down and configure dependencies etc.) script/dev - Start any background processes/servers needed during development script/test - Run all the tests for this repo. Code Contribution Process All open repos must be using git and code contributions should be made using the standard Fork and Pull Request approach(or equivalent). Rough guidance on how to make a pull request . Terminology Contributing - This is more than just adding code, this also include creating issues/bug reports, asking questions, improving documentation. Contributor - This refers to anyone who has added to this project, including filing issues. Repo - A git repository and the associated Github/lab with it. Pull Request - How a contributor asks the owner of a repository to accept their contribution. The owner \"pulls\" the contribution into the main repository. Inspiration Alpha Gov - Open Standards","title":"Open-Guidance"},{"location":"open-guidance/open-guidance/#open-guidance","text":"Guidance for what basic documents must be within a repo for open software, aimed to create a common and familiar style.","title":"Open-Guidance"},{"location":"open-guidance/open-guidance/#background","text":"This repository is to provide guidance on what must exist in open repos as a minimum with the aim of enabling people to feel familiar when browsing, find information and to become productive if contributing back.","title":"Background"},{"location":"open-guidance/open-guidance/#overview","text":"All open repos must contain the following: A CONTRIBUTING.md within the root folder. The file is a marker to people that this repo will accept changes from outside of the team. It must contain the processes that the owner of the repository needs people to follow when contributing to the project. Guidance on how to write a CONTRIBUTING.md . A LICENSE within the root folder. This will be MIT in most cases. Having a license is critical as it states what others are allowed to do with the code. A README.md within the root folder. This must contain some basic useful information for the user allowing them to quickly understand the project and get started using it. It isn't the place for extensive documentation. Guidance on what should be in a README.md can be found . A continuous integration build process. Each time a pull request is submitted a build is triggered which will run all the tests to ensure the change does not break any features. This will also give the contributor feedback and confidence that there code will work! Above is the minimum for an what open repo must contain, other useful things a repo may contain: Code of Conduct Code of Conduct from contributor covenant . Changelog Keep a changelog . TDL (Technical decision log) Documenting Architecture Decisions . Architecture Decision Records In action presentation . Scripts script/bootstrap - Configure the machine ready to develop for this repo(pull down and configure dependencies etc.) script/dev - Start any background processes/servers needed during development script/test - Run all the tests for this repo.","title":"Overview"},{"location":"open-guidance/open-guidance/#code-contribution-process","text":"All open repos must be using git and code contributions should be made using the standard Fork and Pull Request approach(or equivalent). Rough guidance on how to make a pull request .","title":"Code Contribution Process"},{"location":"open-guidance/open-guidance/#terminology","text":"Contributing - This is more than just adding code, this also include creating issues/bug reports, asking questions, improving documentation. Contributor - This refers to anyone who has added to this project, including filing issues. Repo - A git repository and the associated Github/lab with it. Pull Request - How a contributor asks the owner of a repository to accept their contribution. The owner \"pulls\" the contribution into the main repository.","title":"Terminology"},{"location":"open-guidance/open-guidance/#inspiration","text":"Alpha Gov - Open Standards","title":"Inspiration"},{"location":"open-guidance/pull-request-details/","text":"Making a Pull Request This is a suggested process, individual repositories will want pull requests to be constructed differently. Check a repos \"CONTRIBUTING.md\" for specific guidelines and ask if you are unsure! Suggested Pull Request Process Clone repository locally Create a new branch off the master branch Make changes with clear commits following good commit guidelines Pull down any changes that might have happened whilst you were making your changes and merge them in locally. Push the branch you made your changes on up to the server Create a pull request from the branch into master A build will be triggered and go green before a PR is accepted The changes will be reviewed by the owners of the repo and can suggest changes Make suggested changes and push them up to the branch again Owner of the repository will accept and merge your changes into master NOTE: If you are making a large feature/architectural changes, open an issue first and discuss it with the owner as they might have additional insights or don't think it is appropriate for the repo. Resources Standard Fork & Pull Request Workflow How To Write The Perfect Pull Request Making A Pull Request GitHub Flow - Really high level Atomic Commits","title":"Making a Pull Request"},{"location":"open-guidance/pull-request-details/#making-a-pull-request","text":"This is a suggested process, individual repositories will want pull requests to be constructed differently. Check a repos \"CONTRIBUTING.md\" for specific guidelines and ask if you are unsure!","title":"Making a Pull Request"},{"location":"open-guidance/pull-request-details/#suggested-pull-request-process","text":"Clone repository locally Create a new branch off the master branch Make changes with clear commits following good commit guidelines Pull down any changes that might have happened whilst you were making your changes and merge them in locally. Push the branch you made your changes on up to the server Create a pull request from the branch into master A build will be triggered and go green before a PR is accepted The changes will be reviewed by the owners of the repo and can suggest changes Make suggested changes and push them up to the branch again Owner of the repository will accept and merge your changes into master NOTE: If you are making a large feature/architectural changes, open an issue first and discuss it with the owner as they might have additional insights or don't think it is appropriate for the repo.","title":"Suggested Pull Request Process"},{"location":"open-guidance/pull-request-details/#resources","text":"Standard Fork & Pull Request Workflow How To Write The Perfect Pull Request Making A Pull Request GitHub Flow - Really high level Atomic Commits","title":"Resources"},{"location":"open-guidance/readme-details/","text":"README.md Details A README.md must provide a user/contributor with a brief summary of the repo and should contain installation steps, basic usage and it's features. The guidelines here are aimed to be applicable regardless of whether the repo is a runnable program, library or framework. Overview The README.md is the first file people look in when evaluating whether to use or contribute to a repo, so when writing them ensure the information is relevant to someone who doesn't know your repo and doesn't care about it. You need to provide just enough information for someone to understand the goals of the repo, download it and get started using it. The README.md is (obviously) written in Markdown and placed in the root directory of the repository. It is not the place for detailed documentation, keep that elsewhere and include links to it. The README.md should also feel familiar, you have probably looked at hundreds of README.md's over the year without realising, try to keep yours in the same style so it feels natural to the reader. Must Have Title of project Introductory paragraph Caveats/Limitations Should Have Demo/Usage (Only very basic) Installation Description of features (this can be rolled into the introductory paragraph) May Have Build badges Single sentence summary Pictures/GIFs How to run the tests How to run the application Link to the license Example HTTP requests/responses (if that kind of repo) Version/Changelog Table of Contents Link to documentation Background context, why have you written this Team members/contributors. Anything else that seems relevant Resources Awesome Readme - An \"awesome-list\" for readme Art Of Readme - Aimed at Node projects but lots of relevant information and philosophy of writing good readme's. GOV.UK Readme Guidance incl Template - A bit heavyweight compared to other advice but relevant and useful. Template Examples Electron-Markdownify HTTPie - Bit long, all documentation is in it. NSGIF Gaze","title":"README.md Details"},{"location":"open-guidance/readme-details/#readmemd-details","text":"A README.md must provide a user/contributor with a brief summary of the repo and should contain installation steps, basic usage and it's features. The guidelines here are aimed to be applicable regardless of whether the repo is a runnable program, library or framework.","title":"README.md Details"},{"location":"open-guidance/readme-details/#overview","text":"The README.md is the first file people look in when evaluating whether to use or contribute to a repo, so when writing them ensure the information is relevant to someone who doesn't know your repo and doesn't care about it. You need to provide just enough information for someone to understand the goals of the repo, download it and get started using it. The README.md is (obviously) written in Markdown and placed in the root directory of the repository. It is not the place for detailed documentation, keep that elsewhere and include links to it. The README.md should also feel familiar, you have probably looked at hundreds of README.md's over the year without realising, try to keep yours in the same style so it feels natural to the reader.","title":"Overview"},{"location":"open-guidance/readme-details/#must-have","text":"Title of project Introductory paragraph Caveats/Limitations","title":"Must Have"},{"location":"open-guidance/readme-details/#should-have","text":"Demo/Usage (Only very basic) Installation Description of features (this can be rolled into the introductory paragraph)","title":"Should Have"},{"location":"open-guidance/readme-details/#may-have","text":"Build badges Single sentence summary Pictures/GIFs How to run the tests How to run the application Link to the license Example HTTP requests/responses (if that kind of repo) Version/Changelog Table of Contents Link to documentation Background context, why have you written this Team members/contributors. Anything else that seems relevant","title":"May Have"},{"location":"open-guidance/readme-details/#resources","text":"Awesome Readme - An \"awesome-list\" for readme Art Of Readme - Aimed at Node projects but lots of relevant information and philosophy of writing good readme's. GOV.UK Readme Guidance incl Template - A bit heavyweight compared to other advice but relevant and useful. Template","title":"Resources"},{"location":"open-guidance/readme-details/#examples","text":"Electron-Markdownify HTTPie - Bit long, all documentation is in it. NSGIF Gaze","title":"Examples"},{"location":"quality-assurance/","text":"UKHO Test Community Docs These documents detail how we work as a Test Community at UKHO. We aim to provide a framework for our testers, developers and community engineers to enable them to deliver testing that supports our desire to build and release good software quickly. Where to start If you read nothing else, then read these three things: Our Test Automation Strategy contains details of the UKHO approach to testing, including the Test Pyramid and Principles of Test Automation The UKHO Delivery Quality Charter assists delivery teams in adopting practices proven to improve quality of delivery The BDD Reference Page contains information on BDD to aid our use at UKHO Contents Vision Acceptance Criteria BDD Code Standards Open Source Repositories Tester Roles Test Automation Strategy Test Policy Test Principles Test Standards Test Strategy Test Tools UKHO Delivery Quality Charter","title":"UKHO Test Community Docs"},{"location":"quality-assurance/#ukho-test-community-docs","text":"These documents detail how we work as a Test Community at UKHO. We aim to provide a framework for our testers, developers and community engineers to enable them to deliver testing that supports our desire to build and release good software quickly.","title":"UKHO Test Community Docs"},{"location":"quality-assurance/#where-to-start","text":"If you read nothing else, then read these three things: Our Test Automation Strategy contains details of the UKHO approach to testing, including the Test Pyramid and Principles of Test Automation The UKHO Delivery Quality Charter assists delivery teams in adopting practices proven to improve quality of delivery The BDD Reference Page contains information on BDD to aid our use at UKHO","title":"Where to start"},{"location":"quality-assurance/#contents","text":"Vision Acceptance Criteria BDD Code Standards Open Source Repositories Tester Roles Test Automation Strategy Test Policy Test Principles Test Standards Test Strategy Test Tools UKHO Delivery Quality Charter","title":"Contents"},{"location":"quality-assurance/acceptance-criteria/","text":"Acceptance Criteria Guidance This page provides tips on writing effective acceptance criteria (AC). What is Acceptance Criteria? Conditions that a software product must satisfy to be accepted by a user, customer or other stakeholder. Why write good Acceptance Criteria? To ensure all members of a team have a shared understanding of the requirements of the stories they are developing. How do I know I am doing it right? The whole team is involved in the creation and refinement of AC AC is recorded and agreed before a user story is played Every user story has at least 1 and a maximum of 5 ACs - too many ACs? Split the story All criteria are independently testable with a clear pass / fail outcome Non-functional criteria is included where applicable How to generate good Acceptance Criteria Use Example Mapping sessions - Example Mapping as part of BDD Record it using Gherkin scenario-orientated syntax - \u201cGiven...When...Then...\u201d","title":"Acceptance Criteria Guidance"},{"location":"quality-assurance/acceptance-criteria/#acceptance-criteria-guidance","text":"This page provides tips on writing effective acceptance criteria (AC).","title":"Acceptance Criteria Guidance"},{"location":"quality-assurance/acceptance-criteria/#what-is-acceptance-criteria","text":"Conditions that a software product must satisfy to be accepted by a user, customer or other stakeholder.","title":"What is Acceptance Criteria?"},{"location":"quality-assurance/acceptance-criteria/#why-write-good-acceptance-criteria","text":"To ensure all members of a team have a shared understanding of the requirements of the stories they are developing.","title":"Why write good Acceptance Criteria?"},{"location":"quality-assurance/acceptance-criteria/#how-do-i-know-i-am-doing-it-right","text":"The whole team is involved in the creation and refinement of AC AC is recorded and agreed before a user story is played Every user story has at least 1 and a maximum of 5 ACs - too many ACs? Split the story All criteria are independently testable with a clear pass / fail outcome Non-functional criteria is included where applicable","title":"How do I know I am doing it right?"},{"location":"quality-assurance/acceptance-criteria/#how-to-generate-good-acceptance-criteria","text":"Use Example Mapping sessions - Example Mapping as part of BDD Record it using Gherkin scenario-orientated syntax - \u201cGiven...When...Then...\u201d","title":"How to generate good Acceptance Criteria"},{"location":"quality-assurance/bdd/","text":"Behaviour-Driven Design (BDD) \"An approach that enhances communication between stakeholders and project team members by expressing product needs as concrete examples\" This page contains information about BDD and how it can be used to aid how we develop software at UKHO. What is BDD A process to enable the entire team to better understand stories before they are played BDD is about collaboration - Product Owners (proxy for the customer), developers and testers communicating to gain an agreed understanding Uses rules and examples to illustrate this understanding When stories are played there is less ambiguity leading to better software development BDD is NOT: Testing SpecFlow or Cucumber Just automated tests (tests are a downstream benefit) Aims of BDD BDD aims to make the development of software more successful by: Incorporating diverse perspectives when defining requirements Creating a shared understanding in a delivery team of the required product changes Simplifying and shortening team Scrum events (refinement and planning) Ensures only the functionality to meet requirements is developed Reducing the amount of re-work required in the maintenance phase (by making the original change more complete) Stages of BDD Discovery - ensuring the team have a full understanding of a user requirement, using rules and examples to demonstrate this Formulation - transforming the examples into documentation that describes how the product behaves (i.e Gherkin) Automation - using the documentation to drive automated tests Suggested BDD Approach Discovery - The customer representative brings requirements to the team as user stories (PBIs) Discovery - The Example Mapping technique is applied to these stories by either the whole team or a \u201cThree Amigos\u201d subset Discovery - This will create rules and examples that illustrate understanding of the story Discovery - Stories are then ready for full team refinement and planning sessions Formulation - Examples can be formulated into gherkin Automation - Create automated tests from the gherkin Example Mapping - Simple Overview Description Example Mapping is a technique to drive out understanding of a user requirement. It is a \"structured\" approach to this (rather than casual \"unstructured\" chats or kitchen discussions). Example Mapping sessions can involve the whole team, or a subset (known as the Three Amigos). It is important that all perspectives in the team (customer representative, developers and testers) are involved. These sessions can be short daily sessions through to longer weekly events. Theses need to take place to complete development effectively. Different colour post-its can be used to represent rules, examples and questions. Approach A story is created by the customer representative and presented to the group. The group discuss the story and determine rules that clarify the purpose of the story. Examples are created to demonstrate understanding of the rules. When creating examples it may become clear that further rules are needed. When there are lots of rules this may indicate the story is too big and should be split. Any questions that cannot be answered in the session should be recorded and answered subsequently. If there are lots of questions this may indicate the story is not understood and needs to go back to the customer. Resources Books Discovery: Explore behaviour using examples - Gaspar Nagy Amazon link BDD in Action: Behaviour-driven development for the whole software lifecycle - John Ferguson Smart Amazon link On-line resources Example Mapping by Gaspar Nagy Another description of Example Mapping by Matt Wynne Writing better Gherkin scenarios Who should formulate the Gherkin Gherkin - keeping your scenarios BRIEF How writing good gherkin enables better automation How to facilitate an Example Mapping session","title":"Behaviour-Driven Design (BDD)"},{"location":"quality-assurance/bdd/#behaviour-driven-design-bdd","text":"\"An approach that enhances communication between stakeholders and project team members by expressing product needs as concrete examples\" This page contains information about BDD and how it can be used to aid how we develop software at UKHO.","title":"Behaviour-Driven Design (BDD)"},{"location":"quality-assurance/bdd/#what-is-bdd","text":"A process to enable the entire team to better understand stories before they are played BDD is about collaboration - Product Owners (proxy for the customer), developers and testers communicating to gain an agreed understanding Uses rules and examples to illustrate this understanding When stories are played there is less ambiguity leading to better software development BDD is NOT: Testing SpecFlow or Cucumber Just automated tests (tests are a downstream benefit)","title":"What is BDD"},{"location":"quality-assurance/bdd/#aims-of-bdd","text":"BDD aims to make the development of software more successful by: Incorporating diverse perspectives when defining requirements Creating a shared understanding in a delivery team of the required product changes Simplifying and shortening team Scrum events (refinement and planning) Ensures only the functionality to meet requirements is developed Reducing the amount of re-work required in the maintenance phase (by making the original change more complete)","title":"Aims of BDD"},{"location":"quality-assurance/bdd/#stages-of-bdd","text":"Discovery - ensuring the team have a full understanding of a user requirement, using rules and examples to demonstrate this Formulation - transforming the examples into documentation that describes how the product behaves (i.e Gherkin) Automation - using the documentation to drive automated tests","title":"Stages of BDD"},{"location":"quality-assurance/bdd/#suggested-bdd-approach","text":"Discovery - The customer representative brings requirements to the team as user stories (PBIs) Discovery - The Example Mapping technique is applied to these stories by either the whole team or a \u201cThree Amigos\u201d subset Discovery - This will create rules and examples that illustrate understanding of the story Discovery - Stories are then ready for full team refinement and planning sessions Formulation - Examples can be formulated into gherkin Automation - Create automated tests from the gherkin","title":"Suggested BDD Approach"},{"location":"quality-assurance/bdd/#example-mapping-simple-overview","text":"","title":"Example Mapping - Simple Overview"},{"location":"quality-assurance/bdd/#description","text":"Example Mapping is a technique to drive out understanding of a user requirement. It is a \"structured\" approach to this (rather than casual \"unstructured\" chats or kitchen discussions). Example Mapping sessions can involve the whole team, or a subset (known as the Three Amigos). It is important that all perspectives in the team (customer representative, developers and testers) are involved. These sessions can be short daily sessions through to longer weekly events. Theses need to take place to complete development effectively. Different colour post-its can be used to represent rules, examples and questions.","title":"Description"},{"location":"quality-assurance/bdd/#approach","text":"A story is created by the customer representative and presented to the group. The group discuss the story and determine rules that clarify the purpose of the story. Examples are created to demonstrate understanding of the rules. When creating examples it may become clear that further rules are needed. When there are lots of rules this may indicate the story is too big and should be split. Any questions that cannot be answered in the session should be recorded and answered subsequently. If there are lots of questions this may indicate the story is not understood and needs to go back to the customer.","title":"Approach"},{"location":"quality-assurance/bdd/#resources","text":"","title":"Resources"},{"location":"quality-assurance/bdd/#books","text":"Discovery: Explore behaviour using examples - Gaspar Nagy Amazon link BDD in Action: Behaviour-driven development for the whole software lifecycle - John Ferguson Smart Amazon link","title":"Books"},{"location":"quality-assurance/bdd/#on-line-resources","text":"Example Mapping by Gaspar Nagy Another description of Example Mapping by Matt Wynne Writing better Gherkin scenarios Who should formulate the Gherkin Gherkin - keeping your scenarios BRIEF How writing good gherkin enables better automation How to facilitate an Example Mapping session","title":"On-line resources"},{"location":"quality-assurance/test-automation-strategy/","text":"Test Automation Strategy Introduction This strategy document details the UKHO approach to test automation. As an organisation we recognise the importance of embracing test automation and utilising it to enable faster development and release of our software products. This strategy acts as a baseline for UKHO delivery teams, with each team empowered to determine how they will adhere to this strategy. Our Test Automation Model To summarise our approach to test automation we created our take on the standard Test Pyramid Model. This promotes: The areas of testing we aim to automate The correct level in the pyramid we should add testing Principles of Test Automation We suggest that all teams using automation should adhere to these principles: New functionality must be covered by passing automated tests (unless there is a legitimate reason not to) Make use of test design patterns and principles Add tests at the correct level of the test pyramid \u2013 lower is better All tests should be independent of each other Test Automation Standards The following standards act as a guide for the creation of automated tests: Test Standards Ways of Working Test automation has provided the opportunity to move away from the traditional developer \u2013 tester divide and move towards an integrated way of working. The following principles are promoted: Use Test-Driven Design when developing functionality Pairing developer-tester can improve the quality of testing at all levels Ensure there is a process to manage existing test automation (reviewing execution time, test relevance, code refactoring) Test results are made visible to the team Follow the \u201cgreen tests run\u201d policy (i.e. all tests must pass before new functionality is submitted) How we measure our progress We will maintain metrics to determine our current state of automation at the UKHO. The metrics will be produced by comparing the state of test automation in a product against the exemplar test pyramid. The Future The UKHO Test Community will review and evolve this strategy over time to ensure our approach and ways or working continue to support our development and release processes.","title":"Test Automation Strategy"},{"location":"quality-assurance/test-automation-strategy/#test-automation-strategy","text":"","title":"Test Automation Strategy"},{"location":"quality-assurance/test-automation-strategy/#introduction","text":"This strategy document details the UKHO approach to test automation. As an organisation we recognise the importance of embracing test automation and utilising it to enable faster development and release of our software products. This strategy acts as a baseline for UKHO delivery teams, with each team empowered to determine how they will adhere to this strategy.","title":"Introduction"},{"location":"quality-assurance/test-automation-strategy/#our-test-automation-model","text":"To summarise our approach to test automation we created our take on the standard Test Pyramid Model. This promotes: The areas of testing we aim to automate The correct level in the pyramid we should add testing","title":"Our Test Automation Model"},{"location":"quality-assurance/test-automation-strategy/#principles-of-test-automation","text":"We suggest that all teams using automation should adhere to these principles: New functionality must be covered by passing automated tests (unless there is a legitimate reason not to) Make use of test design patterns and principles Add tests at the correct level of the test pyramid \u2013 lower is better All tests should be independent of each other","title":"Principles of Test Automation"},{"location":"quality-assurance/test-automation-strategy/#test-automation-standards","text":"The following standards act as a guide for the creation of automated tests: Test Standards","title":"Test Automation Standards"},{"location":"quality-assurance/test-automation-strategy/#ways-of-working","text":"Test automation has provided the opportunity to move away from the traditional developer \u2013 tester divide and move towards an integrated way of working. The following principles are promoted: Use Test-Driven Design when developing functionality Pairing developer-tester can improve the quality of testing at all levels Ensure there is a process to manage existing test automation (reviewing execution time, test relevance, code refactoring) Test results are made visible to the team Follow the \u201cgreen tests run\u201d policy (i.e. all tests must pass before new functionality is submitted)","title":"Ways of Working"},{"location":"quality-assurance/test-automation-strategy/#how-we-measure-our-progress","text":"We will maintain metrics to determine our current state of automation at the UKHO. The metrics will be produced by comparing the state of test automation in a product against the exemplar test pyramid.","title":"How we measure our progress"},{"location":"quality-assurance/test-automation-strategy/#the-future","text":"The UKHO Test Community will review and evolve this strategy over time to ensure our approach and ways or working continue to support our development and release processes.","title":"The Future"},{"location":"quality-assurance/test-code-standards/","text":"Test Automation Standards C# and Java Test Automation code should adhere to the same standard as production code Formatting standards should reflect standard in use by development teams (e.g. Google Code Standard, Microsoft) Standard coding principles apply (e.g. SOLID, DRY) Unit Testing Aim for naming consistency. Common standard is to use a When-Then name, for example, WhenTwoItemsExistsThenBothItemsAreReturned Follow best practice: Tests for results not functionality One assertion per test Tests should be isolated, i.e. have no dependencies on other tests nor on order of execution API Testing Perform full happy/unhappy path tests at this level Interactions with APIs should be abstracted into a separate service/facade, not alongside the test code UI Testing Only use for e2e tests or explicit UI features at this level Interactions with UIs should be abstracted into a separate service/facade, not alongside the test code (e.g., Page Object Model) SpecFlow and Cucumber Consider whether using these are required - will it add value, will a stakeholder be reading the tests, or can the extra technical layer be avoided? If using, publish the tests to a website for easy access using Pickles (see our Pickles Example Project ) If considered necessary then: The feature name should reflect the area being tested The scenario name should reflect the purpose of the test, e.g. \u201cEnsure two numbers are added correctly\u201d rather than \u201cadd two numbers\u201d or \u201cadd\u201d Similar scenarios should be in one feature file \u2013 a feature file should only contain similar scenarios Ensure only one result is tested per scenario, try to avoid having too many assertions, better to split into different scenarios Move repeated steps into a Background Perform technical setup and teardown in the Steps classes, not in the Gherkin. Test and Defect Management For C# projects, unit and SpecFlow tests should exist in separate projects Open defects should be managed; a regular team/project review session is recommended","title":"Test Automation Standards"},{"location":"quality-assurance/test-code-standards/#test-automation-standards","text":"","title":"Test Automation Standards"},{"location":"quality-assurance/test-code-standards/#c-and-java","text":"Test Automation code should adhere to the same standard as production code Formatting standards should reflect standard in use by development teams (e.g. Google Code Standard, Microsoft) Standard coding principles apply (e.g. SOLID, DRY)","title":"C# and Java"},{"location":"quality-assurance/test-code-standards/#unit-testing","text":"Aim for naming consistency. Common standard is to use a When-Then name, for example, WhenTwoItemsExistsThenBothItemsAreReturned Follow best practice: Tests for results not functionality One assertion per test Tests should be isolated, i.e. have no dependencies on other tests nor on order of execution","title":"Unit Testing"},{"location":"quality-assurance/test-code-standards/#api-testing","text":"Perform full happy/unhappy path tests at this level Interactions with APIs should be abstracted into a separate service/facade, not alongside the test code","title":"API Testing"},{"location":"quality-assurance/test-code-standards/#ui-testing","text":"Only use for e2e tests or explicit UI features at this level Interactions with UIs should be abstracted into a separate service/facade, not alongside the test code (e.g., Page Object Model)","title":"UI Testing"},{"location":"quality-assurance/test-code-standards/#specflow-and-cucumber","text":"Consider whether using these are required - will it add value, will a stakeholder be reading the tests, or can the extra technical layer be avoided? If using, publish the tests to a website for easy access using Pickles (see our Pickles Example Project ) If considered necessary then: The feature name should reflect the area being tested The scenario name should reflect the purpose of the test, e.g. \u201cEnsure two numbers are added correctly\u201d rather than \u201cadd two numbers\u201d or \u201cadd\u201d Similar scenarios should be in one feature file \u2013 a feature file should only contain similar scenarios Ensure only one result is tested per scenario, try to avoid having too many assertions, better to split into different scenarios Move repeated steps into a Background Perform technical setup and teardown in the Steps classes, not in the Gherkin.","title":"SpecFlow and Cucumber"},{"location":"quality-assurance/test-code-standards/#test-and-defect-management","text":"For C# projects, unit and SpecFlow tests should exist in separate projects Open defects should be managed; a regular team/project review session is recommended","title":"Test and Defect Management"},{"location":"quality-assurance/test-policy/","text":"Test Policy The purpose of this document is to communicate the policy for UKHO for testing of new software, updates, hardware and other related changes. Why we Test To build confidence in our systems Detect defects Generate information Manage quality risks To deliver value to our customers How we measure the effectiveness of Testing Delivery to customers of software and hardware that provides business value. UKHO long-term Testing goals To move to a DevOps Model Test Automation provides the bulk of testing functionality High Value manual testing is used Testing across UKHO is done within an Agile framework Who Tests? Test Engineering line manages a group of test engineers, ranging from junior to lead people; they provide testing capability across most of UKHO where testing is carried out within Scrum teams. Outside of the Scrum teams other people do test, for instance within Operations testing of hardware is carried out by the relevant SME, like network engineers carry out network testing. In some non-Agile teams, Business Analysts also carry out testing. Who manages Testing? The Head of Test line manages all test engineers, but test engineers are task-managed by the overall technology program in conjunction with the Head of Test. Other areas of the business carry out various testing activities, but these people will not necessarily be professional software testers, they are line managed by their relevant program. Roles and responsibilities of Test Engineering This will only deal with the roles within Test Engineering. In scope All software applications Any changes to database structures Third-party software Cloud-based applications The Testing Life-Cycle UKHO follows the Disciplined Agile Delivery (DAD) and testing forms part of that lifecycle process which is collectively referred to as the Agile Delivery Governance Framework (ADGF). Testing will be carried out at all stages of development of software and products. There are sub-policies that cover the Agile and Non-Agile methods as well as security, penetration, load and performance testing. The test guidance within the ADGF provides guidance/support for all teams that will carry out testing across UKHO. International standards Our baseline for standards is ISO/IEC 29119 . Testing process followed UKHO follows the fundamental test process as defined by ISTQB.","title":"Test Policy"},{"location":"quality-assurance/test-policy/#test-policy","text":"The purpose of this document is to communicate the policy for UKHO for testing of new software, updates, hardware and other related changes.","title":"Test Policy"},{"location":"quality-assurance/test-policy/#why-we-test","text":"To build confidence in our systems Detect defects Generate information Manage quality risks To deliver value to our customers","title":"Why we Test"},{"location":"quality-assurance/test-policy/#how-we-measure-the-effectiveness-of-testing","text":"Delivery to customers of software and hardware that provides business value.","title":"How we measure the effectiveness of Testing"},{"location":"quality-assurance/test-policy/#ukho-long-term-testing-goals","text":"To move to a DevOps Model Test Automation provides the bulk of testing functionality High Value manual testing is used Testing across UKHO is done within an Agile framework","title":"UKHO long-term Testing goals"},{"location":"quality-assurance/test-policy/#who-tests","text":"Test Engineering line manages a group of test engineers, ranging from junior to lead people; they provide testing capability across most of UKHO where testing is carried out within Scrum teams. Outside of the Scrum teams other people do test, for instance within Operations testing of hardware is carried out by the relevant SME, like network engineers carry out network testing. In some non-Agile teams, Business Analysts also carry out testing.","title":"Who Tests?"},{"location":"quality-assurance/test-policy/#who-manages-testing","text":"The Head of Test line manages all test engineers, but test engineers are task-managed by the overall technology program in conjunction with the Head of Test. Other areas of the business carry out various testing activities, but these people will not necessarily be professional software testers, they are line managed by their relevant program.","title":"Who manages Testing?"},{"location":"quality-assurance/test-policy/#roles-and-responsibilities-of-test-engineering","text":"This will only deal with the roles within Test Engineering.","title":"Roles and responsibilities of Test Engineering"},{"location":"quality-assurance/test-policy/#in-scope","text":"All software applications Any changes to database structures Third-party software Cloud-based applications","title":"In scope"},{"location":"quality-assurance/test-policy/#the-testing-life-cycle","text":"UKHO follows the Disciplined Agile Delivery (DAD) and testing forms part of that lifecycle process which is collectively referred to as the Agile Delivery Governance Framework (ADGF). Testing will be carried out at all stages of development of software and products. There are sub-policies that cover the Agile and Non-Agile methods as well as security, penetration, load and performance testing. The test guidance within the ADGF provides guidance/support for all teams that will carry out testing across UKHO.","title":"The Testing Life-Cycle"},{"location":"quality-assurance/test-policy/#international-standards","text":"Our baseline for standards is ISO/IEC 29119 .","title":"International standards"},{"location":"quality-assurance/test-policy/#testing-process-followed","text":"UKHO follows the fundamental test process as defined by ISTQB.","title":"Testing process followed"},{"location":"quality-assurance/test-profiles/","text":"Test Engineer Profiles Our job roles adhere to the DDAT QAT Test Engineer roles. The different levels of Test Engineer are: Test Engineer Senior Test Engineer Lead Test Engineer Head of Test Skill Levels Essential Skills Test Engineer Senior Test Engineer Lead Test Engineer Functional Testing Working Practitioner Expert Non-Functional Testing Working Practitioner Expert Technical Breadth Working Practitioner Expert Test Analysis Working Practitioner Expert Responsibilities We have detailed the responsibilities of each role: Test Engineer Senior Test Engineer Lead Test Engineer (Team) Lead Test Engineer (Program) Head of Test","title":"Test Engineer Profiles"},{"location":"quality-assurance/test-profiles/#test-engineer-profiles","text":"Our job roles adhere to the DDAT QAT Test Engineer roles. The different levels of Test Engineer are: Test Engineer Senior Test Engineer Lead Test Engineer Head of Test","title":"Test Engineer Profiles"},{"location":"quality-assurance/test-profiles/#skill-levels","text":"Essential Skills Test Engineer Senior Test Engineer Lead Test Engineer Functional Testing Working Practitioner Expert Non-Functional Testing Working Practitioner Expert Technical Breadth Working Practitioner Expert Test Analysis Working Practitioner Expert","title":"Skill Levels"},{"location":"quality-assurance/test-profiles/#responsibilities","text":"We have detailed the responsibilities of each role: Test Engineer Senior Test Engineer Lead Test Engineer (Team) Lead Test Engineer (Program) Head of Test","title":"Responsibilities"},{"location":"quality-assurance/test-repositories/","text":"GitHub Repositories This page lists the UKHO test-related repositories on GitHub. Demo API Test Framework Example Java project for API testing, using REST-assured and obtaining secrets from an Azure Key Vault. https://github.com/UKHO/demo-api-test-framework OWASP ZAP Scan Provides the ability to execute a Full Scan against a web application using the OWASP ZAP Docker image within an Azure DevOps pipeline. https://github.com/UKHO/owasp-zap-scan Pickles Example project to demonstrate production of HTML-based Gherkin using Pickles tool with an Azure DevOps pipeline. https://github.com/UKHO/pickles-demo-project WinAppDriver Example C# project to demonstrate how to use WinAppDriver to drive a WPF application and run UI tests in a Azure Devops pipeline. https://github.com/UKHO/winappdriver-demo","title":"GitHub Repositories"},{"location":"quality-assurance/test-repositories/#github-repositories","text":"This page lists the UKHO test-related repositories on GitHub.","title":"GitHub Repositories"},{"location":"quality-assurance/test-repositories/#demo-api-test-framework","text":"Example Java project for API testing, using REST-assured and obtaining secrets from an Azure Key Vault. https://github.com/UKHO/demo-api-test-framework","title":"Demo API Test Framework"},{"location":"quality-assurance/test-repositories/#owasp-zap-scan","text":"Provides the ability to execute a Full Scan against a web application using the OWASP ZAP Docker image within an Azure DevOps pipeline. https://github.com/UKHO/owasp-zap-scan","title":"OWASP ZAP Scan"},{"location":"quality-assurance/test-repositories/#pickles","text":"Example project to demonstrate production of HTML-based Gherkin using Pickles tool with an Azure DevOps pipeline. https://github.com/UKHO/pickles-demo-project","title":"Pickles"},{"location":"quality-assurance/test-repositories/#winappdriver","text":"Example C# project to demonstrate how to use WinAppDriver to drive a WPF application and run UI tests in a Azure Devops pipeline. https://github.com/UKHO/winappdriver-demo","title":"WinAppDriver"},{"location":"quality-assurance/test-strategy/","text":"Test Strategy Overview This strategy details how we add value through testing at the UKHO. The strategy is lightweight and provides a basis for all delivery teams. How this document should be used Teams should adhere to this strategy when determining their team approach to testing, creating a Test Approach document for the current work-stream that adds detail to this strategy. Roles and Responsibilities Role Responsibility Testers Champion quality within the team, ensuring quality is present during all stages of software development and inclusive of all team members and users. Developers Integrate quality into all stages of development, treating testing as an equal to development Delivery Managers Create an environment that fosters quality and integration of all members of a delivery team Approach to Testing Automation Automation should be used where possible. See the UKHO Test Automation Strategy for more information. Manual Manual testing should be used when automation is not deemed the best approach (e.g. too costly, not feasible, not applicable) Exploratory Exploratory testing should be used to verify quality in addition to regular manual and automated testing Sessions should be planned with a charter (including time-box, area to review, personas) Non-Functional Non-functional requirements and testing should be considered alongside other forms of testing Determining requirements and expected results will involve the architecture and product manager communities Test Generation Test scenarios should be generated from a BDD approach A risk-based approach should be used to determine the priority of test cases Security Testing to ensure security should take place throughout development The OWASP ZAP scanner should be used for development of APIs and UIs - see UKHO OWASP Zap Scanner project for more information. Cross Browser Testing The team should define the browser (and device if mobile testing is required) requirements. These should be documented in the Test Approach for that item of work. This requirement should be considered as early as possible by the team. Browser testing should be carried out on the latest version of Chrome as a minimum. If multiple browsers need to be tested then work closely with the Test Leads and Product Owner to ensure the correct approach is taken, e.g. which tests to run across browsers and the test framework to use. User Testing Testing must recognise the importance of ensuring we are delivering value to users The team should involve users during the development process Test Standards See the UKHO Test Standards for information on the standards that should be adhered to. Test Management Teams need to ensure their tests are managed over time in order to maintain their value, considering: Run time Test coverage Test code quality Test Reporting The results of testing must be visible to a team delivering confidence when developing. Tests written using Gherkin (i.e. business readable) should be easily available to members outside the development team.","title":"Test Strategy"},{"location":"quality-assurance/test-strategy/#test-strategy","text":"","title":"Test Strategy"},{"location":"quality-assurance/test-strategy/#overview","text":"This strategy details how we add value through testing at the UKHO. The strategy is lightweight and provides a basis for all delivery teams.","title":"Overview"},{"location":"quality-assurance/test-strategy/#how-this-document-should-be-used","text":"Teams should adhere to this strategy when determining their team approach to testing, creating a Test Approach document for the current work-stream that adds detail to this strategy.","title":"How this document should be used"},{"location":"quality-assurance/test-strategy/#roles-and-responsibilities","text":"Role Responsibility Testers Champion quality within the team, ensuring quality is present during all stages of software development and inclusive of all team members and users. Developers Integrate quality into all stages of development, treating testing as an equal to development Delivery Managers Create an environment that fosters quality and integration of all members of a delivery team","title":"Roles and Responsibilities"},{"location":"quality-assurance/test-strategy/#approach-to-testing","text":"","title":"Approach to Testing"},{"location":"quality-assurance/test-strategy/#automation","text":"Automation should be used where possible. See the UKHO Test Automation Strategy for more information.","title":"Automation"},{"location":"quality-assurance/test-strategy/#manual","text":"Manual testing should be used when automation is not deemed the best approach (e.g. too costly, not feasible, not applicable)","title":"Manual"},{"location":"quality-assurance/test-strategy/#exploratory","text":"Exploratory testing should be used to verify quality in addition to regular manual and automated testing Sessions should be planned with a charter (including time-box, area to review, personas)","title":"Exploratory"},{"location":"quality-assurance/test-strategy/#non-functional","text":"Non-functional requirements and testing should be considered alongside other forms of testing Determining requirements and expected results will involve the architecture and product manager communities","title":"Non-Functional"},{"location":"quality-assurance/test-strategy/#test-generation","text":"Test scenarios should be generated from a BDD approach A risk-based approach should be used to determine the priority of test cases","title":"Test Generation"},{"location":"quality-assurance/test-strategy/#security","text":"Testing to ensure security should take place throughout development The OWASP ZAP scanner should be used for development of APIs and UIs - see UKHO OWASP Zap Scanner project for more information.","title":"Security"},{"location":"quality-assurance/test-strategy/#cross-browser-testing","text":"The team should define the browser (and device if mobile testing is required) requirements. These should be documented in the Test Approach for that item of work. This requirement should be considered as early as possible by the team. Browser testing should be carried out on the latest version of Chrome as a minimum. If multiple browsers need to be tested then work closely with the Test Leads and Product Owner to ensure the correct approach is taken, e.g. which tests to run across browsers and the test framework to use.","title":"Cross Browser Testing"},{"location":"quality-assurance/test-strategy/#user-testing","text":"Testing must recognise the importance of ensuring we are delivering value to users The team should involve users during the development process","title":"User Testing"},{"location":"quality-assurance/test-strategy/#test-standards","text":"See the UKHO Test Standards for information on the standards that should be adhered to.","title":"Test Standards"},{"location":"quality-assurance/test-strategy/#test-management","text":"Teams need to ensure their tests are managed over time in order to maintain their value, considering: Run time Test coverage Test code quality","title":"Test Management"},{"location":"quality-assurance/test-strategy/#test-reporting","text":"The results of testing must be visible to a team delivering confidence when developing. Tests written using Gherkin (i.e. business readable) should be easily available to members outside the development team.","title":"Test Reporting"},{"location":"quality-assurance/test-tooling/","text":"Test Tooling Standalone Tool Notes Links Version info (if applicable) ChromeDriver Chrome driver for Selenium https://chromedriver.chromium.org/ OWASP Zap Vulnerability scanning (Web and API) https://www.owasp.org/index.php/OWASP_Zed_Attack_Proxy_Project Pickles Living documentation generator http://www.picklesdoc.com/ Postman Rest API client https://www.getpostman.com/ Selenium Browser automation https://www.seleniumhq.org/ SOAP UI REST and SOAP client https://www.soapui.org .NET Tool Notes Links Version info (if applicable) Fluent Assertions Readable assertions compatible with all unit test frameworks https://fluentassertions.com/ Polly .NET resilience and transient-fault-handling library https://github.com/App-vNext/Polly SpecFlow Binding Business Requirements to .NET Code https://specflow.org/ Visual Studio Profiling Measure app performance https://docs.microsoft.com/en-us/visualstudio/profiling/?view=vs-2019 Win App Driver Windows Application Driver https://github.com/microsoft/WinAppDriver Java Tool Notes Links Version info (if applicable) Cucumber Binding Business Requirements to Java code https://cucumber.io/docs Jmeter Load test functional behaviour and measure performance https://jmeter.apache.org/ REST-assured Testing and validating REST services http://rest-assured.io/ swagger-request-validator A Java library for validating request/responses against a OpenAPI / Swagger specification https://bitbucket.org/atlassian/swagger-request-validator","title":"Test Tooling"},{"location":"quality-assurance/test-tooling/#test-tooling","text":"","title":"Test Tooling"},{"location":"quality-assurance/test-tooling/#standalone","text":"Tool Notes Links Version info (if applicable) ChromeDriver Chrome driver for Selenium https://chromedriver.chromium.org/ OWASP Zap Vulnerability scanning (Web and API) https://www.owasp.org/index.php/OWASP_Zed_Attack_Proxy_Project Pickles Living documentation generator http://www.picklesdoc.com/ Postman Rest API client https://www.getpostman.com/ Selenium Browser automation https://www.seleniumhq.org/ SOAP UI REST and SOAP client https://www.soapui.org","title":"Standalone"},{"location":"quality-assurance/test-tooling/#net","text":"Tool Notes Links Version info (if applicable) Fluent Assertions Readable assertions compatible with all unit test frameworks https://fluentassertions.com/ Polly .NET resilience and transient-fault-handling library https://github.com/App-vNext/Polly SpecFlow Binding Business Requirements to .NET Code https://specflow.org/ Visual Studio Profiling Measure app performance https://docs.microsoft.com/en-us/visualstudio/profiling/?view=vs-2019 Win App Driver Windows Application Driver https://github.com/microsoft/WinAppDriver","title":".NET"},{"location":"quality-assurance/test-tooling/#java","text":"Tool Notes Links Version info (if applicable) Cucumber Binding Business Requirements to Java code https://cucumber.io/docs Jmeter Load test functional behaviour and measure performance https://jmeter.apache.org/ REST-assured Testing and validating REST services http://rest-assured.io/ swagger-request-validator A Java library for validating request/responses against a OpenAPI / Swagger specification https://bitbucket.org/atlassian/swagger-request-validator","title":"Java"},{"location":"quality-assurance/test-vision/","text":"Test Vision To continually improve our testing approach To ensure we use the best testing techniques to deliver Quality Improvement to the One Programme To continually review our approach so we are using the latest technology and techniques To automate 100% of what is automatable Add automation wherever it is possible and applicable, and do so in a consistent manner Ensure we have commonality in technology and practises across the organisation To have security testing as an integral part of our approach Ensure we have the skills and tools to deliver Quality Improvement in security To have security testing part as part of our standard test approach To have a thriving Test Community Have a community that offers support to each other in our roles championing quality across the organisation Ensure testers have the skills and support to deliver to the UKHO One Programme Promote the value of software testing across the UKHO (including to Development and Citizen Tester communities) Ensure we share knowledge in what we do both internally and externally and strive to become a leader in testing in government","title":"Test Vision"},{"location":"quality-assurance/test-vision/#test-vision","text":"","title":"Test Vision"},{"location":"quality-assurance/test-vision/#to-continually-improve-our-testing-approach","text":"To ensure we use the best testing techniques to deliver Quality Improvement to the One Programme To continually review our approach so we are using the latest technology and techniques","title":"To continually improve our testing approach"},{"location":"quality-assurance/test-vision/#to-automate-100-of-what-is-automatable","text":"Add automation wherever it is possible and applicable, and do so in a consistent manner Ensure we have commonality in technology and practises across the organisation","title":"To automate 100% of what is automatable"},{"location":"quality-assurance/test-vision/#to-have-security-testing-as-an-integral-part-of-our-approach","text":"Ensure we have the skills and tools to deliver Quality Improvement in security To have security testing part as part of our standard test approach","title":"To have security testing as an integral part of our approach"},{"location":"quality-assurance/test-vision/#to-have-a-thriving-test-community","text":"Have a community that offers support to each other in our roles championing quality across the organisation Ensure testers have the skills and support to deliver to the UKHO One Programme Promote the value of software testing across the UKHO (including to Development and Citizen Tester communities) Ensure we share knowledge in what we do both internally and externally and strive to become a leader in testing in government","title":"To have a thriving Test Community"},{"location":"quality-assurance/testing-principles/","text":"Testing principles We utilise a shift left mindset (quality is baked in) We test at every stage of a product's lifecycle (continuously testing) We automate 100% of what is automatable We use agile principles at every stage of our work We use behaviour driven development to help us deliver value to our customers We take a holistic view of a product when testing We adopt a continuous improvement mentality to our skills We collaborate across Government to learn and to teach We look to our partners to work to the same principles 1. We utilise a shift left mindset (quality is baked in) Quality starts at the very beginning of a project, it is not just something related to testing, we champion product quality from the very beginning. 2. We test at every stage of the product lifecycle (continuously testing) Testing begins before any code is written and continues through every stage, ensuring that the product is tested the right way at the right time. 3. We automate 100% of what is automatable Automation is key to delivering in a DevOps world, we seek to automate everything that can be, allowing us to move faster and with greater certainty. 4. We use Agile principles at every stage of our work We must be flexible and adaptable, delivering value quickly to our customers, using Agile principles to help us do that. 5. We use Behaviour Driven Development (BDD) to help us deliver value to our customers BDD helps teams focus on the most valuable work to deliver, it helps clarify and ensure misunderstanding is reduced so that the right product is built. 6. We take a holistic view of a product when testing We look to view the product as a whole, ensuring that testing encompasses non-functional as well as the functional areas of that product. 7. We adopt a continuous improvement mentality to our skills We are always learning, our people are key to our delivery and by always seeking to learn we allow ourselves to introduce new ideas, ways of working, to try new things. 8. We collaborate across Government to learn and to teach We are reaching out across wider government to learn from other organisations and to pass on our knowledge that could help other organisations. 9. We look to our partners to work to the same principles With our teams working to the principles, working with partners who work to similar ones can make the working relationships between us and the partner more productive.","title":"Testing principles"},{"location":"quality-assurance/testing-principles/#testing-principles","text":"We utilise a shift left mindset (quality is baked in) We test at every stage of a product's lifecycle (continuously testing) We automate 100% of what is automatable We use agile principles at every stage of our work We use behaviour driven development to help us deliver value to our customers We take a holistic view of a product when testing We adopt a continuous improvement mentality to our skills We collaborate across Government to learn and to teach We look to our partners to work to the same principles","title":"Testing principles"},{"location":"quality-assurance/testing-principles/#1-we-utilise-a-shift-left-mindset-quality-is-baked-in","text":"Quality starts at the very beginning of a project, it is not just something related to testing, we champion product quality from the very beginning.","title":"1. We utilise a shift left mindset (quality is baked in)"},{"location":"quality-assurance/testing-principles/#2-we-test-at-every-stage-of-the-product-lifecycle-continuously-testing","text":"Testing begins before any code is written and continues through every stage, ensuring that the product is tested the right way at the right time.","title":"2. We test at every stage of the product lifecycle (continuously testing)"},{"location":"quality-assurance/testing-principles/#3-we-automate-100-of-what-is-automatable","text":"Automation is key to delivering in a DevOps world, we seek to automate everything that can be, allowing us to move faster and with greater certainty.","title":"3. We automate 100% of what is automatable"},{"location":"quality-assurance/testing-principles/#4-we-use-agile-principles-at-every-stage-of-our-work","text":"We must be flexible and adaptable, delivering value quickly to our customers, using Agile principles to help us do that.","title":"4. We use Agile principles at every stage of our work"},{"location":"quality-assurance/testing-principles/#5-we-use-behaviour-driven-development-bdd-to-help-us-deliver-value-to-our-customers","text":"BDD helps teams focus on the most valuable work to deliver, it helps clarify and ensure misunderstanding is reduced so that the right product is built.","title":"5. We use Behaviour Driven Development (BDD) to help us deliver value to our customers"},{"location":"quality-assurance/testing-principles/#6-we-take-a-holistic-view-of-a-product-when-testing","text":"We look to view the product as a whole, ensuring that testing encompasses non-functional as well as the functional areas of that product.","title":"6. We take a holistic view of a product when testing"},{"location":"quality-assurance/testing-principles/#7-we-adopt-a-continuous-improvement-mentality-to-our-skills","text":"We are always learning, our people are key to our delivery and by always seeking to learn we allow ourselves to introduce new ideas, ways of working, to try new things.","title":"7. We adopt a continuous improvement mentality to our skills"},{"location":"quality-assurance/testing-principles/#8-we-collaborate-across-government-to-learn-and-to-teach","text":"We are reaching out across wider government to learn from other organisations and to pass on our knowledge that could help other organisations.","title":"8. We collaborate across Government to learn and to teach"},{"location":"quality-assurance/testing-principles/#9-we-look-to-our-partners-to-work-to-the-same-principles","text":"With our teams working to the principles, working with partners who work to similar ones can make the working relationships between us and the partner more productive.","title":"9. We look to our partners to work to the same principles"},{"location":"quality-assurance/ukho-quality-charter/","text":"UKHO Delivery Quality Charter This is the UKHO Delivery Quality Charter - a set of objectives that will improve how teams can quality assure their software. The Team All members of the team are equal \u2013 there should be no differences between developers and testers in: Permissions they have been assigned (e.g. permissions to access environments) Access to hardware or software Weight of opinion Teams that are multi-disciplinary, cross-functional and equal achieve better results Ways of Working Planning, creating and executing tests (including manual testing) is the responsibility of everyone in the team The role of the tester in the team is to champion quality assurance and testing at all stages of the development process The team will use BDD for user-focused stories in the story refinement process (for more details see our ' BDD ' page) A process will exist for reviewing current automated tests Acceptance Criteria Every story will have acceptance criteria added before being worked on Acceptance criteria will not be changed without cross-team awareness Acceptance criteria will be testable, i.e. capable of being proven true or false For more details see our ' Acceptance Criteria ' page. Test Automation Write tests at the correct level of the test pyramid \u2013 lower is better All functional code must have accompanying unit or component tests All API development must have accompanying API tests Testing at the UI level is limited to a small number of happy-path tests There must be a compelling reason to use SpecFlow (its use must not be a default position) Test code must be treated with the same care and attention as production code (including pairing on writing) For more details see our ' Test Automation Strategy ' page. Manual Testing Manual testing should never be a team's default test method and should only be used when the team agrees that full automation of a test is not feasible (e.g. the technical complexity is too high or the time taken to fully automate a test far outweighs the benefit of having that test automated) When used, evidence of manual testing (e.g. screenshots) is not required Exploratory testing is a valid form of manual testing and should be part of the test approach","title":"UKHO Delivery Quality Charter"},{"location":"quality-assurance/ukho-quality-charter/#ukho-delivery-quality-charter","text":"This is the UKHO Delivery Quality Charter - a set of objectives that will improve how teams can quality assure their software.","title":"UKHO Delivery Quality Charter"},{"location":"quality-assurance/ukho-quality-charter/#the-team","text":"All members of the team are equal \u2013 there should be no differences between developers and testers in: Permissions they have been assigned (e.g. permissions to access environments) Access to hardware or software Weight of opinion Teams that are multi-disciplinary, cross-functional and equal achieve better results","title":"The Team"},{"location":"quality-assurance/ukho-quality-charter/#ways-of-working","text":"Planning, creating and executing tests (including manual testing) is the responsibility of everyone in the team The role of the tester in the team is to champion quality assurance and testing at all stages of the development process The team will use BDD for user-focused stories in the story refinement process (for more details see our ' BDD ' page) A process will exist for reviewing current automated tests","title":"Ways of Working"},{"location":"quality-assurance/ukho-quality-charter/#acceptance-criteria","text":"Every story will have acceptance criteria added before being worked on Acceptance criteria will not be changed without cross-team awareness Acceptance criteria will be testable, i.e. capable of being proven true or false For more details see our ' Acceptance Criteria ' page.","title":"Acceptance Criteria"},{"location":"quality-assurance/ukho-quality-charter/#test-automation","text":"Write tests at the correct level of the test pyramid \u2013 lower is better All functional code must have accompanying unit or component tests All API development must have accompanying API tests Testing at the UI level is limited to a small number of happy-path tests There must be a compelling reason to use SpecFlow (its use must not be a default position) Test code must be treated with the same care and attention as production code (including pairing on writing) For more details see our ' Test Automation Strategy ' page.","title":"Test Automation"},{"location":"quality-assurance/ukho-quality-charter/#manual-testing","text":"Manual testing should never be a team's default test method and should only be used when the team agrees that full automation of a test is not feasible (e.g. the technical complexity is too high or the time taken to fully automate a test far outweighs the benefit of having that test automated) When used, evidence of manual testing (e.g. screenshots) is not required Exploratory testing is a valid form of manual testing and should be part of the test approach","title":"Manual Testing"},{"location":"quality-assurance/roles/head-of-test/","text":"Head of Test The Head of Test takes ownership for establishing policy for the test team and setting the testing strategy. At this level you will: Own continuous improvement Research new technology and new techniques to implement change Build the test community Provide organisational leadership Advocate test capabilities both internally and outside of government Ensure teams have the right test capabilities Areas Tasks Stories Testing policy, strategy and standards Responsible for ensuring that the relevant policy, strategy and standards comply with relevant government regulations. That the relevant policies are applied correctly across all teams and are updated when needed. Creation of policy, strategy and standards , working with other engineers to ensure they remain relevant and updated. I am the accountable officier in legal terms for ensuring these documents exist, are updated and are known to engineers Recruitment of test engineers Planning when new engineers are needed and recruiting people with relevant skills. Working with the One Program and delivery teams to determine the skills required. Creating relevant job descriptions and interview packs. Running the recuritment campaign with HR (from CV sift, interview and offer,and agreeing renumeration). Skills planning Ensuring that engineers have the skills that they need now and planning for skills that will be needed in the future. Maintaining a high level view of all engineers and key skills. The work is divided into three sections, skills needed now, in the medium term and in the longer term. Ensuring that the relevant training is covered by personal development plans and that engineers are supported in their ongoing development Line Management Line managing test engineers, defining objectives and performance measurements for engineers. Helping them build relevant development plans and managing performance issues. This also includes working with relevant teams to understand their requirements, rotation of test engineers around teams. Making sure that the engineers who report to the Head of Test follow the relevant HR policies as well as working to the relevant technology standards and best pratices. Long term strategic planning Responsible for ensuring that UKHO has an up-to-date long term testing vision, covering people and technology. This falls into three elements, a) What we need now, b) what we will need in a years time and c) up to 5 years time. Ensuring that as the business needs as well as technology changes they are combined to ensure that the testing capability continues to meet the needs of the whole organsation. Part of senior technology management team Working with other senior technology managers on a range of tactical/strategic issues affecting UKHO. This covers a wide range of topics, includes such things as input into the overall technology roadmap, management of technology driven work that sits outside of delivery teams, providing support to other technology managers, oversight of design changes to systems and one of the approvers that sits on the change approval board Product Owner There are a number of lead test engineers that the Head of Test acts as the Product Owner for, covering requirements through to sign-off. Add work to the lead engineers backlog, sign off of backlog items, consultation with leads on requirements gathering, refinement. Ensuring that the sum total of work that the lead engineers are working on supports the testing startegy for the organsation.","title":"Head of Test"},{"location":"quality-assurance/roles/head-of-test/#head-of-test","text":"The Head of Test takes ownership for establishing policy for the test team and setting the testing strategy. At this level you will: Own continuous improvement Research new technology and new techniques to implement change Build the test community Provide organisational leadership Advocate test capabilities both internally and outside of government Ensure teams have the right test capabilities Areas Tasks Stories Testing policy, strategy and standards Responsible for ensuring that the relevant policy, strategy and standards comply with relevant government regulations. That the relevant policies are applied correctly across all teams and are updated when needed. Creation of policy, strategy and standards , working with other engineers to ensure they remain relevant and updated. I am the accountable officier in legal terms for ensuring these documents exist, are updated and are known to engineers Recruitment of test engineers Planning when new engineers are needed and recruiting people with relevant skills. Working with the One Program and delivery teams to determine the skills required. Creating relevant job descriptions and interview packs. Running the recuritment campaign with HR (from CV sift, interview and offer,and agreeing renumeration). Skills planning Ensuring that engineers have the skills that they need now and planning for skills that will be needed in the future. Maintaining a high level view of all engineers and key skills. The work is divided into three sections, skills needed now, in the medium term and in the longer term. Ensuring that the relevant training is covered by personal development plans and that engineers are supported in their ongoing development Line Management Line managing test engineers, defining objectives and performance measurements for engineers. Helping them build relevant development plans and managing performance issues. This also includes working with relevant teams to understand their requirements, rotation of test engineers around teams. Making sure that the engineers who report to the Head of Test follow the relevant HR policies as well as working to the relevant technology standards and best pratices. Long term strategic planning Responsible for ensuring that UKHO has an up-to-date long term testing vision, covering people and technology. This falls into three elements, a) What we need now, b) what we will need in a years time and c) up to 5 years time. Ensuring that as the business needs as well as technology changes they are combined to ensure that the testing capability continues to meet the needs of the whole organsation. Part of senior technology management team Working with other senior technology managers on a range of tactical/strategic issues affecting UKHO. This covers a wide range of topics, includes such things as input into the overall technology roadmap, management of technology driven work that sits outside of delivery teams, providing support to other technology managers, oversight of design changes to systems and one of the approvers that sits on the change approval board Product Owner There are a number of lead test engineers that the Head of Test acts as the Product Owner for, covering requirements through to sign-off. Add work to the lead engineers backlog, sign off of backlog items, consultation with leads on requirements gathering, refinement. Ensuring that the sum total of work that the lead engineers are working on supports the testing startegy for the organsation.","title":"Head of Test"},{"location":"quality-assurance/roles/lead-program-test-engineer/","text":"Lead Test Engineer (Program) Areas Tasks Stories To Continually Improve our Testing Approach (30%) Provide support, consultancy and guidance in testing matters to UKHO development teams A team is trying out a new test technology. The lead will assist the team in implementing it. They will ensure that automated tests are following best practice guidelines A team is automating BDD tests. The lead will work with the team to ensure Gherkin written follows the UKHO standards. They will work with the ALM team helping to build and support delivery pipelines. A team is starting to use a new build pipeline. The lead will assist in adding automated tests to the pipeline. They will work with teams helping to resolve issues with automated tests and looking for solutions to automation issues. A team has a failing test that they are unable to resolve. The lead will aid in fixing. They have responsibility for the upgrade path for relevant testing tools, advising teams on when and how to upgrade, plus any related issues they should be aware of. A team discovers they are using an old version of a BDD test tool. The lead will aid in upgrading this, in line with the wider organisation. To Automate 100% of what is Automatable (30%) They will implement new automation frameworks and work with teams on new processes and tools to help improve the return from test automation (and improve delivery to the customer). The organisation is using different techniques for API testing. The lead will review available option, suggest a preferred approach and create a framework to deliver this. Working with teams ensuring that relevant automation metrics provide feedback to teams and wider stakeholders. A stakeholder wants to understand how much automation is used on a project. The lead will prepare and deliver this information. Provide guidance and mentoring in test automation to teams. A new project is starting. The lead will suggest how test automation can be used to improve quality. To have Security Testing as an Integral part of our approach (25%) Assist teams with improving security testing A team would like to automate the results of threat modelling. The lead assists in implementing these as part of the test approach. Investigate tools, frameworks or approaches that would be beneficial to the UKHO OWASP develop a new tool to discover potential security flaws. The lead will investigate this and determine whether and how it could be used to improve security testing. To have a Thriving Test Community (10%) Mentoring Some testers are learning a new programming language. The lead will provide support to help them in their journey. Take part in wider government discussions around test automation, both to influence and learn from. The lead recognises that a team may not be using a tool correctly. They seek guidance from another government organisation on how they use the tool. Facilitate the promotion of testing at UKHO A tester has come up with a new way of testing a product. The lead suggests that the tester do a short presentation to the community on this. \u200bContinually develop own skills as part of a program of professional development (5%) \u200bCreates and takes pro-active ownership of a continuous learning cycle for themselves \u200bReviewing their current skill level, they identify that they have a knowledge gap on how DevOps works. They put together a plan that utilises books, and online materials to gain a better understanding.","title":"Lead Test Engineer (Program)"},{"location":"quality-assurance/roles/lead-program-test-engineer/#lead-test-engineer-program","text":"Areas Tasks Stories To Continually Improve our Testing Approach (30%) Provide support, consultancy and guidance in testing matters to UKHO development teams A team is trying out a new test technology. The lead will assist the team in implementing it. They will ensure that automated tests are following best practice guidelines A team is automating BDD tests. The lead will work with the team to ensure Gherkin written follows the UKHO standards. They will work with the ALM team helping to build and support delivery pipelines. A team is starting to use a new build pipeline. The lead will assist in adding automated tests to the pipeline. They will work with teams helping to resolve issues with automated tests and looking for solutions to automation issues. A team has a failing test that they are unable to resolve. The lead will aid in fixing. They have responsibility for the upgrade path for relevant testing tools, advising teams on when and how to upgrade, plus any related issues they should be aware of. A team discovers they are using an old version of a BDD test tool. The lead will aid in upgrading this, in line with the wider organisation. To Automate 100% of what is Automatable (30%) They will implement new automation frameworks and work with teams on new processes and tools to help improve the return from test automation (and improve delivery to the customer). The organisation is using different techniques for API testing. The lead will review available option, suggest a preferred approach and create a framework to deliver this. Working with teams ensuring that relevant automation metrics provide feedback to teams and wider stakeholders. A stakeholder wants to understand how much automation is used on a project. The lead will prepare and deliver this information. Provide guidance and mentoring in test automation to teams. A new project is starting. The lead will suggest how test automation can be used to improve quality. To have Security Testing as an Integral part of our approach (25%) Assist teams with improving security testing A team would like to automate the results of threat modelling. The lead assists in implementing these as part of the test approach. Investigate tools, frameworks or approaches that would be beneficial to the UKHO OWASP develop a new tool to discover potential security flaws. The lead will investigate this and determine whether and how it could be used to improve security testing. To have a Thriving Test Community (10%) Mentoring Some testers are learning a new programming language. The lead will provide support to help them in their journey. Take part in wider government discussions around test automation, both to influence and learn from. The lead recognises that a team may not be using a tool correctly. They seek guidance from another government organisation on how they use the tool. Facilitate the promotion of testing at UKHO A tester has come up with a new way of testing a product. The lead suggests that the tester do a short presentation to the community on this. \u200bContinually develop own skills as part of a program of professional development (5%) \u200bCreates and takes pro-active ownership of a continuous learning cycle for themselves \u200bReviewing their current skill level, they identify that they have a knowledge gap on how DevOps works. They put together a plan that utilises books, and online materials to gain a better understanding.","title":"Lead Test Engineer (Program)"},{"location":"quality-assurance/roles/lead-team-test-engineer/","text":"Lead Test Engineer (Team) Area Tasks Example stories Creating test automation (25%) Responsible for writing automated tests in software development Working as part of a delivery team, writing new and refactoring existing automated tests. \u200b Accountable for ensuring that UKHO test automation code standards are maintained Both testers and developers can write automated tests; the tester notices a new approach used, they review this with the writer to ensure standards are met or that the standards need updating. \u200b Responsible for pro-actively researching and recommending the use of technology A company bring out a new tool for managing test data. The tester sees that this resolves a common problem in several teams. They research it and finds it to be fit for purpose and so recommends to the Test Department. \u200b Accountable for producing solutions that are supportable, including documentation, knowledge transfer and support documentation The tester's delivery team is creating a new piece of software. They checks that the team's \"Definition of Done\" includes specific items for automated testing and the approach that should be taken. Create relevant test documents for project (Test Approach, Test Strategy, Test Summary Report) (5%)) Responsible for the creation of the Test Strategy, Test Approach and the Test Summary report as required At the start of a project the tester takes ownership of producing the relevant document that provides details on how testing of the product will be undertaken. This must be produced in conjunction with the developers and Delivery Manager, and they will ensure the document is signed off.If required, the tester will create a Test Summary Report that provides an overview of the testing completed. Analysing Requirements and designing manual or automated tests (20%) Review requirements to understand how they can be tested The role helps review requirements; the tester sees that altering the requirement slightly would help the testing of it so they discuss this with the Delivery Manager and lead developer. \u200b \u200bDesign manual tests \u200bA feature needs to be manually tested so the tester uses test design techniques to create both happy and unhappy path test plans. \u200b \u200bDesign Automated tests \u200bA feature will need automated tests; the tester uses test design techniques to create the relevant automated tests, using TDD and BDD approaches. \u200bLeads Testing (20%) Leads the team in ensuring that the product is tested to a satisfactory level to give confidence that when released it will function as intended During a sprint, the tester notices that the developers do not have enough work to do. The tester discusses with the team and proposes that there are some test tasks that they could work on to keep the sprint on track. Leads the use of Behaviour Driven Development (BDD) within the delivery team The Delivery Manager is finding it challenging to add acceptance criteria to a PBI. They work with the Delivery Manager using BDD techniques to create acceptance criteria. \u200b Carries out exploratory testing A feature is under test; the tester feels that some exploratory testing will help look for defects. They use a test charter and test persona to carry out some exploratory testing. \u200b Responsible for coaching less experienced test automation engineers The tester coaches a junior tester in Behaviour Driven Development, reviewing their work and providing feedback and advice. \u200b Responsible for ensuring that testing on a project adds up to a coherent whole A project uses several different testing techniques - automated, manual, non-functional. The tester sees that there is a lack of security testing, so they recommend to the Delivery Manager that several security testing PBI's are added to the backlog. \u200b Will be involved in hiring and other resourcing decisions (but is not responsible for recruitment) Having received appropriate training, the tester is a member of the board on an interview of a test automation engineer. They assist in creating the questions used. \u200bSoftware Testing Subject Matter Expert (10%) Advise the team on the best approach for automated tests \u200bThe team are building a new application; the tester reviews the PBI's and advises on the best approach for automated testing. \u200b \u200bHelps the team on using best practice for writing Behaviour Driven Development testing \u200bThe tester sees that some of the team have less confidence than others in using BDD. They offer to provide some 1-2-1 coaching to improve the overall level of skill within the team. \u200b \u200b\u200bLooks at the testability of a product As part of backlog refinement they see that implementing stubs or mocks will allow the team to progress testing rather than having to wait for another PBI to be completed. Setup tasks for testing (5%) \u200bCreates test data for a sprint \u200bThere is a requirement to test a complex change, the tester analyses which data will be needed for the tests and arranges with the Lead Developer to get the relevant data restored into the test system. \u200b \u200bAssists with preparing environments for testing \u200bPrior to a sprint starting the tester runs some confidence tests to ensure that the test environment is ready for testing. \u200bAct as Subject Matter Expert in a technology across UKHO (10%) \u200bLeads that technology, its adoption and best practices across UKHO \u200bThe tester would champion the technology across all teams, create best practices, provide mentoring to teams, lead events and engage with external organisations, adding to the body of knowledge regarding the technology. \u200bContinually develop own skills as part of a program of professional development (5%) \u200bCreates and takes pro-active ownership of a continuous learning cycle for themselves \u200bReviewing their current skill level, they identify that they have a knowledge gap on how DevOps works. They put together a plan that utilises books, and online materials to gain a better understanding.","title":"Lead Test Engineer (Team)"},{"location":"quality-assurance/roles/lead-team-test-engineer/#lead-test-engineer-team","text":"Area Tasks Example stories Creating test automation (25%) Responsible for writing automated tests in software development Working as part of a delivery team, writing new and refactoring existing automated tests. \u200b Accountable for ensuring that UKHO test automation code standards are maintained Both testers and developers can write automated tests; the tester notices a new approach used, they review this with the writer to ensure standards are met or that the standards need updating. \u200b Responsible for pro-actively researching and recommending the use of technology A company bring out a new tool for managing test data. The tester sees that this resolves a common problem in several teams. They research it and finds it to be fit for purpose and so recommends to the Test Department. \u200b Accountable for producing solutions that are supportable, including documentation, knowledge transfer and support documentation The tester's delivery team is creating a new piece of software. They checks that the team's \"Definition of Done\" includes specific items for automated testing and the approach that should be taken. Create relevant test documents for project (Test Approach, Test Strategy, Test Summary Report) (5%)) Responsible for the creation of the Test Strategy, Test Approach and the Test Summary report as required At the start of a project the tester takes ownership of producing the relevant document that provides details on how testing of the product will be undertaken. This must be produced in conjunction with the developers and Delivery Manager, and they will ensure the document is signed off.If required, the tester will create a Test Summary Report that provides an overview of the testing completed. Analysing Requirements and designing manual or automated tests (20%) Review requirements to understand how they can be tested The role helps review requirements; the tester sees that altering the requirement slightly would help the testing of it so they discuss this with the Delivery Manager and lead developer. \u200b \u200bDesign manual tests \u200bA feature needs to be manually tested so the tester uses test design techniques to create both happy and unhappy path test plans. \u200b \u200bDesign Automated tests \u200bA feature will need automated tests; the tester uses test design techniques to create the relevant automated tests, using TDD and BDD approaches. \u200bLeads Testing (20%) Leads the team in ensuring that the product is tested to a satisfactory level to give confidence that when released it will function as intended During a sprint, the tester notices that the developers do not have enough work to do. The tester discusses with the team and proposes that there are some test tasks that they could work on to keep the sprint on track. Leads the use of Behaviour Driven Development (BDD) within the delivery team The Delivery Manager is finding it challenging to add acceptance criteria to a PBI. They work with the Delivery Manager using BDD techniques to create acceptance criteria. \u200b Carries out exploratory testing A feature is under test; the tester feels that some exploratory testing will help look for defects. They use a test charter and test persona to carry out some exploratory testing. \u200b Responsible for coaching less experienced test automation engineers The tester coaches a junior tester in Behaviour Driven Development, reviewing their work and providing feedback and advice. \u200b Responsible for ensuring that testing on a project adds up to a coherent whole A project uses several different testing techniques - automated, manual, non-functional. The tester sees that there is a lack of security testing, so they recommend to the Delivery Manager that several security testing PBI's are added to the backlog. \u200b Will be involved in hiring and other resourcing decisions (but is not responsible for recruitment) Having received appropriate training, the tester is a member of the board on an interview of a test automation engineer. They assist in creating the questions used. \u200bSoftware Testing Subject Matter Expert (10%) Advise the team on the best approach for automated tests \u200bThe team are building a new application; the tester reviews the PBI's and advises on the best approach for automated testing. \u200b \u200bHelps the team on using best practice for writing Behaviour Driven Development testing \u200bThe tester sees that some of the team have less confidence than others in using BDD. They offer to provide some 1-2-1 coaching to improve the overall level of skill within the team. \u200b \u200b\u200bLooks at the testability of a product As part of backlog refinement they see that implementing stubs or mocks will allow the team to progress testing rather than having to wait for another PBI to be completed. Setup tasks for testing (5%) \u200bCreates test data for a sprint \u200bThere is a requirement to test a complex change, the tester analyses which data will be needed for the tests and arranges with the Lead Developer to get the relevant data restored into the test system. \u200b \u200bAssists with preparing environments for testing \u200bPrior to a sprint starting the tester runs some confidence tests to ensure that the test environment is ready for testing. \u200bAct as Subject Matter Expert in a technology across UKHO (10%) \u200bLeads that technology, its adoption and best practices across UKHO \u200bThe tester would champion the technology across all teams, create best practices, provide mentoring to teams, lead events and engage with external organisations, adding to the body of knowledge regarding the technology. \u200bContinually develop own skills as part of a program of professional development (5%) \u200bCreates and takes pro-active ownership of a continuous learning cycle for themselves \u200bReviewing their current skill level, they identify that they have a knowledge gap on how DevOps works. They put together a plan that utilises books, and online materials to gain a better understanding.","title":"Lead Test Engineer (Team)"},{"location":"quality-assurance/roles/senior-test-engineer/","text":"Senior Test Engineer Area Tasks Stories Creating test automation (30%) Responsible for writing automated tests in software development Working as part of a delivery team, writing new and refactoring existing automated tests. \u200b Accountable for ensuring that UKHO test automation code standards are maintained Both testers and developers can write automated tests; the tester notices a new approach used, they review this with the writer to ensure standards are met or that the standards need updating. \u200b Responsible for pro-actively researching and recommending the use of technology A company bring out a new tool for managing test data. The tester sees that this resolves a common problem in several teams. They research it and finds it to be fit for purpose and recommends to the Test Department. \u200b Accountable for producing solutions that are supportable, including documentation, knowledge transfer and support documentation The tester's delivery team is creating a new piece of software. They check that the team's \"Definition of Done\" includes specific items for automated testing and the approach that should be taken. Create relevant test documents for project (Test Approach, Test Strategy, Test Summary Report) (5%)) Responsible for the creation of the Test Strategy, Test Approach and the Test Summary report as required At the start of a project the tester takes ownership of producing the relevant document that provides details on how testing of the product will be undertaken. This must be produced in conjunction with the developers and Delivery Manager, and they will ensure the document is signed off.If required, the tester will create a Test Summary Report that provides an overview of the testing completed. Analysing Requirements and designing manual or automated tests (20%) Review requirements to understand how they can be tested The role helps review requirements; the tester sees that altering the requirement slightly would help the testing of it so they discuss this with the Delivery Manager and lead developer. \u200b \u200bDesign manual tests \u200bA feature needs to be manually tested so the tester uses test design techniques to create both happy and unhappy path test plans. \u200b \u200bDesign Automated tests \u200bA feature will need automated tests; the tester uses test design techniques to create the relevant automated tests, using TDD and BDD approaches. \u200bLeads Testing (25%) Leads the team in ensuring that the product is tested to a satisfactory level to give confidence that when released it will function as intended During a sprint, the tester notices that the developers do not have enough work to do. The tester discusses with the team and proposes that there are some test tasks that they could work on to keep the sprint on track. Leads the use of Behaviour Driven Development (BDD) within the delivery team The Delivery Manager is finding it challenging to add acceptance criteria to a PBI. They work with the Delivery Manager using BDD techniques to create acceptance criteria. \u200b Carries out exploratory testing A feature is under test; the tester feels that some exploratory testing will help look for defects. They use a test charter and test persona to carry out some exploratory testing. \u200b Responsible for coaching less experienced test automation engineers The tester coaches a junior tester in Behaviour Driven Development, reviewing their work and providing feedback and advice. \u200b Responsible for ensuring that testing on a project adds up to a coherent whole A project uses several different testing techniques - automated, manual, non-functional. The tester sees that there is a lack of security testing, so they recommend to the Delivery Manager that several security testing PBI's are added to the backlog. \u200b Will be involved in hiring and other resourcing decisions (but is not responsible for recruitment) Having received appropriate training, the tester is a member of the board on an interview of a test automation engineer. They assist in creating the questions used. \u200bSoftware Testing Subject Matter Expert (10%) Advise the team on the best approach for automated tests \u200bThe team are building a new application; the tester reviews the PBI's and advises on the best approach for automated testing. \u200b \u200bHelps the team on using best practice for writing Behaviour Driven Development testing \u200bThe tester sees that some of the team have less confidence than others in using BDD. They offer to provide some 1-2-1 coaching to improve the overall level of skill within the team. \u200b \u200b\u200bLooks at the testability of a product As part of backlog refinement they see that implementing stubs or mocks will allow the team to progress testing rather than having to wait for another PBI to be completed. Setup tasks for testing (5%) \u200bCreates test data for a sprint \u200bThere is a requirement to test a complex change, the tester analyses which data will be needed for the tests and arranges with the Lead Developer to get the relevant data restored into the test system. \u200b \u200bAssists with preparing environments for testing \u200bPrior to a sprint starting the tester runs some confidence tests to ensure that the test environment is ready for testing. \u200bContinually develop own skills as part of a program of professional development (5%) \u200bCreates and takes pro-active ownership of a continuous learning cycle for themselves \u200bReviewing their current skill level, they identify that they have a knowledge gap on how DevOps works. They put together a plan that utilises books, and online materials to gain a better understanding.","title":"Senior Test Engineer"},{"location":"quality-assurance/roles/senior-test-engineer/#senior-test-engineer","text":"Area Tasks Stories Creating test automation (30%) Responsible for writing automated tests in software development Working as part of a delivery team, writing new and refactoring existing automated tests. \u200b Accountable for ensuring that UKHO test automation code standards are maintained Both testers and developers can write automated tests; the tester notices a new approach used, they review this with the writer to ensure standards are met or that the standards need updating. \u200b Responsible for pro-actively researching and recommending the use of technology A company bring out a new tool for managing test data. The tester sees that this resolves a common problem in several teams. They research it and finds it to be fit for purpose and recommends to the Test Department. \u200b Accountable for producing solutions that are supportable, including documentation, knowledge transfer and support documentation The tester's delivery team is creating a new piece of software. They check that the team's \"Definition of Done\" includes specific items for automated testing and the approach that should be taken. Create relevant test documents for project (Test Approach, Test Strategy, Test Summary Report) (5%)) Responsible for the creation of the Test Strategy, Test Approach and the Test Summary report as required At the start of a project the tester takes ownership of producing the relevant document that provides details on how testing of the product will be undertaken. This must be produced in conjunction with the developers and Delivery Manager, and they will ensure the document is signed off.If required, the tester will create a Test Summary Report that provides an overview of the testing completed. Analysing Requirements and designing manual or automated tests (20%) Review requirements to understand how they can be tested The role helps review requirements; the tester sees that altering the requirement slightly would help the testing of it so they discuss this with the Delivery Manager and lead developer. \u200b \u200bDesign manual tests \u200bA feature needs to be manually tested so the tester uses test design techniques to create both happy and unhappy path test plans. \u200b \u200bDesign Automated tests \u200bA feature will need automated tests; the tester uses test design techniques to create the relevant automated tests, using TDD and BDD approaches. \u200bLeads Testing (25%) Leads the team in ensuring that the product is tested to a satisfactory level to give confidence that when released it will function as intended During a sprint, the tester notices that the developers do not have enough work to do. The tester discusses with the team and proposes that there are some test tasks that they could work on to keep the sprint on track. Leads the use of Behaviour Driven Development (BDD) within the delivery team The Delivery Manager is finding it challenging to add acceptance criteria to a PBI. They work with the Delivery Manager using BDD techniques to create acceptance criteria. \u200b Carries out exploratory testing A feature is under test; the tester feels that some exploratory testing will help look for defects. They use a test charter and test persona to carry out some exploratory testing. \u200b Responsible for coaching less experienced test automation engineers The tester coaches a junior tester in Behaviour Driven Development, reviewing their work and providing feedback and advice. \u200b Responsible for ensuring that testing on a project adds up to a coherent whole A project uses several different testing techniques - automated, manual, non-functional. The tester sees that there is a lack of security testing, so they recommend to the Delivery Manager that several security testing PBI's are added to the backlog. \u200b Will be involved in hiring and other resourcing decisions (but is not responsible for recruitment) Having received appropriate training, the tester is a member of the board on an interview of a test automation engineer. They assist in creating the questions used. \u200bSoftware Testing Subject Matter Expert (10%) Advise the team on the best approach for automated tests \u200bThe team are building a new application; the tester reviews the PBI's and advises on the best approach for automated testing. \u200b \u200bHelps the team on using best practice for writing Behaviour Driven Development testing \u200bThe tester sees that some of the team have less confidence than others in using BDD. They offer to provide some 1-2-1 coaching to improve the overall level of skill within the team. \u200b \u200b\u200bLooks at the testability of a product As part of backlog refinement they see that implementing stubs or mocks will allow the team to progress testing rather than having to wait for another PBI to be completed. Setup tasks for testing (5%) \u200bCreates test data for a sprint \u200bThere is a requirement to test a complex change, the tester analyses which data will be needed for the tests and arranges with the Lead Developer to get the relevant data restored into the test system. \u200b \u200bAssists with preparing environments for testing \u200bPrior to a sprint starting the tester runs some confidence tests to ensure that the test environment is ready for testing. \u200bContinually develop own skills as part of a program of professional development (5%) \u200bCreates and takes pro-active ownership of a continuous learning cycle for themselves \u200bReviewing their current skill level, they identify that they have a knowledge gap on how DevOps works. They put together a plan that utilises books, and online materials to gain a better understanding.","title":"Senior Test Engineer"},{"location":"quality-assurance/roles/test-engineer/","text":"Test Engineer Areas Tasks Stories \u200bDeliver, under tuition, test automation as part of the Agile Delivery Team (35%) \u200bWriting test automation code \u200bA PBI requires automated tests; it is building on existing functionality so the automation tester can use existing automation code and add in the extra tests. Create relevant test documents for project (Test Approach, Test Strategy, Test Summary Report) (5%)) Responsible for the creation of the Test Strategy, Test Approach and the Test Summary report as required At the start of a project the tester takes ownership of producing the relevant document that provides details on how testing of the product will be undertaken. This must be produced in conjunction with the developers and Delivery Manager, and they will ensure the document is signed off.If required, the tester will create a Test Summary Report that provides an overview of the testing completed. Assist with the management of defects through to resolution, by processing them in the test tools, communicating effectively on the issue and carrying out re-tests as required (5%). Raise good quality defects The tester discovers a defect in a product. They raise a defect and include details on the impact, how the defect can be re-created and its importance. \u200b \u200bEnsures that all defects raised within a sprint are followed up \u200bThere are several open defects, the tester can see that if one of them is fixed it will allow a PBI to be completed. They discuss with the developers and they agree to focus on that defect first. Analysing Requirements and designing manual or automated tests (25%) Review requirements to understand how they can be tested The role helps review requirements; the tester sees that altering the requirement slightly would help the testing of it so they discuss this with the Delivery Manager and lead developer. \u200b \u200bDesign manual tests \u200bA feature needs to be manually tested so the tester uses test design techniques to create both happy and unhappy path test plans. \u200b \u200bDesign Automated tests \u200bA feature will need automated tests; the tester uses test design techniques to create the relevant automated tests, using TDD and BDD approaches. \u200bCarry out Testing (25%) Leads the use of Behaviour Driven Development (BDD) within the delivery team The Delivery Manager is finding it challenging to add acceptance criteria to a PBI. They work with the Delivery Manager using BDD techniques to create acceptance criteria. \u200b Carries out exploratory testing A feature is under test; the tester feels that some exploratory testing will help look for defects. They use a test charter and test persona to carry out some exploratory testing. \u200b \u200bRuns any manual testing \u200bThe tester reviews open PBIs and decides that some of the tests are better suited to be run manually. \u200b \u200bEnsure that any automated testing is being used and any failures followed up \u200bThe tester notices that some of the automated tests have failed; they investigate and seeks support/advice form other members of the team if needed. \u200b Has some responsibility for ensuring that testing on a project adds up to a coherent whole A project uses several different testing techniques - automated, manual, non-functional. The tester sees that there is a lack of security testing, so they recommend to the Delivery Manager that several security testing PBI's are added to the backlog. \u200b \u200b\u200bLooks at the testability of a product As part of backlog refinement they see that asking the developers to create a stub or mock will allow the team to be able to progress testing rather than having to wait for another PBI to be completed. \u200bContinually develop own skills as part of a program of professional development (5%) \u200bCreates and takes pro-active ownership of a continuous learning cycle for themselves \u200bReviewing their current skill level, they identify that they have a knowledge gap on how DevOps works. They put together a plan that utilises books, and online materials to gain a better understanding.","title":"Test Engineer"},{"location":"quality-assurance/roles/test-engineer/#test-engineer","text":"Areas Tasks Stories \u200bDeliver, under tuition, test automation as part of the Agile Delivery Team (35%) \u200bWriting test automation code \u200bA PBI requires automated tests; it is building on existing functionality so the automation tester can use existing automation code and add in the extra tests. Create relevant test documents for project (Test Approach, Test Strategy, Test Summary Report) (5%)) Responsible for the creation of the Test Strategy, Test Approach and the Test Summary report as required At the start of a project the tester takes ownership of producing the relevant document that provides details on how testing of the product will be undertaken. This must be produced in conjunction with the developers and Delivery Manager, and they will ensure the document is signed off.If required, the tester will create a Test Summary Report that provides an overview of the testing completed. Assist with the management of defects through to resolution, by processing them in the test tools, communicating effectively on the issue and carrying out re-tests as required (5%). Raise good quality defects The tester discovers a defect in a product. They raise a defect and include details on the impact, how the defect can be re-created and its importance. \u200b \u200bEnsures that all defects raised within a sprint are followed up \u200bThere are several open defects, the tester can see that if one of them is fixed it will allow a PBI to be completed. They discuss with the developers and they agree to focus on that defect first. Analysing Requirements and designing manual or automated tests (25%) Review requirements to understand how they can be tested The role helps review requirements; the tester sees that altering the requirement slightly would help the testing of it so they discuss this with the Delivery Manager and lead developer. \u200b \u200bDesign manual tests \u200bA feature needs to be manually tested so the tester uses test design techniques to create both happy and unhappy path test plans. \u200b \u200bDesign Automated tests \u200bA feature will need automated tests; the tester uses test design techniques to create the relevant automated tests, using TDD and BDD approaches. \u200bCarry out Testing (25%) Leads the use of Behaviour Driven Development (BDD) within the delivery team The Delivery Manager is finding it challenging to add acceptance criteria to a PBI. They work with the Delivery Manager using BDD techniques to create acceptance criteria. \u200b Carries out exploratory testing A feature is under test; the tester feels that some exploratory testing will help look for defects. They use a test charter and test persona to carry out some exploratory testing. \u200b \u200bRuns any manual testing \u200bThe tester reviews open PBIs and decides that some of the tests are better suited to be run manually. \u200b \u200bEnsure that any automated testing is being used and any failures followed up \u200bThe tester notices that some of the automated tests have failed; they investigate and seeks support/advice form other members of the team if needed. \u200b Has some responsibility for ensuring that testing on a project adds up to a coherent whole A project uses several different testing techniques - automated, manual, non-functional. The tester sees that there is a lack of security testing, so they recommend to the Delivery Manager that several security testing PBI's are added to the backlog. \u200b \u200b\u200bLooks at the testability of a product As part of backlog refinement they see that asking the developers to create a stub or mock will allow the team to be able to progress testing rather than having to wait for another PBI to be completed. \u200bContinually develop own skills as part of a program of professional development (5%) \u200bCreates and takes pro-active ownership of a continuous learning cycle for themselves \u200bReviewing their current skill level, they identify that they have a knowledge gap on how DevOps works. They put together a plan that utilises books, and online materials to gain a better understanding.","title":"Test Engineer"},{"location":"teams/proteus/","text":"Team Proteus Team Proteus is a delivery team currently working on the Data Platform. The team was formerly known as Peppermint but has changed considerably since then to include members from the former Glaciermint team and elsewhere. Members Brian Stenson - Delivery Manager Chris Hall-Palmer - Solution Architect Antony Derham - Lead/Expert Software Engineer Sean Siford - Senior Software Engineer Alex Bush - Senior Software Engineer Benjamin Morgan - Software Engineer Kevin Harragan - Software Engineer Andy Cleveland - Senior Test Engineer Principles Delivery efforts made by Team Proteus follow these principles. Use Continuous Delivery - Never build-up work to release Use Design System - All UI work should use components and patterns from the system Use Open Standards - Should be favoured over proprietary lock-in, at least for an interface Use PaaS/SaaS over IaaS/metal - Costs and scalability make these favourable Use cloud over on-prem - Government standard approach Use Slack for communications - More integrations, rest of gov uses Definition of Done Our definition of done must be followed for all work delivered. Sections may only apply to some work. All Work All acceptance criteria are met All tasks are marked as done The boundary of the VNet is not compromised All knowledge transfer complete across team Risks identified and added to RAID log Tech Debt considered and added to Tech Debt log Threat Modelling completed and captured Cost was considered in implementation Software Dev Code review complete Related pull requests merged Continuous integration pipeline written, passing and configured to run appropriate unit test, component test and build jobs [POST-AB#7553] Contract test behaviour written for Consumers, verified on Providers and passing in build pipeline. Pull Request linked to Azure Board items Appropriate unit/component tests written, passing and executed in build pipeline Container Apps Should have readiness probe Should expose appropriate monitoring endpoints Logging out to appropriate log service App deployment written and deployed by Flux Context paths in container context and rewrite rules in ingresses Migrations Tests remain passing after migration Tests re-written where appropriate","title":"Team Proteus"},{"location":"teams/proteus/#team-proteus","text":"Team Proteus is a delivery team currently working on the Data Platform. The team was formerly known as Peppermint but has changed considerably since then to include members from the former Glaciermint team and elsewhere.","title":"Team Proteus"},{"location":"teams/proteus/#members","text":"Brian Stenson - Delivery Manager Chris Hall-Palmer - Solution Architect Antony Derham - Lead/Expert Software Engineer Sean Siford - Senior Software Engineer Alex Bush - Senior Software Engineer Benjamin Morgan - Software Engineer Kevin Harragan - Software Engineer Andy Cleveland - Senior Test Engineer","title":"Members"},{"location":"teams/proteus/#principles","text":"Delivery efforts made by Team Proteus follow these principles. Use Continuous Delivery - Never build-up work to release Use Design System - All UI work should use components and patterns from the system Use Open Standards - Should be favoured over proprietary lock-in, at least for an interface Use PaaS/SaaS over IaaS/metal - Costs and scalability make these favourable Use cloud over on-prem - Government standard approach Use Slack for communications - More integrations, rest of gov uses","title":"Principles"},{"location":"teams/proteus/#definition-of-done","text":"Our definition of done must be followed for all work delivered. Sections may only apply to some work.","title":"Definition of Done"},{"location":"teams/proteus/#all-work","text":"All acceptance criteria are met All tasks are marked as done The boundary of the VNet is not compromised All knowledge transfer complete across team Risks identified and added to RAID log Tech Debt considered and added to Tech Debt log Threat Modelling completed and captured Cost was considered in implementation","title":"All Work"},{"location":"teams/proteus/#software-dev","text":"Code review complete Related pull requests merged Continuous integration pipeline written, passing and configured to run appropriate unit test, component test and build jobs [POST-AB#7553] Contract test behaviour written for Consumers, verified on Providers and passing in build pipeline. Pull Request linked to Azure Board items Appropriate unit/component tests written, passing and executed in build pipeline","title":"Software Dev"},{"location":"teams/proteus/#container-apps","text":"Should have readiness probe Should expose appropriate monitoring endpoints Logging out to appropriate log service App deployment written and deployed by Flux Context paths in container context and rewrite rules in ingresses","title":"Container Apps"},{"location":"teams/proteus/#migrations","text":"Tests remain passing after migration Tests re-written where appropriate","title":"Migrations"}]}